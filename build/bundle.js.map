{"version":3,"sources":["app.js","popup.js","publishSubscribe.js","settings.js","common/common.js","common/filter.js","common/filters.js","common/images.js","common/labels.js","common/nodeArray.js","common/typeahead.js","common/typeaheadSimple.js","controllers/controller.mob.js","controllers/controller.utils.js","edge/edge.js","interaction/draggable.js","interaction/interaction.js","interaction/resizable.js","interaction/selectable.js","graph/graph.js","layout/layout.js","neo/cache.js","neo/neo.client.js","neo/neo.js","neo/session.js","neo/utils.js","node/node.edit.js","node/node.js","query/query.js","query/query.presets.js","query/queryDirective.js","node/favourites/node.favourites.js","node/freebase/node.freebase.js","node/graphpanel/node.graphpanel.js","node/graphtypes/node.graphTypes.js","node/imageRelationships/node.imageRelationships.js","node/images/node.images.js","node/multiple/node.multiple.js","node/wikipedia/node.wikipedia.js","query/generator/favouritesFilter.js","query/generator/nodeFilter.js","query/generator/nodeGraph.js","query/generator/query.generator.js"],"names":["angular","module","app","config","$stateProvider","$urlRouterProvider","state","url","templateUrl","views","nodeSearch@admin","controller","query@admin","queryResults@admin","otherwise","$scope","neo","presets","utils","session","subscribe","node","selection","hoverNode","$watch","edge","selectedNode","undefined","multiple","images","saveFavourite","user","newEdge","$apply","selectedEdge","tabs","selectedTab","run","$rootScope","PubSubService","Initialize","document","addEventListener","$","click","chrome","executeScript","file","addDependencies","insertCSS","service","scope","publishEventMap","constructor","prototype","publish","args","evnt","_thisScope","this","slice","call","arguments","splice","forEach","handlerMap","handler","apply","handlers","push","$id","$on","i","l","length","factory","apiRoot","directive","replace","restrict","init","enabled","process","link","$element","$attrs","filters","labels","f","getFilterClass","value","toggleFilter","label","inArray","filter","input","editing","nodes","active","updatemasonry","$ul","find","items","removeClass","applyMasonry","hasClass","masonry","setTimeout","nodeselector","addClass","navigate","name","view","type","queryGenerator","id","options","Label","selectAll","selected","map","e","params","removeItems","sel","console","log","remove","refreshContent","filterBy","selectedNodes","sender","makeFavourite","navpath","highlight","setLabels","x","getNodeByLabel","then","getClass","getLabelClass","onselected","directbinding","width","directBinding","Lookup","on","focus","clickable","nodeClicked","item","indexOf","ind","each","addNode","removeNode","choice","watchvalue","text","autosize","template","element","attrs","getSource","source","key","types","JSON","stringify","predicates","nodeSource","placeholderDefault","$input","attr","n","val","css","typeahead","matcher","obj","parse","toLowerCase","query","sorter","aItem","beginswith","caseSensitive","caseInsensitive","shift","concat","highlighter","out","Predicate","ToString","RegExp","$1","match","Type","updater","itemSelected","keyCode","isArray","lenth","d","matchNodes","data","ngModel","$window","$document","routeParams","$location","window","tabsWidth","topBarHeight","selectTab","tab","temp","setTab","pictureid","getNode","path","tabSettings","editable","toggleEditSelectedTab","settingPropsAndTabs","$watchCollection","getProps","extend","properties","favourites","newNode","nodeLookupText","metadata","getPersonData","callback","getFreebasePersonData","FreebaseID","FB_date_of_birth","YearFrom","parseInt","split","FB_date_of_death","YearTo","getBlurb","getFreebaseText","blurb","getData","blurbOnly","updated","updatedPerson","saveProps","nid","fixNames","getNodeList","names","Name","newName","trim","importQuery","reselect","mid","FB_name","clear","importFreebaseData","getFreebaseId","result","disambiguation","response","nochange","dir","quotesToNodes","FB_quotations","quote","qnode","Text","Creator","saveNode","startNode","endNode","saveEdge","edge@","edgeHeader@","$stateParams","predicateType","deleteEdge","activeView","edges","g","initLeft","position","left","draggable","axis","drag","change","w","getWindowDimensions","height","tabsWidthInner","graphWidth","graphHeight","tabsHeight","newValue","oldValue","bind","selectable","stop","event","ui","cancel","$state","network","graphOptions","onConnect","start","from","defaultEdgeType","to","end","Weight","graph","vis","DataSet","Network","setSize","getSelectedNodeId","focusOnNode","scale","animation","duration","easingFunction","zoomExtent","senderId","hide","suppressSelected","get","nodeids","selectNodes","go","edgeids","nodeid","getSelectedNodes","_getNodeAt","pageX","y","pageY","dataNode","freezeSimulation","gArr","toGraphData","add","update","transclude","panes","self","select","pane","p","require","title","visible","tabsCtrl","stopPropagation","$q","currentNode","when","$http","$resource","settings","root","method","getRelationships","getWithRels","getByLabel","getWithRelsByLabel","getOne","getList","save","saveRels","saveWikipagename","saveMultiple","del","destroy","restore","getImages","getImageRelationships","getAll","predicate","getDistinctLabels","neoClient","that","setPropsAndTabsFromLabels","setPropsAndTabs","$promise","toJSON","getGraph","q","returnArray","getAllRelationships","nodeIds","getIds","returnType","join","addrelprops","relPropKey","relProps","relProp","Direction","limit","Wikipagename","isPicture","isGroup","trimmed","destroyNode","deleteNode","restoreNode","getUser","userLookup","txt","getDistinctLabelsQuery","anonUser","roles","Public","signedIn","signingIn","signIn","username","password","authenticate","localStorage","PreReg","failMessage","reject","signOut","Array","diff","a","ids","hasAny","unique","current","lookup","direction","IsDirectional","Key","Reverse","View","queryPresets","queryGenerators","nodeGraph","nodeFilter","favouritesFilter","graphNodeFromNeoNode","neoNode","yf","yt","level","startYear","endYear","step","cnt","person","isPerson","size","Status","group","mass","radius","image","thumbUrl","shape","fontSize","fontColor","color","graphEdgeFromNeoEdge","neoEdge","directional","hideEdgeLabel","hideEdge","opacity","style","labelAlignment","refreshTypes","refreshPredicates","newView","isType","fromType","toType","isSystemInfo","personTypes","pictureTypes","widthSelectionMultiplier","hierarchicalLayout","levelSeparation","nodeSpacing","dataManipulation","initiallyVisible","physics","barnesHut","gravitationalConstant","centralGravity","springLength","springConstant","damping","repulsion","nodeDistance","hierarchicalRepulsion","onDelete","graphData","r","cache","deleted","newData","links","labelled","beforechange","isAutogeneratedField","addItem","col","removeItem","nodeTypes","selectedTypes","setType","reverseRelprop","prop","reversedProp","copy","v","addRelationship","toUpperCase","nodeHeader@admin","node@admin","viewnode@admin.main.node","editnode@admin.main.node","addNodeToGraph","Graph","graphView","publishViewChange","listeners","defaultImageView","updateView","viewService","querypreset","defaultpreset","AddedRecently","AddedRecentlyPictures","Overview","OverViewDense","British Influence","British Only","connectAll","French Only","French Painter influence","Cezanne 3 gen","Cezanne 3 gen outbound","Cezanne 3 gen inbound","French-English Painters","German","NorthernEurope","Italian","Spanish","American","Pop","Impressionism","Landscape","Modern","Rennaissance","preset","generatedQuery","nodeChanged","g2","querys","creationQueries","propname","art_genre","art_subject","period_or_movement","locations","date_begun","date_completed","queries","artworks","quotations","influenced","influenced_by","associated_periods_or_movements","peers","date_of_birth","date_of_death","_getTopic","freebaseId","service_url","getJSON","_getPersonData","props","arr","property","valuetype","vals","values","getImage","imageId","getText","FB_ID","allowedLength","indIs","indWas","stopSpc","substring","stopCr","until","shortname","str","short","full","FB_blurb","FB_blurb_full","getTopic","getCreationData","getId","API_KEY","ispicture","Title","domain","error","Description","loaded","getFreebase","h","yq","preview","isLabel","hasData","isEmptyObject","openGridTab","allLabels","every","originalLabels","addLabel","removeLabel","restored","wikiTabs","page","$wikiDOM","redirect","padding-right","padding-bottom","appendTo","margin-bottom","margin-top","float","overflow","display","margin-right","font-size","margin","parent","replaceWith","html","background","max-width","next","cursor","nextUntil","andSelf","$introTab","header","content","$tab","marginBottom","getWiki","uselang","getPage","wikiservice","setActiveTab","activeTab","savePage","$digest","dropdown","generated","load","getFilters","enabledFilters","labelQuery","lab","labs","b","nodechanged","openNode","getQuerys","prevselection"],"mappings":"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","file":"bundle.js","sourcesContent":["angular.module(\"templates\",[]);\r\nvar app = angular\r\n    .module(\"Neograph\", \r\n    [\r\n    \"templates\",\r\n    'publishSubscribe',\r\n    'ui.router',\r\n    'ngSanitize',\r\n    'neograph.common',\r\n    'neograph.edge',\r\n    'neograph.graph',\r\n    'neograph.interaction',\r\n    'neograph.layout',\r\n    'neograph.neo',\r\n    'neograph.node',\r\n    'neograph.query',\r\n    'neograph.controller.mob'\r\n   \r\n    ])\r\n    .config( ($stateProvider, $urlRouterProvider)=> {\r\n\r\n\r\n        $stateProvider\r\n          \r\n            .state('admin',{\r\n                url:'/admin',\r\n                templateUrl:'app/partials/admin.html'\r\n            })\r\n            .state('admin.main',{\r\n                url:'/main?querypreset',\r\n                views:{\r\n                    'nodeSearch@admin':{\r\n                        controller:'NodeSearchCtrl',\r\n                        templateUrl:'app/node/nodeSearch.html'\r\n                    }\r\n                    ,\r\n                    'query@admin':{\r\n                        controller:'QueryCtrl',\r\n                        templateUrl:'app/query/query.html'\r\n                    }\r\n                    ,\r\n                    'queryResults@admin':{\r\n                        controller:'QueryResultsCtrl',\r\n                        templateUrl:'app/query/queryResults.html'\r\n                    }\r\n                    \r\n                }\r\n\r\n            })\r\n    \r\n\r\n        $urlRouterProvider.otherwise(\"/admin/main\");\r\n\r\n    })\r\n    .controller(\"AdminController\", ['$scope', 'neo', 'queryPresets', 'utils','session', \r\nfunction ($scope,  neo, presets, utils,session) {\r\n\r\n    //SWAP ADMIRES FOR INSPIRES\r\n    //MATCH (n)-[r:ADMIRES]->(m) CREATE (m)-[r2:INSPIRES]->(n) SET r2 = r WITH r DELETE r\r\n\r\n   \r\n        \r\n\r\n    $scope.subscribe(\"hover\", function (node) {\r\n\r\n        $scope.selection.hoverNode = node;\r\n\r\n    });\r\n\r\n   \r\n\r\n    //= function () {\r\n\r\n    //    var view = newView($scope.selection.selectedNode.Lookup, \"Grid\");\r\n    //    view.queryGenerators.nodeFilter.options = { node: $scope.selection.selectedNode };\r\n    //    view.queryGenerator = view.queryGenerators.nodeFilter;\r\n    //    $scope.activeViewKey = view.key;\r\n\r\n    //}\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n   \r\n function shouldEnabledAddToGraph() {\r\n\r\n        $scope.enableAddToGraph = $scope.selection.selectedNode &&\r\n            $scope.selection.selectedNode.id &&\r\n            $scope.activeView.type == \"Graph\" &&\r\n            !$scope.activeView.data.nodes[$scope.selection.selectedNode.id];\r\n\r\n\r\n    }\r\n \r\n\r\n   \r\n\r\n\r\n    $scope.$watch('selection.selectedEdge', function (edge) {\r\n\r\n        if (edge) {\r\n            $scope.selection.selectedNode = undefined;\r\n            $scope.selection.multiple = undefined;\r\n            $scope.selection.images = [];\r\n\r\n        }\r\n\r\n    });\r\n\r\n    $scope.subscribe(\"favourite\", function (node) {\r\n\r\n        neo.saveFavourite(node, session.user);\r\n\r\n    });\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ////published by graph ondelete\r\n    //$scope.subscribe(\"deleting\", function () {\r\n\r\n    //    if (confirm(\"Delete Confirm ? \")) {\r\n    //        //TODO: WHY DOES THIS FIRE 3 TIMES ??\r\n    //        if ($scope.selection.selectedNode) {\r\n\r\n    //            $scope.deleteNode($scope.selection.selectedNode);\r\n\r\n    //        }\r\n    //        else if ($scope.selection.selectedEdge) {\r\n\r\n    //            $scope.deleteEdge($scope.selection.selectedEdge);\r\n    //        }\r\n    //    }\r\n\r\n    //})\r\n\r\n\r\n\r\n    //published by graph onconnecting\r\n    //the new edge shows in the properties window and must then be saved \r\n    $scope.subscribe(\"newEdge\", function (newEdge) {\r\n\r\n        $scope.$apply(function () {\r\n\r\n            $scope.selection.selectedEdge = newEdge;\r\n            $scope.tabs = [\"Properties\"];\r\n            $scope.selectedTab = \"Properties\";\r\n\r\n        })\r\n\r\n\r\n    });\r\n\r\n/*\r\n    $scope.defaultpreset = presets[\"British Only\"];\r\n  \r\n   \r\n    setTimeout(function(){\r\n        var initNode = {id:78550};\r\n        \r\n         $scope.nodeLookup=initNode;\r\n        $scope.publish(\"selected\", \r\n        {\r\n            selection:{nodes:[initNode]}\r\n        }\r\n        );\r\n        \r\n        $scope.selectedTab = \"Images\";\r\n        \r\n    },1000);\r\n*/\r\n\r\n}])\r\n   .run(function ($rootScope, PubSubService) {\r\n      PubSubService.Initialize($rootScope);\r\n  });\r\n   \r\n\r\n","\r\n\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n\r\n    $('#btn').click(function () {\r\n\r\n        chrome.tabs.executeScript(null, { file: \"angular.min.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"jquery.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"scraper/controller.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"scraper/scraper.js\" });\r\n\r\n\r\n    });\r\n\r\n\r\n    var addDependencies = function () {\r\n\r\n\r\n chrome.tabs.insertCSS(null, { file: \"ext/lib/bootstrap-button.css\" });\r\n        chrome.tabs.insertCSS(null, { file: \"ext/lib/bootstrap-dropdown.css\" });\r\n        chrome.tabs.insertCSS(null, { file: \"ext/style.css\" });\r\n        chrome.tabs.executeScript(null, { file: \"ext/lib/jquery.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"ext/lib/bootstrap.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"ext/lib/angular.min.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"ext/lib/angular-resource.min.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"ext/lib/angular-sanitize.min.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"modules.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"filters/filters.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"factories/neoHelper.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"factories/utils.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"factories/neo.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"directives/typeahead.js\" });\r\n\r\n    }\r\n\r\n\r\n    $('#google').click(function () {\r\n        addDependencies();\r\n        chrome.tabs.executeScript(null, { file: \"ext/google.js\" });\r\n    });\r\n\r\n    $('#tate').click(function () {\r\n        addDependencies();\r\n        chrome.tabs.executeScript(null, { file: \"ext/tate.js\" });\r\n    });\r\n\r\n});\n","angular.module(\"publishSubscribe\",[])\r\n.service('PubSubService', function () {\r\n\r\n      return {Initialize:Initialize};\r\n\r\n      function Initialize (scope) {\r\n          //Keep a dictionary to store the events and its subscriptions\r\n          var publishEventMap = {};\r\n\r\n          //Register publish events\r\n          scope.constructor.prototype.publish =  scope.constructor.prototype.publish \r\n           || function () {\r\n               var _thisScope = this,\r\n                   handlers, \r\n                   args, \r\n                   evnt;\r\n               //Get event and rest of the data\r\n               args = [].slice.call(arguments);\r\n               evnt = args.splice(0, 1);\r\n               //Loop though each handlerMap and invoke the handler\r\n               angular.forEach((publishEventMap[evnt] || []), function (handlerMap) {\r\n                   handlerMap.handler.apply(_thisScope, args);\r\n               })\r\n           }\r\n\r\n          //Register Subscribe events\r\n          scope.constructor.prototype.subscribe = scope.constructor.prototype.subscribe \r\n             || function (evnt, handler) {\r\n                 var _thisScope = this,\r\n                     handlers = (publishEventMap[evnt] = publishEventMap[evnt] || []);\r\n\r\n                 //Just keep the scopeid for reference later for cleanup\r\n                 handlers.push({ $id: _thisScope.$id, handler: handler });\r\n                 //When scope is destroy remove the handlers that it has subscribed.  \r\n                 _thisScope.$on('$destroy', function () {\r\n                     for(var i=0,l=handlers.length; i<l; i++){\r\n                         if (handlers[i].$id === _thisScope.$id) {\r\n                             handlers.splice(i, 1);\r\n                             break;\r\n                         }\r\n                     }\r\n                 });\r\n             }\r\n\r\n      }\r\n  });","angular.module('neograph.settings',[])\r\n.factory(\"settings\", function () {\r\n\r\n    return {\r\n        apiRoot : 'http://ideas.api.visualsystems.org'\r\n    }\r\n\r\n});\r\n","angular.module('neograph.common',[\r\n    'neograph.common.filter',\r\n    'neograph.common.filters',\r\n    'neograph.common.images',\r\n   'neograph.common.labels',\r\n    'neograph.common.nodeArray',\r\n   'neograph.common.typeahead',\r\n   'neograph.common.typeaheadSimple'\r\n    ]);","angular.module('neograph.common.filter',[])\r\n.directive('filter', function () {\r\n    return {\r\n        replace: true,\r\n        restrict: 'E',\r\n        templateUrl: 'app/common/filter.html',\r\n        scope: {\r\n\r\n            init: '='//an array of labels\r\n            ,\r\n            enabled: '='\r\n            ,\r\n            process: '&'\r\n\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n            $scope.filters = {}\r\n\r\n            $scope.$watch('init', function (labels) {\r\n\r\n                var filters = {};\r\n                angular.forEach(labels, function (f) {\r\n                    filters[f] = 0;\r\n                });\r\n\r\n                $scope.filters = filters;\r\n\r\n            });\r\n\r\n            $scope.getFilterClass = function (value) {\r\n\r\n                if (value === 1)\r\n                    return 'label-success';\r\n                else if (value === 0)\r\n                    return 'label-info';\r\n                else return '';\r\n            }\r\n\r\n            $scope.toggleFilter = function (label) {\r\n                if ($scope.filters[label] == 1) {\r\n                    $scope.filters[label] = 0;\r\n\r\n                }\r\n                else if ($scope.filters[label] == 0) {\r\n                    $scope.filters[label] = 1;\r\n\r\n                }\r\n                else if ($scope.filters[label] == -1) {\r\n                    for (var f in $scope.filters) {\r\n                        $scope.filters[f] = 0;\r\n                    };\r\n                    $scope.filters[label] = 1;\r\n                }\r\n\r\n                var labels = [];\r\n                for (var f in $scope.filters) {\r\n\r\n                    if ($scope.filters[f] === 1) {\r\n                        labels.push(f);\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                $scope.process({ labels: labels })\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            $scope.$watch(\"enabled\", function (labels) {//labels = selectable labels following filtering\r\n\r\n                if (labels && labels.length) {\r\n                    for (var f in $scope.filters) {\r\n\r\n                        if ($.inArray(f, labels) == -1) {//disable filter if not in list\r\n                            $scope.filters[f] = -1;\r\n                        }\r\n                        else if ($scope.filters[f] == -1) {//enable filter if in list and previously disabled\r\n                            $scope.filters[f] = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n\r\n                    for (var f in $scope.filters) {\r\n                        $scope.filters[f] = 0;\r\n                    }\r\n                }\r\n\r\n            })\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n})","angular.module('neograph.common.filters', []).filter('checkmark', function () {\r\n    return function (input) {\r\n        return input ? '\\u2713' : '\\u2718';\r\n    };\r\n}).filter('predicate', function () {\r\n    return function (input) {\r\n        return input ? '\\u2713' : '\\u2718';\r\n    };\r\n});","angular.module('neograph.common.images',['neograph.neo','neograph.session'])\r\n.directive('images', ['neo','session', function (neo) {\r\n    return {\r\n        replace: true,\r\n        restrict: 'E',\r\n        templateUrl: 'app/common/images.html',\r\n        scope: {\r\n            editing: '='\r\n            , nodes: '=' //must be an array to preserve sort order\r\n            , active: '='\r\n            , updatemasonry: '='//required to update masonry on resize\r\n\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n            var $ul = $($element).find('ul');\r\n\r\n            $scope.items = {};\r\n\r\n            $scope.$watch('nodes', function (nodes) {\r\n                $ul.removeClass('masonryLoaded');\r\n                $scope.items = nodes;\r\n                applyMasonry();\r\n\r\n            })\r\n\r\n            $scope.$watch('updatemasonry', function () {\r\n                if ($ul.hasClass('masonry')) {\r\n                    $ul.masonry('reload');\r\n                }\r\n            });\r\n\r\n            $scope.$watch('active',applyMasonry);\r\n\r\n            var applyMasonry = function () {\r\n\r\n            //    if ($scope.updatemasonry) {\r\n\r\n                    setTimeout(function () {\r\n\r\n                        if ($ul.hasClass('masonry')) {\r\n                            $ul.masonry('reload');\r\n                        }\r\n                        else {\r\n                            $ul.masonry({\r\n                                nodeselector: 'li'\r\n                                //,\r\n                                //columnWidth: 1,\r\n                                //\"isFitWidth\": true\r\n                            });\r\n                        }\r\n\r\n                        $ul.addClass('masonryLoaded');\r\n\r\n\r\n                    }, 100);\r\n             //   }\r\n           //     else {\r\n                 //   $ul.addClass('masonryLoaded');\r\n           ///     }\r\n            }\r\n\r\n            $scope.navigate = function (label) {\r\n                $scope.publish(\"query\", {\r\n                    name: label,\r\n                    view: label,\r\n                    type: \"Grid\",\r\n                   queryGenerator: { id: \"nodeFilter\", options: { node: { Label: label } } } \r\n                });\r\n\r\n            }\r\n\r\n            $scope.selectAll = function () {\r\n\r\n                if ($ul.find(\"li.ui-selected\").length < $ul.find(\"li\").length) {\r\n                    $ul.find(\"li\").addClass(\"ui-selected\");\r\n                    $scope.selected = $scope.nodes.map(function (e, i) { return i });\r\n                }\r\n                else {\r\n                    $ul.find(\"li\").removeClass(\"ui-selected\");\r\n                    $scope.selected = [];\r\n                }\r\n            }\r\n\r\n            //this assumes that we are looking at a view of not deleted items\r\n            $scope.subscribe(\"deleted\", function (params) {\r\n\r\n                // alternatively i could have a deep watch on nodearray and update that \r\n                removeItems(params.selection.nodes);\r\n            });\r\n\r\n            //this assumes that we are looking at a view of deleted items\r\n            $scope.subscribe(\"restored\", function (params) {\r\n\r\n                // alternatively i could have a deep watch on nodearray and update that \r\n                removeItems(params.selection.nodes);\r\n            });\r\n\r\n\r\n            var removeItems = function (items) {\r\n\r\n                if (items && items.length) {\r\n                    angular.forEach(items, function (node) {\r\n                        var sel = \"li[nodeid='\" + node.id + \"']\";\r\n                        console.log(sel);\r\n                        $ul.find(sel).remove();\r\n                    });\r\n                    applyMasonry();\r\n\r\n                }\r\n            }\r\n     \r\n\r\n\r\n            $scope.getFilterClass = function (value) {\r\n\r\n                if (value === 1)\r\n                    return 'label-success';\r\n                else if (value === 0)\r\n                    return 'label-info';\r\n                else return '';\r\n            }\r\n\r\n            $scope.toggleFilter = function (label) {\r\n                if ($scope.filters[label] == 1) {\r\n                    $scope.filters[label] = 0;\r\n                    refreshContent();\r\n                }\r\n                else if ($scope.filters[label] == 0) {\r\n                    $scope.filters[label] = 1;\r\n                    refreshContent();\r\n                }\r\n                else if ($scope.filters[label] == -1) {\r\n                    for (var f in $scope.filters) {\r\n                        $scope.filters[f] = 0;\r\n                    };\r\n\r\n                    $scope.filters[label] = 1;\r\n                    refreshContent();\r\n                }\r\n\r\n\r\n            }\r\n\r\n            //triggered by selecting a filter\r\n            $scope.$watch('filterBy', function (label) {\r\n                if (label) {\r\n                    $scope.filters[label] = 1;\r\n                    $scope.filterBy = undefined;\r\n                    refreshContent();\r\n                }\r\n\r\n            });\r\n\r\n      \r\n\r\n            //triggered by selecting one or more images\r\n            $scope.$watch('selected', function (selected) {// NB selected is now an array of node indexes\r\n\r\n                if (selected && selected.length) {\r\n\r\n             \r\n                    var selectedNodes = selected.map(function (i) {\r\n                        return $scope.nodes[i];\r\n                    });\r\n\r\n            //NB if there are multiple instances of the images directive (as typically) it wont be possible ot know which one the event was sent from\r\n                    //but mainly we need to know that it wasnt sent from the graph or controller, as images currently doesnt substribe to selected event\r\n                    $scope.publish(\"selected\", { sender: \"Images\", selection: { nodes: selectedNodes} })\r\n        \r\n\r\n\r\n                }\r\n\r\n\r\n            });\r\n\r\n            $scope.makeFavourite = function (node) {\r\n                console.log(node);\r\n                $scope.publish(\"favourite\", node);\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.common.labels',['neograph.neo','neograph.utils'])\r\n.directive('labels', ['neo', 'utils', function (neo, utils) {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/common/labels.html',\r\n        scope: {\r\n            node: '=?'\r\n            ,\r\n            labels: '=?'\r\n            ,\r\n            items: '=?'\r\n            ,\r\n            navpath: '@?'\r\n            ,\r\n            highlight:'@?'\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n            $scope.$watch('node', function (node) {\r\n                if (node) {\r\n                    setLabels();\r\n                }\r\n          \r\n            });\r\n\r\n            $scope.$watch('items', function (items) {\r\n                if (items) {\r\n                    $scope.labels = $scope.items.map(function (x) {return x.Label });\r\n                }\r\n              \r\n            });\r\n\r\n\r\n            //$scope.$watch('labels', function () {\r\n            //   setLabels()\r\n            //});\r\n\r\n            function setLabels() {\r\n\r\n                $scope.labels = $attrs[\"labels\"] ? $scope.labels : $scope.node ? $scope.node.labels : [];\r\n\r\n            }\r\n\r\n            if ($attrs['node']) {\r\n\r\n                $scope.navigate = function (label) {\r\n                    //load full node including labels and relationships\r\n                    neo.getNodeByLabel(label,true)\r\n                        .then(function (node) {\r\n\r\n                            $scope.node = node;\r\n\r\n                        });\r\n\r\n                }\r\n            }\r\n\r\n            if ($attrs['navpath']) {\r\n                $scope.navpath = $attrs['navpath'];\r\n            }\r\n\r\n\r\n           \r\n                $scope.getClass = function (label) {\r\n                    if (label === $attrs['highlight']) { \r\n                        return 'label-warning';\r\n                    }\r\n                    else\r\n                return utils.getLabelClass($scope.node, label);\r\n            }\r\n\r\n\r\n\r\n        }\r\n    }\r\n}]);","angular.module('neograph.common.nodeArray',['neograph.utils'])\r\n    .directive('nodeArray', ['utils', function (utils) {\r\n    return {\r\n        replace: true,\r\n        restrict: 'EA',\r\n        templateUrl: 'app/common/nodeArray.html',\r\n        scope: {\r\n\r\n            items: '='//an array of string or  items with label property \r\n            ,\r\n            enabled: '='\r\n            ,\r\n            onselected: '&?'\r\n            ,\r\n            node: '=?'\r\n            ,\r\n            directbinding: '@?'//set this to false if passing in array of strings\r\n            ,\r\n            width: '@?'\r\n\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n            var directBinding = $attrs[\"directbinding\"]==\"false\" ? false : true;\r\n     \r\n            $scope.nodes = [];\r\n\r\n         \r\n\r\n            $scope.$watch('items', function (items) {\r\n\r\n                if (items && items.length) {\r\n\r\n                    if (items[0] && (items[0].Label || items[0].Lookup)) {\r\n                      \r\n                        $scope.nodes = items;\r\n\r\n                    }\r\n                    else {\r\n                        directBinding = false;\r\n                        $scope.nodes = items.map(function (e) { return { Label: e } });\r\n\r\n\r\n                    }\r\n                }\r\n                else {\r\n                    if (directBinding) {\r\n                        $scope.nodes = items;\r\n                    }\r\n                    else {\r\n                        $scope.nodes = [];\r\n                    }\r\n                  \r\n                }\r\n            })\r\n\r\n            $($element).on('click', function () {\r\n                $($element).find('input').focus();\r\n            });\r\n\r\n            ////update items array (needed as items can be array of text items not nodes)\r\n            //$scope.$watch('nodes', function (nodes) {\r\n            //    if (!directBinding) {\r\n            //        mappingNodesToItems = true;\r\n            //        $scope.items = nodes.map(function (n) { return n.Label; })\r\n            //        mappingNodesToItems = false;\r\n            //    }\r\n\r\n            //}, true)\r\n\r\n            //$scope.getWidth = function () {\r\n            //    if ($scope.nodes) {\r\n            //        return $attrs[\"width\"] ? $attrs[\"width\"] : $scope.nodes.length > 5 ? '495px' : '230px'\r\n            //    }\r\n            //    else {\r\n            //        return null;\r\n            //    }\r\n            //}\r\n\r\n            $scope.getClass = function (node) {\r\n                return utils.getLabelClass($scope.node, node.Label);\r\n            }\r\n\r\n            $scope.clickable = $attrs[\"onselected\"] != undefined;\r\n\r\n            $scope.nodeClicked = function (node) {\r\n         \r\n                if ($attrs[\"onselected\"]) {\r\n\r\n                    $scope.onselected({ item: node });\r\n\r\n                }\r\n            }\r\n\r\n            var indexOf = function (node) {\r\n\r\n                var ind = -1;\r\n\r\n                $($scope.nodes).each(function (i, e) {\r\n\r\n                    if ((node.Label && e.Label === node.Label) || node.Lookup && e.Lookup == node.Lookup) {\r\n                        ind = i;\r\n                        return;\r\n                    }\r\n                });\r\n\r\n                return ind;\r\n\r\n            }\r\n\r\n            $scope.addNode = function (node) {\r\n                console.log(node);\r\n                console.log(directBinding);\r\n                if (indexOf(node) == -1) {\r\n                    console.log('node adding');\r\n                    $scope.nodes.push(node);\r\n  \r\n                    if (!directBinding) {\r\n                        console.log('item adding');\r\n                        $scope.items.push(node.Label)\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                //else highlight the node momentarily\r\n\r\n\r\n            }\r\n\r\n            $scope.removeNode = function (node) {\r\n                console.log(node);\r\n                var ind = indexOf(node);\r\n                console.log(ind);\r\n                if (ind > -1) {\r\n                    $scope.nodes.splice(ind, 1);\r\n\r\n                    if (!directBinding) {\r\n                        $scope.items.splice($scope.items.indexOf(node.Label||node.Lookup), 1);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}]);","angular.module('neograph.common.typeahead',['neograph.utils','neograph.neo'])\r\n    .directive('typeahead', ['utils', 'neo', function (utils, neo) {\r\n    return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n            choice: '=?',   //the choice should be an object for 2 way binding with Lookup property\r\n            watchvalue: '=?',  //watchvalue should be a text string  -just for updating the textbox value when the value changes, not fed back\r\n            text: '=?', //to feed back the text value when it changes (when no item has been selected)\r\n            restrict: '=?',//options to retrict the items that can be selected = Type,Predicate,User,custom object array with Lookup property\r\n            onselected: '&?',\r\n            autosize:'@?'\r\n\r\n        },\r\n        template: '<input type=\"text\" class=\"form-control\" />',\r\n        link: function ($scope, element, attrs) {\r\n\r\n            var placeholderDefault = \"Node...\";\r\n\r\n            var $input = $(element);//.find('input');\r\n            $input.attr(\"placeholder\", attrs[\"placeholder\"] || placeholderDefault);\r\n\r\n            $scope.$watch('choice', function (n) {\r\n                if (n) {\r\n                    $input.val(n.Label || n.Lookup);\r\n                }\r\n            })\r\n\r\n            if (!attrs[\"choice\"]) {\r\n                $scope.$watch('watchvalue', function (n) {\r\n                    $input.val(n);\r\n                })\r\n            }\r\n\r\n            if (attrs[\"autosize\"]) {\r\n\r\n                $input.css({ width: '10px' });\r\n                $input.attr(\"placeholder\", \"+\");\r\n                $input.on(\"focus\", function () {\r\n                    $input.css({ width: '100px' });\r\n                    $input.attr(\"placeholder\", attrs[\"placeholder\"] || placeholderDefault);\r\n                    setTimeout(function () {\r\n                        $input.css({ width: '100px' });\r\n                        $input.attr(\"placeholder\", attrs[\"placeholder\"] || placeholderDefault);\r\n                    }, 100)\r\n                  \r\n                });\r\n                $input.on(\"blur\", function () {\r\n                    $input.css({ width: '10px' });\r\n                    $input.attr(\"placeholder\", \"+\");\r\n                    $input.val('');\r\n                })\r\n              \r\n            }\r\n\r\n            $input.typeahead({\r\n                source: getSource(),\r\n\r\n                matcher: function (obj) {\r\n\r\n                    var item = JSON.parse(obj);\r\n\r\n                    return ~item.Lookup.toLowerCase().indexOf(this.query.toLowerCase())\r\n                }\r\n                ,\r\n                sorter: function (items) {\r\n                    var beginswith = [], caseSensitive = [], caseInsensitive = [],aItem, item;\r\n                    while (aItem = items.shift()) {\r\n                        var item = JSON.parse(aItem);\r\n                        if (!item.Lookup.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(JSON.stringify(item));\r\n                        else if (~item.Lookup.indexOf(this.query)) caseSensitive.push(JSON.stringify(item));\r\n                        else caseInsensitive.push(JSON.stringify(item));\r\n                    }\r\n\r\n                    return beginswith.concat(caseSensitive, caseInsensitive)\r\n\r\n                },\r\n                highlighter: function (obj) {\r\n                    var item = JSON.parse(obj);\r\n                    var query = this.query.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n                    var out;\r\n\r\n                    if (attrs[\"restrict\"] == \"Predicate\") {\r\n                        out = new utils.Predicate(item.Lookup).ToString().replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\r\n                            return '<strong>' + match + '</strong>'\r\n                        });\r\n\r\n                    }\r\n                    else {\r\n                      \r\n                        out = item.Lookup.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\r\n                            return '<strong>' + match + '</strong>'\r\n                        }) + \" <div style='float:right;margin-left:8px;color:#ccc'>\" + item.Type + \"</div>\";\r\n                       \r\n                    }\r\n\r\n                    return out;\r\n                },\r\n                updater: function (obj) {\r\n\r\n                    itemSelected = true;\r\n\r\n                    var item = JSON.parse(obj);\r\n\r\n                    $scope.$apply(function () {\r\n\r\n                        if (attrs[\"choice\"]) {\r\n                            $scope.choice = item;\r\n                            //if (attrs[\"clearonselect\"]) {\r\n                            //    $scope.choice = undefined;\r\n                            //    $scope.text = \"\";\r\n                            //}\r\n                        }\r\n\r\n                        if (attrs[\"onselected\"]) {\r\n                            $scope.onselected({ item: item });\r\n                        }\r\n\r\n                    });\r\n\r\n\r\n                    if (!attrs[\"clearonselect\"]) {\r\n   \r\n                        return item.Lookup;\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            var itemSelected = false;\r\n\r\n\r\n            $input.on('keydown', function (e) {\r\n                itemSelected = false;\r\n                if (e.keyCode == 13) {//enter\r\n\r\n                    setTimeout(function () {\r\n\r\n                        $scope.$apply(function () {\r\n                            if (!itemSelected) {\r\n                                $scope.text = $input.val();\r\n                                $input.val('');\r\n                            }\r\n                        });\r\n\r\n\r\n                    }, 100);\r\n\r\n                \r\n\r\n                }\r\n\r\n            });\r\n\r\n            function getSource() {\r\n\r\n                if (attrs[\"restrict\"] == \"Type\") {\r\n                    //convert types object to array\r\n                    var source = [];\r\n                    for (var key in utils.types) {\r\n                        source.push(JSON.stringify(utils.types[key]));\r\n                    }\r\n                    return source;\r\n                }\r\n                else if (attrs[\"restrict\"] == \"Predicate\") {\r\n                    //convert predicates object to array\r\n                    var source = [];\r\n                    for (var key in utils.predicates) {\r\n                        source.push(JSON.stringify(utils.predicates[key]));\r\n                    }\r\n\r\n                    return source;\r\n                  \r\n                }\r\n                else return nodeSource;\r\n\r\n            }\r\n\r\n            //Globals & users or one or the other depending on value of restrict\r\n            var nodeSource = function (query, process) {\r\n\r\n             \r\n\r\n                if ($scope.restrict && $.isArray($scope.restrict) && $scope.restrict.lenth > 0) {\r\n\r\n                    if ($scope.restrict[0].Lookup) {\r\n                        return $scope.restrict.map(function (d) { return JSON.stringify(d); });\r\n                    }\r\n                    else {\r\n                        return $scope.restrict.map(function (d) { return JSON.stringify({ Lookup: d }); });\r\n                    }\r\n                }\r\n                else {\r\n                    neo.matchNodes(query, attrs[\"restrict\"]).then(function (nodes) {\r\n\r\n                        process(nodes.map(function (d) {\r\n                            return JSON.stringify(d);\r\n                        }));\r\n\r\n                    });\r\n\r\n               \r\n                }\r\n\r\n\r\n            }\r\n\r\n            $scope.$watch('restrict', function () {\r\n                $input.data('typeahead').source = getSource();\r\n            }, true);\r\n\r\n\r\n\r\n        }\r\n    };\r\n}]);\r\n","angular.module('neograph.common.typeaheadSimple',[])\r\n.directive('typeaheadSimple', [function () {\r\n    return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n            ngModel: '=?',   //the choice should be an object for 2 way binding with Lookup property\r\n            source: '='\r\n        },\r\n        template: '<input type=\"text\" />',\r\n        link: function ($scope, element, attrs) {\r\n\r\n            var placeholderDefault = \"\";\r\n\r\n            var $input = $(element);//.find('input');\r\n            $input.attr(\"placeholder\", attrs[\"placeholder\"] || placeholderDefault);\r\n\r\n\r\n            $input.typeahead({\r\n                source: $scope.source,\r\n                updater: function (item) {\r\n\r\n\r\n                    $scope.$apply(function () {\r\n\r\n\r\n                        $scope.ngModel = item;\r\n\r\n\r\n                    });\r\n\r\n\r\n\r\n                    return item;\r\n\r\n\r\n                }\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    };\r\n}]);\r\n","angular.module('neograph.controller.mob',['neograph.neo','neograph.utils','neograph.session'])\r\n.controller(\"MobController\", ['$scope', '$window', '$document', 'neo', 'utils', 'session', '$routeParams','$location',\r\n function ($scope, $window, $document, neo, utils, session, routeParams,$location) {\r\n        \r\n        \r\n        $scope.window = {\r\n            tabsWidth: 0,\r\n            topBarHeight: 150\r\n        }\r\n        \r\n        $scope.selection = {\r\n            selectedNode: null,\r\n            selectedEdge: null,\r\n            hoverNode: null\r\n        }\r\n        \r\n        $scope.tabs = [];\r\n        \r\n        $scope.selectTab = function (tab) {\r\n            $scope.selectedTab = tab;\r\n            utils.selectedTab = tab;\r\n        }\r\n        \r\n        if (routeParams.label) {\r\n            \r\n            //load full node including labels and relationships\r\n            neo.getNodeByLabel(routeParams.label, true)\r\n            .then(function (node) {\r\n                $scope.selection.selectedNode = node;\r\n                $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                setTab();\r\n            });\r\n\r\n        }\r\n        \r\n        if (routeParams.pictureid) {\r\n            \r\n           // utils.selectedTab = \"Images\";\r\n            \r\n            //load full node including labels and relationships\r\n            neo.getNode(routeParams.pictureid, true)\r\n            .then(function (node) {\r\n                $scope.selection.selectedNode = node;\r\n                $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                setTab();\r\n            });\r\n\r\n\r\n        }\r\n        \r\n        \r\n        $scope.$watch('nodeLookup', function (n) {\r\n            \r\n            if (n && n.id) {\r\n\r\n                $location.path('/label/'+n.Label)\r\n                \r\n                ////load full node including labels and relationships\r\n                //neo.getNode(n.id, true)\r\n                //.then(function (node) {\r\n                //    $scope.selection.selectedNode = node;\r\n                //    $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                //    setTab();\r\n                //});\r\n            }\r\n        });\r\n        \r\n        \r\n        \r\n        var setTab = function () {\r\n\r\n            if ($scope.tabs.indexOf(utils.selectedTab) > -1) {\r\n                $scope.selectTab(utils.selectedTab);\r\n            }\r\n            else {\r\n                $scope.selectTab($scope.tabs[0]);\r\n            }\r\n\r\n\r\n        }\r\n        \r\n        \r\n        $scope.tabSettings = utils.tabSettings;\r\n        \r\n        $scope.$watch('tabs', function (tabs) {\r\n            $(tabs).each(function (i, tab) {\r\n                \r\n                if (utils.tabSettings[tab] === undefined) {\r\n                    utils.tabSettings[tab] = {\r\n                        'editable': false\r\n                    }\r\n                }\r\n            })\r\n        });\r\n        \r\n        \r\n        \r\n        $scope.toggleEditSelectedTab = function () {\r\n            \r\n            utils.tabSettings[$scope.selectedTab].editable = !$scope.tabSettings[$scope.selectedTab].editable;\r\n        }\r\n        \r\n        //update tabs & properties if labels change\r\n        var settingPropsAndTabs = false;\r\n        \r\n        //how can i stop this firing for newly loaded nodes ?\r\n        $scope.$watchCollection('selection.selectedNode.labels', function (labels) {\r\n            \r\n            if (labels && labels.length && !settingPropsAndTabs) {\r\n                \r\n                settingPropsAndTabs = true;\r\n\r\n                neo.getProps(labels).then(function (out) {\r\n\r\n                    $scope.selection.selectedNode = $.extend(null, out.properties, $scope.selection.selectedNode);\r\n                    $scope.selection.selectedNode.temp.tabs = out.tabs;\r\n                    $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                    if (session.user.favourites[$scope.selection.selectedNode.id]) {\r\n                        $scope.tabs.push(\"Favourite\");\r\n                    }\r\n                    settingPropsAndTabs = false;\r\n\r\n                })\r\n\r\n\r\n            }\r\n\r\n        });\r\n        \r\n        \r\n        $scope.newNode = function () {\r\n            \r\n            var newNode = {\r\n                id: -1,\r\n                labels: [],\r\n                Type: \"\",\r\n                temp: {\r\n                    tabs: [\"Properties\"]\r\n                }\r\n            }\r\n            \r\n            if ($scope.nodeLookupText && (!$scope.selection.selectedNode || $scope.nodeLookupText != $scope.selection.selectedNode.Lookup)) {\r\n                newNode.Lookup = $scope.nodeLookupText;\r\n            }\r\n            \r\n            $scope.selection.selectedNode = newNode;\r\n            $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n            \r\n            $scope.selectedTab = 'Properties';\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }]);\r\n\r\n\r\n\r\n","angular.module('neograph.controller.mob',['neograph.neo','neograph.utils','neograph.session'])\r\n.controller(\"UtilsController\", ['$scope', '$window', 'Neo', 'GraphPresets', 'Metadata', function ($scope, $window, neo, presets, metadata) {\r\n\r\n\r\n    var getPersonData = function (node, callback) {\r\n\r\n\r\n\r\n\r\n        metadata.getFreebasePersonData(node.FreebaseID, function (data) {\r\n\r\n            //    console.dir(data);\r\n\r\n            $.extend(node, data);\r\n\r\n            if (node.FB_date_of_birth && !node.YearFrom) {\r\n\r\n                node.YearFrom = parseInt(node.FB_date_of_birth.split('-')[0]);\r\n            }\r\n            if (node.FB_date_of_death && !node.YearTo) {\r\n\r\n                node.YearTo = parseInt(node.FB_date_of_death.split('-')[0]);\r\n            }\r\n\r\n            callback(node);\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    var getBlurb = function (node, callback) {\r\n\r\n\r\n        metadata.getFreebaseText(node, function (blurb) {\r\n  \r\n            $scope.$apply(function () {\r\n                $.extend(node, blurb);\r\n            });\r\n\r\n            callback(node);\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    var getData = function (node, blurbOnly) {\r\n\r\n        getBlurb(node, function (updated) {\r\n\r\n\r\n            if ($.inArray(\"Person\", updated.labels) > -1 && !blurbOnly) {\r\n\r\n                getPersonData(updated, function (updatedPerson) {\r\n\r\n                    console.log(updatedPerson);\r\n                    neo.saveProps(updatedPerson)\r\n                     .then(function (nid) {\r\n                         console.log(nid + \" saved\");\r\n                     });\r\n                });\r\n            }\r\n            else {\r\n\r\n                console.log(updated);\r\n\r\n                neo.saveProps(updated)\r\n                 .then(function (nid) {\r\n\r\n                     console.log(nid + \" saved\");\r\n\r\n                 });\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n\r\n    $scope.fixNames = function () {\r\n\r\n\r\n\r\n\r\n        neo.getNodeList(\" match (n:Person) where n.Name =~ '(?i).*,.*'\")\r\n            .then(function (nodes) {\r\n                console.log(nodes);\r\n                angular.forEach(nodes, function (node) {\r\n\r\n                    var names = node.Name.split(\",\");\r\n\r\n                    if (names.length == 2) {\r\n\r\n\r\n\r\n                        var newName = names[1].trim() + \" \" + names[0].trim();\r\n                        console.log(\"old name: \" + node.Name + \", new name: \" + newName);\r\n                        node.Name = newName;\r\n\r\n                        neo.saveProps(node)\r\n                              .then(function (nid) {\r\n\r\n                                  console.log(nid + \" saved\");\r\n\r\n                              });\r\n                    }\r\n                    else {\r\n                        console.log(\"ODD NAME: \" + node.Name);\r\n                    }\r\n\r\n                });\r\n\r\n            });\r\n\r\n    }\r\n\r\n    $scope.importQuery = \"match(n:Period) \"\r\n\r\n    $scope.reselect = function (node, mid,name) {\r\n\r\n        node.FreebaseID = mid;\r\n        node.FB_name = name;\r\n        getData(node);\r\n\r\n\r\n    }\r\n\r\n    $scope.clear = function (node) {\r\n\r\n        node.FreebaseID = null;\r\n        node.FB_name = null;\r\n        node[\"FB_blurb\"]=null; \r\n        node[\"FB_blurb_full\"]=null;\r\n\r\n        neo.saveProps(node)\r\n                   .then(function (nid) {\r\n                       console.log(nid + \" saved\");\r\n                   });\r\n\r\n\r\n\r\n    }\r\n\r\n    //TODO: REMOVE ALL FB ASSOCIATIONS FOR THE FOLLOWING QUERY\r\n    //match(n:Global)  where n.Status is null\r\n    //THEY ARE UNSAFE\r\n    //DICTIONARY WOULD BE A BETTER SOURCE FOR THOSE\r\n\r\n    $scope.importFreebaseData = function () {\r\n\r\n\r\n        console.log('importing...');\r\n        // -persons - quotes, dates, nationality, fbid\r\n        neo.getNodeList($scope.importQuery)\r\n            .then(function (nodes) {\r\n                $scope.nodes = nodes;\r\n\r\n                console.log(nodes);\r\n\r\n                angular.forEach(nodes, function (node) {\r\n\r\n                    //if (node.FreebaseID) {\r\n                    //    console.log('already have freebase id for ' + node.Name + ':' + node.FreebaseID)\r\n                    //    getData(node);\r\n                    //}\r\n                    //else {\r\n                    metadata.getFreebaseId(node, function (result) {\r\n                        $scope.$apply(function () {\r\n\r\n                            node.disambiguation = result.response;\r\n\r\n                            var nochange = false;\r\n\r\n                            if (node.FreebaseID) {\r\n                                console.log('already have freebase id for ' + node.Name + ':' + node.FreebaseID)\r\n                            }\r\n                            else if (result.mid && !node.FreebaseID) {\r\n                                nochange = result.mid == node.FreebaseID;\r\n                                node.FreebaseID = result.mid;\r\n                                console.log('got freebase id:' + result.mid + ' for ' + node.Name)\r\n\r\n                            }\r\n                            else {\r\n                                console.log('couldnt get freebase id for ' + node.Name);\r\n                                console.dir(result.response);\r\n\r\n                            }\r\n\r\n                            if (node.FreebaseID) { //&& !nochange\r\n                                //set freebasename\r\n                                angular.forEach(node.disambiguation, function (n) {\r\n                                    if (n.mid === node.FreebaseID) {\r\n                                        node.FB_name = n.name;\r\n                                    }\r\n                                });\r\n                                getData(node,true);//true = blurb only\r\n                            }\r\n\r\n\r\n                        })\r\n\r\n\r\n\r\n                    });\r\n\r\n                    //  }\r\n\r\n\r\n                })\r\n\r\n\r\n\r\n            })\r\n\r\n\r\n        //\r\n        //neo.getNodeList(\"match(n:Global)\", 10);\r\n\r\n    }\r\n\r\n    $scope.quotesToNodes = function () {\r\n\r\n        neo.getNodeList(\"match (n) where n.FB_quotations is not null\")\r\n           .then(function (nodes) {\r\n               angular.forEach(nodes, function (node) {\r\n                   //   console.log(node);\r\n                   angular.forEach(node.FB_quotations, function (quote) {\r\n                       //console.log(quote);\r\n                       var qnode = { id: 0, properties: { Type: 'Quotation', Text: quote, Creator: node.Lookup }, labels: [node.Lookup] };\r\n\r\n                       neo.saveNode(qnode).then(function (n) {\r\n\r\n                           console.log(n);\r\n\r\n                           var edge = { startNode: n.id, endNode: node.id, type: 'BY' }\r\n                           neo.saveEdge(edge, n, node).then(function (e) {\r\n                               console.log(e);\r\n                           });\r\n\r\n                       });\r\n\r\n                   });\r\n\r\n               });\r\n\r\n           });\r\n\r\n\r\n    }\r\n\r\n\r\n}]);\r\n\r\n\r\n\r\n","angular.module('neograph.edge',['neograph.neo', 'neograph.utils','ui.router'])\r\n    .config(function($stateProvider){\r\n         $stateProvider.state('neograph.admin.edge',{\r\n            url:'edge/:edge',\r\n            views:{\r\n                      'edge@':{\r\n                        controller:'controller.edge',\r\n                        templateUrl:'app/edge/edge.html'\r\n                    }\r\n                    ,\r\n                      'edgeHeader@':{\r\n                        controller:'controller.edgeHeader',\r\n                        templateUrl:'app/edge/edgeHeader.html'\r\n                    }\r\n            }\r\n            \r\n        });\r\n    })\r\n    .controller('controller.edgeHeader',function($scope,$stateParams){\r\n        \r\n           if ($stateParams.edge){\r\n                $scope.edge=JSON.parse($stateParams.edge);\r\n    \r\n           }\r\n           \r\n    })\r\n    .controller('controller.edge', function (neo, utils,$stateParams,$scope) {\r\n   \r\n            \r\n           if ($stateParams.edge){\r\n                $scope.edge=JSON.parse($stateParams.edge);\r\n                $scope.predicateType = utils.predicates[$scope.edge.type];\r\n           }\r\n\r\n           $scope.$watch(\"predicateType\", function (predicateType) {\r\n               if (predicateType) {\r\n                   $scope.edge.type = predicateType.Lookup;\r\n               }\r\n           });\r\n\r\n           $scope.deleteEdge = function (e) {\r\n\r\n               neo.deleteEdge(e,\r\n                           $scope.activeView.data.nodes[e.startNode],\r\n                           $scope.activeView.data.nodes[e.endNode])\r\n                   .then(function () {\r\n\r\n\r\n                       //let view handle its own data ?\r\n                       delete $scope.activeView.data.edges[e.id];\r\n                       if ($scope.selection.selectedEdge && $scope.selection.selectedEdge.id === e.id) {\r\n                           $scope.selection.selectedEdge = null;\r\n                       }\r\n\r\n                       $scope.publish(\"deleted\", { selection: { edges: [e] } });\r\n\r\n                   });\r\n\r\n           }\r\n\r\n           $scope.saveEdge = function (e) {\r\n\r\n               neo.saveEdge(e)\r\n               .then(\r\n                   function (g) {\r\n\r\n                       $scope.publish(\"dataUpdate\", g)\r\n\r\n                       //update cache\r\n                       for (key in g.nodes) {\r\n                           $scope.activeView.data.nodes[key] = g.nodes[key];\r\n                       }\r\n\r\n                       for (key in g.edges) {\r\n                           $scope.activeView.data.edges[key] = g.edges[key];\r\n\r\n                           if ($scope.selection.selectedEdge && (key === $scope.selection.selectedEdge.id || !$scope.selection.selectedEdge.id)) {\r\n                               $scope.selection.selectedEdge = g.edges[key];\r\n                           }\r\n\r\n                       }\r\n                   });\r\n           }\r\n\r\n});\r\n    \r\n","angular.module('neograph.interaction.draggable',[])\r\n    .directive('draggable', function () {\r\n    return {\r\n\r\n        link: function ($scope, element, attrs) {\r\n          \r\n            var initLeft = $(element).position().left;\r\n\r\n            $(element).draggable({ \r\n                axis: \"x\" ,  \r\n                drag: function() {\r\n                \r\n                    var change = initLeft - $(element).position().left;\r\n                  \r\n                    $scope.$apply(function () {\r\n                        $scope.window.tabsWidth = $scope.window.tabsWidth + change;\r\n                    });\r\n                   \r\n\r\n                    initLeft = $(element).position().left;\r\n\r\n                    }\r\n            });\r\n        }\r\n    };\r\n});\r\n","angular.module('neograph.interaction',[\r\n    'neograph.interaction.draggable',\r\n    'neograph.interaction.resizable',\r\n    'neograph.interaction.selectable'\r\n])","angular.module('neograph.interaction.resizable',[])\r\n.directive('resizable', function ($window) {\r\n    return {\r\n        scope: {\r\n            window: '='\r\n        },\r\n        controller: function ($scope, $element) {\r\n\r\n            var w = angular.element($window);\r\n            var getWindowDimensions = function () {\r\n                var width = w.width();\r\n                var height = w.height();\r\n                return {\r\n                    'height': height,\r\n                    'width': width,\r\n                    'tabsWidth': $scope.window.tabsWidth,\r\n                    'tabsWidthInner': $scope.window.tabsWidth-10,\r\n                    'graphWidth': width - $scope.window.tabsWidth,\r\n                    'graphHeight': height - $scope.window.topBarHeight,\r\n                    'topBarHeight': $scope.window.topBarHeight,\r\n                    'tabsHeight': height - $scope.window.topBarHeight\r\n                };\r\n            };\r\n\r\n            $scope.window = getWindowDimensions();\r\n\r\n            $scope.$watch(getWindowDimensions, function (newValue, oldValue) {\r\n\r\n                $scope.window = newValue;\r\n\r\n            }, true);\r\n\r\n            w.bind('resize', function () {\r\n                $scope.$apply();\r\n            });\r\n   \r\n            //w.bind(\"debouncedresize\", function (event) {\r\n            //    $scope.$apply();\r\n\r\n            //});\r\n\r\n        }\r\n    }\r\n});\r\n\r\n","angular.module('neograph.interaction.selectable',[])\r\n.directive('selectable', function () {\r\n    return {\r\n        scope: {\r\n            selected: '='\r\n\r\n        },\r\n        link: function ($scope, element, attrs) {\r\n\r\n            $scope.$watch($(element).find(\"li.ui-selected\").length, function (i) {\r\n\r\n\r\n\r\n\r\n\r\n\r\n                $(element).selectable({\r\n                    filter: \"li\",\r\n                    stop: function (event, ui) {\r\n\r\n\r\n                        var selected = [];\r\n\r\n\r\n                        $(element).find(\"li.ui-selected\").each(function (i, e) {\r\n                            selected.push(parseInt($(e).attr(\"nodeindex\")));\r\n                        });\r\n\r\n                        $scope.$apply(function () {\r\n\r\n                            $scope.selected = selected;\r\n\r\n                        });\r\n\r\n                    }\r\n                    ,\r\n                    cancel: '.badge, .label'\r\n\r\n\r\n\r\n                });\r\n\r\n\r\n            });\r\n\r\n\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n","angular.module('neograph.graph',['neograph.utils','ui.router'])\r\n    .directive('graph', ['utils','$state', function (utils,$state) {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/graph/graph.html',\r\n        scope: {\r\n            data: '=',\r\n            active: '=',\r\n            network: '='\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n            \r\n            var graphWidth= 1300;\r\n            var graphHeight=1300;\r\n            var topBarHeight=150;\r\n\r\n\r\n            var options = utils.graphOptions;\r\n            options.onConnect= function (data, callback) {\r\n\r\n                var newEdge = {\r\n                    start: $scope.data.nodes[data.from],\r\n                    type: utils.defaultEdgeType($scope.data.nodes[data.from].Type, $scope.data.nodes[data.to].Type),\r\n                    end: $scope.data.nodes[data.to],\r\n                    properties: { Weight: 3 }\r\n                }\r\n                $scope.publish(\"newEdge\", newEdge);\r\n            }\r\n\r\n            $scope.data = {\r\n                nodes: {},\r\n                edges:{}\r\n            }\r\n\r\n            var graph = {\r\n                nodes: new vis.DataSet(),\r\n                edges: new vis.DataSet()\r\n            };\r\n\r\n            var network = new vis.Network($element.find('.graphContainer')[0], graph, options);\r\n\r\n\r\n\r\n            //network.on('startStabilization', function () {//should be network.on('NewData')\r\n            //    $window.setTimeout( function () {  network.zoomExtent();},2000);\r\n\r\n            //});\r\n\r\n\r\n            //set size to window size\r\n            $scope.$watch('window', function (w) {\r\n                network.setSize(graphWidth + \"px\", graphHeight + \"px\");\r\n            });\r\n\r\n            //fit to screen on resize\r\n            network.on('resize', function (params) {\r\n                if (getSelectedNodeId()) {\r\n                    network.focusOnNode(getSelectedNodeId(), { scale: 1, animation: { duration: 1000, easingFunction: 'easeOutCubic' } });\r\n                }\r\n                else {\r\n                    network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n                }\r\n            });\r\n\r\n            graph.nodes.on('*', function (event, properties, senderId) {\r\n                //  console.log('event:', event, 'properties:', properties, 'senderId:', senderId);\r\n                if (graph.nodes.length) {\r\n                    $(\".network-manipulationUI.connect\").css(\"display\", \"inline-block\");\r\n                }\r\n                else {\r\n                    $(\".network-manipulationUI.connect\").hide();\r\n                }\r\n\r\n            });\r\n\r\n            var suppressSelected = false;\r\n\r\n            $scope.subscribe(\"selected\", function (params) {\r\n\r\n                if (params.sender != \"Graph\" &&\r\n                        $scope.active &&\r\n                        params.selection.nodes &&\r\n                        params.selection.nodes.length &&\r\n                        params.selection.nodes[0] != getSelectedNodeId() &&\r\n                        graph.nodes.get(params.selection.nodes[0])\r\n                        ) {\r\n                    suppressSelected = true;\r\n\r\n                    var nodeids = params.selection.nodes.map(function (n) { return n.id });\r\n                    network.selectNodes(nodeids);\r\n                    suppressSelected = false;\r\n                }\r\n\r\n\r\n            });\r\n\r\n            // add event listeners\r\n            network.on('select', function (params) {\r\n                if (!suppressSelected) {\r\n                    \r\n                    \r\n                    if (params.nodes.length===1){\r\n                          $state.go('admin.main.node.view',{node:$scope.data.nodes[params.nodes[0]].Label});\r\n                    }\r\n                    else if (params.edges.length===1){\r\n                        \r\n                        var id=params.edges[0];\r\n                        var startNode=$scope.data.nodes[$scope.data.edges[id].startNode];\r\n                        var endNode =$scope.data.nodes[$scope.data.edges[id].endNode];\r\n                        var edge ={\r\n                            id: id,\r\n                            start: {Lookup:startNode.Lookup},\r\n                            end:  {Lookup:endNode.Lookup},\r\n                            type: $scope.data.edges[id].type,\r\n                            properties: $scope.data.edges[id].properties\r\n                        }\r\n                        \r\n                        $state.go('admin.main.edge.view',{edge:JSON.stringify(edge)});\r\n                    }\r\n                    \r\n\r\n/*\r\n                    var nodes = [];\r\n                    var edges = [];\r\n\r\n                    angular.forEach(params.nodes, function (id) {\r\n                        nodes.push($scope.data.nodes[id]);\r\n                    });\r\n\r\n\r\n                    angular.forEach(params.edges, function (id) {\r\n\r\n                        edges.push({\r\n                            id: id,\r\n                            start: $scope.data.nodes[$scope.data.edges[id].startNode],\r\n                            end: $scope.data.nodes[$scope.data.edges[id].endNode],\r\n                            type: $scope.data.edges[id].type,\r\n                            properties: $scope.data.edges[id].properties\r\n                        });\r\n\r\n                    });\r\n                    \r\n                    */\r\n\r\n/*\r\n                    var params = { sender: \"Graph\", selection: { nodes: nodes, edges: edges } };\r\n\r\n                    console.log(params);\r\n                    $scope.$apply(function () {\r\n                        $scope.publish(\"selected\", params);\r\n                    })\r\n                    */\r\n                    \r\n                  \r\n                }\r\n            });\r\n\r\n            $scope.subscribe(\"deleted\", function (params) {\r\n                console.log(params);\r\n                if (params.selection.nodes && params.selection.nodes.length) {\r\n                    var nodeids = params.selection.nodes.map(function (n) { return n.id });\r\n                    graph.nodes.remove(nodeids);\r\n                }\r\n                if (params.selection.edges && params.selection.edges.length) {\r\n                    var edgeids = params.selection.edges.map(function (n) { return n.id });\r\n                    graph.edges.remove(edgeids);\r\n                }\r\n            });\r\n\r\n            $scope.subscribe(\"focus\", function (nodeid) {\r\n\r\n                network.focusOnNode(nodeid, { scale: 1, animation: { duration: 1000, easingFunction: 'easeOutCubic' } });\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n            var getSelectedNodeId = function () {\r\n\r\n                var selectedNodes = network.getSelectedNodes();\r\n                if (selectedNodes.length == 1) {\r\n                    return selectedNodes[0];\r\n                }\r\n                else return undefined;\r\n\r\n            }\r\n\r\n            $(\".network-manipulationUI.connect\").hide();\r\n\r\n            //capture hover node\r\n            $scope.hoverNode = undefined;\r\n            $('.graphContainer').on('mousemove',\r\n                function (event) {\r\n                    var n = network._getNodeAt({ x: event.pageX, y: event.pageY - topBarHeight - 55 });\r\n                    $scope.$apply(function () {\r\n                        if (n) {\r\n                            var dataNode = $scope.data.nodes[n.id];\r\n                            $scope.hoverNode = dataNode;\r\n                            $scope.publish(\"hover\", dataNode);\r\n                        }\r\n                        else {\r\n                            $scope.publish(\"hover\", undefined);\r\n                            $scope.hoverNode = undefined;\r\n\r\n                        }\r\n                    });\r\n                });\r\n\r\n\r\n            //freeze simulation if not active\r\n            $scope.$watch('active',\r\n                function (active) {\r\n                    if (active != undefined) {\r\n                        network.freezeSimulation(!active);\r\n                    }\r\n                });\r\n\r\n          \r\n\r\n\r\n         \r\n\r\n           $scope.$watch('data', function () {\r\n                console.log('new change')\r\n                if ($scope.active) {\r\n                    console.log('drawing new graph');\r\n                    graph.nodes.clear();\r\n                    graph.edges.clear();\r\n                    var gArr = utils.toGraphData($scope.data);\r\n                    graph.nodes.add(gArr.nodes);\r\n                    graph.edges.add(gArr.edges);\r\n                }\r\n            })\r\n\r\n            //updates existing data (not replace)\r\n            $scope.subscribe(\"dataUpdate\", function (g) {\r\n                console.log('graph: dataUpdate');\r\n                if ($scope.active && $scope.data) {\r\n                    console.log('updating graph');\r\n                    $.extend($scope.data.edges, g.edges);\r\n                    $.extend($scope.data.nodes, g.nodes);\r\n                    var gArr = utils.toGraphData(g);\r\n                    graph.edges.update(gArr.edges);\r\n                    graph.nodes.update(gArr.nodes);\r\n                }\r\n\r\n            });\r\n\r\n       \r\n\r\n        }\r\n\r\n    }\r\n}])","angular.module('neograph.layout',[])\r\n.directive('tabs', function () {\r\n    return {\r\n        restrict: 'E',\r\n        transclude: true,\r\n        scope: {\r\n            tabs:'=',//required to remove panes no longer available\r\n            selected: '=?'\r\n        },\r\n        controller: function ($scope) {\r\n            var panes = $scope.panes = [];\r\n            var self = this;\r\n\r\n            $scope.select = function (pane) {\r\n                angular.forEach(panes, function (pane) {\r\n                    pane.selected = false;\r\n                });\r\n                pane.selected = true;\r\n                $scope.selected = pane.key;\r\n            };\r\n\r\n            this.add = function (pane) {\r\n                if (panes.length === 0) {\r\n                    $scope.select(pane);\r\n                }\r\n                panes.push(pane);\r\n            };\r\n\r\n            this.remove = function (pane) {\r\n                //console.log('remove')\r\n                //console.log(pane);\r\n                angular.forEach(panes, function (p, i) {\r\n                    if (pane.key == p.key) {\r\n                        panes.splice(i, 1);\r\n                        if (pane.selected) {\r\n                            pane.selected = false;\r\n                            $scope.select($scope.panes[0]);\r\n                        }\r\n\r\n\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n            $scope.$watch('selected', function (key) {//the title of the selected pane\r\n               \r\n                if (key) {\r\n                    angular.forEach(panes, function (pane) {\r\n                       \r\n                        pane.selected = pane.key === key;\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n\r\n            //remove tabs not in list (child pane only adds them)\r\n            $scope.$watch('tabs', function (tabs) {//the title of the selected pane\r\n\r\n                if (tabs) {\r\n                    angular.forEach(panes, function (pane) {\r\n\r\n                        if (tabs.indexOf(pane.key) === -1) {\r\n\r\n                            self.remove(pane);\r\n                        }\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n\r\n        },\r\n        templateUrl: 'app/layout/tabs.html'\r\n    };\r\n})\r\n.directive('tabPane', function () {\r\n    return {\r\n        require: '^tabs',\r\n        restrict: 'E',\r\n        transclude: true,\r\n        scope: {\r\n            key:'@',\r\n            title: '=',\r\n            visible: '=',\r\n            active: '=?',\r\n            window:'='\r\n        },\r\n        link: function ($scope, element, attrs, tabsCtrl) {\r\n\r\n\r\n               tabsCtrl.add($scope);\r\n\r\n\r\n            //$scope.$watch('visible', function (visible) {\r\n\r\n            //    if (visible) {\r\n            //        tabsCtrl.addPane($scope);\r\n            //    }\r\n            //    else {\r\n            //        tabsCtrl.removePane($scope);\r\n\r\n            //    }\r\n\r\n            //});\r\n\r\n         \r\n            $scope.$watch('active', function (active) {//the title of the selected pane\r\n\r\n                $scope.selected = active;\r\n             \r\n            });\r\n\r\n\r\n        },\r\n        templateUrl: 'app/layout/tabPane.html'\r\n    };\r\n})\r\n.directive('noBubble', function () {\r\n    return {\r\n\r\n        link: function ($scope, element, attrs, tabsCtrl) {\r\n\r\n\r\n            \r\n            $(element).on('keydown', function (event) {\r\n  \r\n                event.stopPropagation()\r\n            });\r\n\r\n        },\r\n        templateUrl: 'app/layout/tabPane.html'\r\n    };\r\n\r\n\r\n});","angular.module('neograph.cache',['neograph.neo'])\r\n.factory('cache',function(neo,$q){\r\n    \r\n    var currentNode;\r\n    \r\n    return {\r\n        \r\n        getNode:function(label){\r\n            \r\n            if (currentNode && label===currentNode.Label){\r\n                return $q.when(currentNode);\r\n            }\r\n            else{\r\n                    //load full node including labels and relationships\r\n                return neo.getNodeByLabel(label, true)\r\n                    .then(function (node) {\r\n\r\n\r\n                        currentNode = node;\r\n                        return node;\r\n                        /*\r\n                        $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n\r\n                        if ($scope.activeView.data.nodes[node.id]) {\r\n                            $scope.publish(\"focus\", node.id)\r\n                        }\r\n                        else {\r\n                            if ($scope.addToGraphOnLookup) {\r\n                                $scope.addNodeToGraph(node);\r\n                            }\r\n\r\n                        }\r\n                        */\r\n                        \r\n                        \r\n                    });\r\n            }\r\n           \r\n        }\r\n\r\n    }\r\n    \r\n    \r\n})","angular.module('neograph.neo.client',['ngResource','neograph.settings'])\r\n.factory(\"neoClient\", ['$http', '$resource','settings', function ($http, $resource,settings) {\r\n    //return $resource('http://localhost:1337/node/match', {txt:'@txt',restrict:'@restrict'}, {\r\n    //    matchNodes: {\r\n    //        method: 'POST',\r\n    //        isArray:true\r\n    //    }\r\n    //});\r\n\r\n    //return $resource(null,null, {\r\n    //    matchNodes: {\r\n    //        url: 'http://localhost:1337/node/match',\r\n    // //       params: {txt:'',restrict:''},\r\n    //        method: 'POST',\r\n    //        isArray: true\r\n    //    }\r\n    //});\r\n\r\n    var root = settings.apiRoot;\r\n\r\n    return {\r\n\r\n        node:$resource(null,null, {\r\n            match: {\r\n                url: root+'/node/match',\r\n            \r\n                method: 'POST',\r\n                isArray: true\r\n            }\r\n            ,\r\n            get: {\r\n                url: root+'/node/:id',\r\n                method: 'GET',\r\n            }\r\n                   ,\r\n            getRelationships: {\r\n                url: root + '/node/relationships/:id',\r\n                method: 'GET',\r\n            }\r\n            ,\r\n            getWithRels: {\r\n                url: root + '/nodeWithRels/:id',\r\n                method: 'GET',\r\n            }\r\n            ,\r\n            getByLabel: {\r\n                url: root + '/nodeByLabel/:label',\r\n                method: 'GET',\r\n            }\r\n            ,\r\n            getWithRelsByLabel: {\r\n                url: root + '/nodeWithRelsByLabel/:label',\r\n                method: 'GET'\r\n            }\r\n            ,\r\n            getOne: {\r\n                url: root + '/node/single',\r\n                method: 'POST',\r\n            }\r\n            ,\r\n            getList: {\r\n                url: root + '/node/list',\r\n                method: 'POST',\r\n                isArray:true\r\n            }\r\n            ,\r\n            save: {\r\n                url: root + '/node/save',\r\n        \r\n                method: 'POST'\r\n            },\r\n            saveProps: {\r\n                url: root + '/node/saveProps',\r\n          \r\n                method: 'POST'\r\n            },\r\n            saveRels: {\r\n                url: root + '/node/saveRels',\r\n        \r\n                method: 'POST'\r\n            },\r\n            saveWikipagename: {\r\n                url: root + '/node/saveWikipagename',\r\n        \r\n                method:'POST'\r\n            }\r\n            ,\r\n            saveMultiple: {\r\n                url: root + '/node/saveMultiple',\r\n           \r\n                method: 'POST'\r\n            }\r\n            ,\r\n            del: {\r\n                url: root + '/node/delete',\r\n          \r\n                method: 'POST'\r\n            }\r\n            ,\r\n            destroy: {\r\n                url: root + '/node/destroy',\r\n          \r\n                method: 'POST'\r\n            },\r\n            restore: {\r\n                url: root + '/node/restore',\r\n\r\n                method: 'POST'\r\n            }\r\n            ,\r\n            getProps: {\r\n                url: root + '/node/getProps',\r\n\r\n                method: 'POST'\r\n\r\n            }\r\n               ,\r\n            getImages: {\r\n                url: root + '/node/getImages',\r\n                isArray:true,\r\n                method: 'POST'\r\n\r\n            }\r\n                \r\n\r\n\r\n        }),\r\n        edge: $resource(null, null, {\r\n            save: {\r\n                url: root + '/edge/save',\r\n                method: 'POST'\r\n            }\r\n            ,\r\n            del: {\r\n                url: root + '/edge/delete',\r\n                method: 'POST'\r\n\r\n            }\r\n            ,\r\n            getImageRelationships: {\r\n                url: root + '/edge/imagerelationships',\r\n                method: 'POST'\r\n            }\r\n        })\r\n        ,\r\n        user:$resource(null, null, {\r\n            saveFavourite: {\r\n                url: root + '/user/saveFavourite',\r\n        \r\n                method: 'POST'\r\n              \r\n            },\r\n            get: {\r\n                url: root + '/user/:user',\r\n                method: 'GET'\r\n            }\r\n        })\r\n        ,\r\n        graph: $resource(null, null, {\r\n            get: {\r\n                url: root + '/graph',\r\n     \r\n                method: 'POST'\r\n            }\r\n        })\r\n            ,\r\n        type: $resource(null, null, {\r\n            getAll: {\r\n                url: root + '/types',\r\n                method: 'GET'\r\n            }\r\n        })\r\n        ,\r\n       predicate: $resource(null, null, {\r\n            getAll: {\r\n                url: root + '/predicates',\r\n                method: 'GET'\r\n            }\r\n        })\r\n        ,\r\n        utils:$resource(null, null, {\r\n            getDistinctLabels: {\r\n                url: root + '/utils/distinctLabels',\r\n                isArray:true,\r\n                method: 'POST'\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n}])\r\n","angular.module(\"neograph.neo\",[\"neograph.utils\",\"neograph.neo.client\"])\r\n.factory(\"neo\", [\"neoClient\",  \"utils\",function (neoClient, utils) {\r\n\r\n\r\n    var that = {\r\n        setPropsAndTabsFromLabels: function (node) {\r\n            return neoClient.node.setPropsAndTabs({ node:node}).$promise.then(function (data) {\r\n\r\n                return data.toJSON();\r\n\r\n            });\r\n        }\r\n        ,\r\n        getGraph: function (q,returnArray) {\r\n\r\n            return neoClient.graph.get({ q: q, returnArray: returnArray }).$promise.then(function (data) {\r\n\r\n                var out = data.toJSON();\r\n                console.dir(out);\r\n                return out;\r\n\r\n            });\r\n        }\r\n       ,\r\n        //returns all relationships between supplied nodes, which can be vis.Dataset or graph data object\r\n        getAllRelationships: function (nodes) {\r\n            var nodeIds = \"\";\r\n\r\n            if (nodes.getIds) //if vis.DataSet\r\n            {\r\n                nodeIds = nodes.getIds({ returnType: 'Array' }).join(\",\");\r\n            }\r\n            else { //otherwise data object\r\n\r\n                for (var key in nodes) {\r\n                    if (nodeIds.length) {\r\n                        nodeIds += \",\";\r\n                    }\r\n                    nodeIds += key;\r\n                }\r\n            }\r\n\r\n            var q = \"MATCH a -[r]- b WHERE id(a) IN[\" + nodeIds + \"] and id(b) IN[\" + nodeIds + \"] and not (a-[:TYPE_OF]-b) return r\";\r\n\r\n            return that.getGraph(q);\r\n\r\n        }\r\n        ,\r\n        getNode: function (id, addrelprops) {\r\n\r\n                if (addrelprops) {\r\n                   \r\n                    return neoClient.node.getWithRels({ id: id }).$promise.then(function (node) {\r\n\r\n                      \r\n\r\n                        //instead i think i should call the service to get the reverse\r\n                            //or use cached predicates in utils\r\n                        for (var relPropKey in node.temp.relProps) {\r\n                            var relProp = node.temp.relProps[relPropKey];\r\n                            relProp.predicate = new utils.Predicate(relProp.predicate.Lookup, relProp.predicate.Direction);\r\n                        }\r\n                        return node.toJSON();\r\n                    });\r\n\r\n                }\r\n                else {\r\n\r\n                    return neoClient.node.get({ id: id }).$promise.then(function (node) {\r\n                        return node.toJSON();\r\n                    });\r\n                }\r\n\r\n        }\r\n             ,\r\n        getRelationships: function (id) {\r\n\r\n                return neoClient.node.getRelationships({ id: id }).$promise.then(function (data) {\r\n                    return data.toJSON();\r\n                });\r\n            \r\n\r\n        }\r\n            ,\r\n        getNodeByLabel: function (label, addrelprops) {\r\n\r\n            if (addrelprops) {\r\n\r\n                return neoClient.node.getWithRelsByLabel({ label: label }).$promise.then(function (node) {\r\n\r\n                 \r\n\r\n                    //instead i think i should call the service to get the reverse\r\n                    for (var relPropKey in node.temp.relProps) {\r\n                        var relProp = node.temp.relProps[relPropKey];\r\n                        relProp.predicate = new utils.Predicate(relProp.predicate.Lookup, relProp.predicate.Direction);\r\n                    }\r\n\r\n                    return node.toJSON();\r\n\r\n\r\n\r\n                });\r\n\r\n            }\r\n            else {\r\n\r\n                return neoClient.node.getByLabel({ label: label }).$promise.then(function (node) {\r\n                    return node.toJSON();\r\n                });\r\n            }\r\n\r\n\r\n        }\r\n           ,\r\n        getNodeList: function (q, limit) {//q = match (n) & where only (without return)\r\n\r\n            return neoClient.node.getList({ q: q, limit: limit }).$promise;//returns array\r\n        }\r\n          ,\r\n        saveWikipagename: function (n)//short version for freebase prop saving\r\n        {\r\n            return neoClient.node.saveWikipagename({ \r\n                id: n.id, \r\n                name: n.Wikipagename \r\n            }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n        }\r\n        ,\r\n        getImages:function(node){\r\n        \r\n            return neoClient.node.getImages({\r\n                id: node.id,\r\n                isPicture: node.temp.isPicture,\r\n                isGroup: node.temp.isGroup\r\n            }).$promise;//returns array\r\n        }\r\n        ,\r\n      \r\n        saveProps: function (n)//short version for freebase prop saving\r\n        {\r\n            return neoClient.node.saveProps({ node: n, user: user }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n        \r\n        }\r\n        ,\r\n        getProps: function (labels) {\r\n\r\n            return neoClient.node.getProps({ labels: labels }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n        }\r\n        ,\r\n        //TODO: \r\n        //for labels (types), type hierachy needs to be enforced - eg if Painter then add Person:Global,-----------------DONE\r\n        //if Painting the add Picture:Creation. These will need to be kept updated.\r\n        //when Lookup is updated, the corresponding label needs to be renamed MATCH (n:OLD_LABEL)  REMOVE n:OLD_LABEL SET n:NEW_LABEL--------------- DONE\r\n        //when updating Type, label needs to be updated, when creating----------------------DONE\r\n        //When we come to modifying labels on creations, their relationships will need to be kept updated\r\n        saveNode: function (n, user) {\r\n\r\n\r\n            if (n.temp.trimmed) {\r\n                throw (\"Node is trimmed - cannot save\");\r\n            }\r\n\r\n\r\n          \r\n            return neoClient.node.save({ node: n, user: user }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n\r\n\r\n        }\r\n        ,\r\n        saveRels: function (n) {\r\n          \r\n            return neoClient.node.saveRels({ node: n }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n        }\r\n        ,\r\n        saveMultiple: function (multiple) {\r\n\r\n        \r\n            return neoClient.node.saveMultiple({ multiple: multiple }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n\r\n        }\r\n           ,\r\n        //saves edge to neo (update/create)\r\n        //TODO: according to certain rules labels will need to be maintained when relationships are created. (update not required as we always delete and recreate when changing start/end nodes)\r\n        //tag a with label b where:\r\n        // a=person and b=provenance (eg painter from france)\r\n        // a=person and n=group, period (eg painter part of les fauves / roccocco)\r\n        // a=picture and b=non-person (eg picture by corot / of tree) - although typically this will be managed through labels directly (which will then in turn has to keep relationships up to date)\r\n        saveEdge: function (e) {//startNode and endNode provide the full node objects for the edge\r\n\r\n            return neoClient.edge.save({ edge: e }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n        }\r\n        ,\r\n        saveFavourite: function (node, user) {\r\n\r\n           \r\n            return neoClient.user.saveFavourite({ user: user, node: node }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n\r\n        }\r\n\r\n        ,\r\n        destroyNode: function (node) {//deletes node and relationships forever\r\n\r\n            return neoClient.node.destroy({ node: node }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n        }\r\n        ,\r\n        //TODO: return something\r\n        deleteNode: function (node) {\r\n\r\n            if (node && node.id) {\r\n                //only supports 1 node at the mo\r\n                return neoClient.node.delete({ node: node }).$promise.then(function (data) {\r\n                    return data.toJSON();\r\n                });\r\n            }\r\n            else { }//need to return a resolved promise\r\n        }\r\n        ,\r\n\r\n        restoreNode: function (node) {\r\n\r\n            if (node && node.id) {\r\n             \r\n                //only supports 1 node at the mo\r\n                return neoClient.node.restore({ node: node }).$promise.then(function (data) {\r\n                    return data.toJSON();\r\n                });\r\n\r\n\r\n            }\r\n            else { }//need to return a resolved promise\r\n\r\n\r\n        }\r\n        ,\r\n        deleteEdge: function (edge) {\r\n\r\n            if (edge && edge.id) {\r\n\r\n                return neoClient.edge.delete({ edge: edge }).$promise.then(function (data) {\r\n                    return data.toJSON();\r\n                });\r\n            \r\n\r\n            }\r\n\r\n        }\r\n        ,\r\n        getUser: function (userLookup) {\r\n          \r\n            return neoClient.user.get({ user: userLookup }).$promise.then(function (data) {\r\n        \r\n                return data.toJSON();\r\n            });\r\n\r\n        }\r\n        ,\r\n\r\n        getOne: function (q) {//q must be a match return a single entity n\r\n\r\n          \r\n\r\n            return neoClient.node.getOne({ q: q }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n        }\r\n        ,\r\n        matchNodes: function (txt, restrict) { //restrict = labels to restrict matches to\r\n\r\n\r\n            if (txt) {\r\n                return neoClient.node.match({ txt: txt, restrict: restrict }).$promise;//returns array\r\n            }\r\n            \r\n\r\n        }\r\n\r\n      \r\n     ,\r\n        getImageRelationships: function (edge) { //loks up id/label first then call get by label\r\n\r\n            return neoClient.edge.getImageRelationships({ edge: edge }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n        }\r\n        //,\r\n     \r\n        //getRelationships: function (node, callback) {\r\n\r\n        //    var q = \"match (n)-[r]-(m:Global) where ID(n)=\" + node.id + \" return r\";\r\n\r\n        //    return getGraph(q);\r\n        //}\r\n        ,\r\n        //Alternatively i could query the actual labels and merge them into a distinct array\r\n        getDistinctLabels: function (labels) {\r\n\r\n          \r\n            return neoClient.utils.getDistinctLabels({ labels: labels }).$promise;//returns array\r\n            \r\n\r\n\r\n        }\r\n        ,\r\n        getDistinctLabelsQuery: function (q) {\r\n\r\n            return neoClient.utils.getDistinctLabels({ q: q }).$promise;//returns array\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return that;\r\n\r\n}]);\r\n","angular.module('neograph.session',['neograph.neo'])\r\n    .factory('session', ['neo', '$q', function (neo, $q) {\r\n\r\n    var anonUser = {\r\n        Lookup: 'Anonymous',\r\n        roles: { \"Public\": {}}\r\n    }\r\n\r\n\r\n    var session = {\r\n\r\n        init: function () {\r\n\r\n            neo.getUser(\"Julian\").then(function (user) {\r\n\r\n                session.user = user;\r\n                session.signedIn = true;\r\n            });\r\n\r\n            return session;\r\n\r\n        }\r\n        ,\r\n        signingIn: false\r\n        ,\r\n        signedIn: false\r\n        ,\r\n        user: anonUser\r\n        ,\r\n        signIn: function (username, password) {\r\n\r\n            return neo.authenticate(username, password).then(function (user) {\r\n\r\n                session.user = user;\r\n\r\n\r\n                console.log(session.user)\r\n             //   session.apps = service.getApps(session.user.roles);\r\n\r\n\r\n                localStorage.username = session.user.username;\r\n\r\n\r\n                session.signedIn = true;\r\n\r\n                if (user.roles.PreReg) {\r\n                    $('body').addClass('prereg');\r\n                }\r\n                else {\r\n                    $('body').removeClass('prereg');\r\n                }\r\n\r\n\r\n\r\n            }, function (failMessage) {\r\n                console.log(failMessage);\r\n                return $q.reject(failMessage);\r\n            });\r\n\r\n        }\r\n        ,\r\n        signOut: function () {\r\n\r\n            session.user = anonUser;\r\n            localStorage.username = \"\";// = JSON.stringify(session.user);\r\n            session.signedIn = false;\r\n          //  session.apps = service.getApps(session.user.roles);\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    if (localStorage.username) {\r\n        session.user = neo.getUser(localStorage.username);\r\n    }\r\n\r\n    if (session.user.name != 'Anonymous') {\r\n        session.signedIn = true;\r\n    }\r\n\r\n //   session.apps = service.getApps(session.user.roles);\r\n\r\n    return session.init();\r\n\r\n\r\n}])","angular.module(\"neograph.utils\",[\"neograph.neo.client\",\"neograph.query.presets\"])\r\n    .factory(\"utils\", [\"neoClient\",\"queryPresets\", function (neoClient,presets) {\r\n\r\n\r\n    Array.prototype.diff = function (a) {\r\n        return this.filter(function (i) { return a.indexOf(i) < 0; });\r\n    };\r\n\r\n    Array.prototype.ids = function () {\r\n        return this.map(function (e) { return e.id });\r\n    }\r\n\r\n    Array.prototype.hasAny = function (a) {\r\n        return this.filter(function (i) { return a.indexOf(i) > -1; }).length > 0;\r\n    };\r\n\r\n    Array.prototype.unique = function () {\r\n        var a = [];\r\n        for (i = 0; i < this.length; i++) {\r\n            var current = this[i];\r\n            if (a.indexOf(current) < 0) a.push(current);\r\n        }\r\n        return a;\r\n    }\r\n\r\n    var Predicate = function (lookup, direction) {\r\n        this.Lookup = lookup;\r\n\r\n        this.IsDirectional = this.Lookup != \"ASSOCIATED_WITH\";\r\n\r\n        this.Direction = direction;\r\n\r\n        this.Type = 'Predicate';\r\n\r\n        this.Key = function () {\r\n\r\n            if (!this.IsDirectional || !this.Direction) {\r\n                return this.Lookup\r\n            }\r\n            else if (this.Direction == \"out\") {\r\n                return this.Lookup + \" ->\";\r\n            }\r\n            else {\r\n                return this.Lookup + \" <-\";\r\n            }\r\n        }\r\n\r\n        this.ToString = function () {\r\n\r\n            if (!this.IsDirectional || !this.Direction || this.Direction == \"out\") {\r\n                return this.Lookup.replace(/_/g, ' ').toLowerCase();\r\n            }\r\n            else {\r\n\r\n                if (this.Lookup == \"CREATED\")\r\n                    return \"created by\"\r\n                else if (this.Lookup == \"INFLUENCES\")\r\n                    return \"influenced by\"\r\n                else if (this.Lookup == \"INSPIRES\")\r\n                    return \"inspired by\"\r\n                else if (this.Lookup == \"ANTICIPATES\")\r\n                    return \"anticipated by\"\r\n                else if (this.Lookup == \"DEVELOPS\")\r\n                    return \"developed by\"\r\n                else if (this.Lookup == \"DEPICTS\")\r\n                    return \"depicted by\"\r\n                else if (this.Lookup == \"TYPE_OF\")\r\n                    return \"type(s)\"\r\n                else\r\n                    return \"(\" + this.Lookup.replace(/_/g, ' ').toLowerCase() + \")\";\r\n\r\n            }\r\n\r\n        }\r\n\r\n        this.Reverse = function () {\r\n\r\n            if (!this.IsDirectional) {\r\n                return;\r\n            }\r\n\r\n            if (this.Direction === \"in\") {\r\n                this.Direction = \"out\";\r\n            }\r\n            else {\r\n                this.Direction = \"in\";\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    var View = function (key, type) {\r\n\r\n\r\n\r\n        this.key = key;\r\n        this.name = key;\r\n        this.type = type;\r\n\r\n        this.data = {\r\n            nodes: {},\r\n            edges: {}\r\n        }\r\n\r\n\r\n        if (type == \"Graph\") {\r\n            this.queryPresets = presets;\r\n            this.queryGenerators = {};\r\n            this.queryGenerators.nodeGraph = {\r\n                type: \"nodeGraph\",\r\n                options: {}\r\n            }\r\n        }\r\n\r\n        if (type == \"Grid\") {\r\n            this.queryPresets = presets;\r\n            this.queryGenerators = {};\r\n\r\n            this.queryGenerators.nodeFilter = {\r\n                type: \"nodeFilter\",\r\n                options: {}\r\n            }\r\n\r\n            this.queryGenerators.favouritesFilter = {\r\n                type: \"favouritesFilter\",\r\n                options: {}\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n \r\n    var graphNodeFromNeoNode = function (neoNode) {\r\n\r\n        var type = neoNode.Type;\r\n        var yf = parseInt(neoNode.YearFrom);\r\n        var yt = parseInt(neoNode.YearTo);\r\n\r\n        var y = yt;\r\n\r\n        if (yf && yt) {\r\n            y = yt - ((yt - yf) / 2);\r\n        }\r\n\r\n        var level = 0;\r\n\r\n        var startYear = 1400;\r\n        var endYear = 2000;\r\n        var step = 5;\r\n        var cnt = 1;\r\n        for (var i = startYear; i < endYear; i += step) {\r\n            if (y >= i && y < i + step) {\r\n                level = cnt;\r\n            }\r\n\r\n            cnt += 1;\r\n        }\r\n\r\n        if (y > endYear) {\r\n            level = cnt;\r\n        }\r\n\r\n        var person = utils.isPerson(type);\r\n\r\n\r\n        var node = {\r\n            id: neoNode.id,\r\n            label: neoNode.Lookup,\r\n            size: neoNode.Status / 10,\r\n            group: neoNode.Type,\r\n            // color: ==='Group' ? 'orange': 'pink',\r\n            mass: type == 'Group' ? 0.5 : 1,\r\n            radius: person ? neoNode.Status : 1,\r\n            //    title: neoNode.FB_blurb,//neoNode.Lookup + \" - \" + type + \" - \" + neoNode.Status,\r\n            level: level //for hiearchichal layout\r\n        }\r\n\r\n        var image = (type === 'Painting' || type === 'Picture') ? neoNode.temp.thumbUrl : null;\r\n\r\n        if (image) {\r\n            node.image = image;\r\n            node.shape = 'image';\r\n        }\r\n        else if (type == \"Provenance\") {\r\n            node.fontSize = 50;\r\n            node.fontColor = 'lightgray';\r\n            node.color = 'transparent';\r\n        }\r\n        else if (type == \"Iconography\" || type == \"Place\") {\r\n            node.shape = 'ellipse';\r\n        }\r\n        else if (type == \"Quotation\") {\r\n\r\n            node.shape = 'box';\r\n            node.color = 'transparent';\r\n            node.label = neoNode.Text;\r\n        }\r\n        else if (type == \"User\") {\r\n            node.shape = 'star';\r\n            node.size = 20;\r\n        }\r\n        else if (type == \"Link\") {\r\n            node.label = neoNode.Name;\r\n            node.shape = 'box';\r\n            node.color = 'transparent';\r\n        }\r\n        else {\r\n            node.shape = person ? 'dot' : 'box';\r\n        }\r\n\r\n        return node;\r\n\r\n    };\r\n\r\n    var graphEdgeFromNeoEdge = function (neoEdge) {\r\n        //id, from, to, type, properties\r\n\r\n        var type = neoEdge.type;\r\n\r\n        var directional =\r\n                   type == \"INFLUENCES\" ||\r\n                   type == \"INSPIRES\" ||\r\n                   type == \"ANTICIPATES\" ||\r\n                   type == \"DISCOVERS\" ||\r\n                   type == \"TEACHES\" ||\r\n                   type == \"ADMIRES\" ||\r\n                   type == \"ENCOURAGES\" ||\r\n                    type == \"PRECURSOR_OF\" ||\r\n                    type == \"INVENTS\";\r\n\r\n        var hideEdgeLabel =\r\n            type == \"BY\" || \"INFLUENCES\" ||\r\n              type == \"INSPIRES\" ||\r\n              type == \"DEALS_WITH\" ||\r\n            type == \"PART_OF\" ||\r\n            type == \"MEMBER_OF\" ||\r\n            type == \"ASSOCIATED_WITH\" ||\r\n            type == \"ACTIVE_DURING\" ||\r\n            type == \"FROM\" ||\r\n            type == \"DEVELOPS\" ||\r\n            type == \"LEADS\" ||\r\n            type == \"FOUNDS\" ||\r\n            type == \"DEPICTS\" ||\r\n            type == \"WORKS_IN\" ||\r\n            type == \"STUDIES\" || type == \"STUDIES_AT\" ||\r\n            type == \"TEACHES\" || type == \"TEACHES_AT\"; //displayed in light green\r\n\r\n        var hideEdge = type == \"FROM\";\r\n\r\n        var edge = {\r\n            id: neoEdge.id,\r\n            from: neoEdge.startNode,\r\n            to: neoEdge.endNode,\r\n            label: hideEdgeLabel ? null : type.toLowerCase(),\r\n            fontColor: 'lightblue',\r\n            //  width: neoEdge.Weight/2 ,\r\n            color: type == \"FROM\" ? \"#EEEEEE\"\r\n                : type == \"INFLUENCES\" ? 'pink'\r\n                : (type == \"TEACHES\" || type == \"TEACHES_AT\") ? 'lightgreen'\r\n                : 'lightblue',\r\n            opacity: hideEdge ? 0 : 1,//type == \"INFLUENCES\" ? 1 : 0.7,\r\n            style: directional ? 'arrow-center' : 'dash-line',\r\n            type: ['curved'],\r\n            labelAlignment: 'line-center'\r\n\r\n        }\r\n\r\n        return edge;\r\n\r\n    }\r\n\r\n\r\n    var utils = {\r\n\r\n        init: function () {\r\n\r\n            utils.refreshTypes();\r\n            utils.refreshPredicates();\r\n            return utils;\r\n\r\n\r\n        }\r\n        ,\r\n        newView : function (key, type) {\r\n            var view = new View(key, type);\r\n            return view;\r\n        }\r\n        ,\r\n        types: {}\r\n        ,\r\n        Predicate: Predicate\r\n        ,\r\n        predicates: {}\r\n        ,\r\n        isType: function (label) {\r\n            return utils.types[label] != undefined;\r\n        }\r\n        ,\r\n        refreshTypes: function () {\r\n\r\n            return neoClient.type.getAll().$promise.then(function (types) {\r\n                utils.types = types;\r\n                return types;\r\n            });\r\n        }\r\n    ,\r\n        refreshPredicates: function () {//consider creating lookup nodes for relationship types so that i can store properties for them\r\n\r\n            return neoClient.predicate.getAll().$promise.then(function (predicates) {\r\n                utils.predicates = predicates.toJSON();\r\n               // console.log(utils.predicates);\r\n                return utils.predicates;\r\n            });\r\n\r\n  \r\n\r\n\r\n        }\r\n        ,\r\n        defaultEdgeType : function (fromType, toType) {\r\n            if (toType == \"Provenance\") {\r\n                return \"FROM\";\r\n            }\r\n            else if (toType == \"Painter\") {\r\n                return \"INFLUENCES\";\r\n            }\r\n\r\n            return \"ASSOCIATED_WITH\";\r\n\r\n        }\r\n        ,\r\n        isSystemInfo: function (label) {\r\n\r\n            return label == \"Global\" || label == \"Type\" || label == \"Label\" || label == \"SystemInfo\";\r\n\r\n        },\r\n        getLabelClass: function (node, label) {\r\n\r\n\r\n\r\n\r\n\r\n            if (node && label === node.Type) {\r\n                return 'label-warning';\r\n            }\r\n\r\n            if (utils.isSystemInfo(label)) {\r\n                return 'label-system';\r\n            }\r\n\r\n            if (utils.isType(label)) {\r\n                return 'label-inverse pointer';\r\n            }\r\n\r\n\r\n            return 'label-info';\r\n\r\n        }\r\n\r\n        ,\r\n        personTypes: ['Painter',\r\n                'Illustrator',\r\n                'Philosopher',\r\n                'Poet',\r\n                'FilmMaker',\r\n               'Sculptor',\r\n                'Writer',\r\n               'Patron',\r\n                 'Leader',\r\n                 'Explorer',\r\n                 'Composer',\r\n                'Scientist',\r\n                'Caricaturist',\r\n                 'Mathematician']\r\n        ,\r\n        pictureTypes: ['Painting', 'Illustration', 'Drawing', 'Print']\r\n        ,\r\n        isPerson: function (type) {\r\n\r\n            return type == 'Painter' ||\r\n                type == 'Illustrator' ||\r\n                type == 'Philosopher' ||\r\n                type == 'Poet' ||\r\n                type == 'FilmMaker' ||\r\n                type == 'Sculptor' ||\r\n                type == 'Writer' ||\r\n                type == 'Patron' ||\r\n                type == 'Leader' ||\r\n                type == 'Explorer' ||\r\n                type == 'Composer' ||\r\n                type == 'Scientist' ||\r\n                type == 'Caricaturist' ||\r\n                type == 'Mathematician';\r\n\r\n        }\r\n        ,\r\n        graphOptions:   {\r\n            //  configurePhysics:true,\r\n            edges: { widthSelectionMultiplier: 4 }\r\n                ,\r\n            hierarchicalLayout: {\r\n                enabled: false,\r\n                levelSeparation: 10,//make this inversely proportional to number of nodes\r\n                nodeSpacing: 200,\r\n                direction: \"UD\",//LR\r\n                //    layout: \"hubsize\"\r\n            }\r\n                ,\r\n            dataManipulation: {\r\n                enabled: true,\r\n                initiallyVisible: true\r\n            }\r\n    ,\r\n            //stabilize: true,\r\n            //stabilizationIterations: 1000,\r\n            physics: {\r\n                barnesHut: {\r\n                    enabled: true,\r\n                    gravitationalConstant: -6000,\r\n                    centralGravity: 1,\r\n                    springLength: 20,\r\n                    springConstant: 0.04,\r\n                    damping: 0.09\r\n                },\r\n                repulsion: {\r\n                    centralGravity: 0.1,\r\n                    springLength: 0.5,\r\n                    springConstant: 0.05,\r\n                    nodeDistance: 100,\r\n                    damping: 0.09\r\n                }\r\n                ,\r\n                hierarchicalRepulsion: {\r\n                    enabled: false,\r\n                    centralGravity: 0,\r\n                    springLength: 270,\r\n                    springConstant: 0.01,\r\n                    nodeDistance: 300,\r\n                    damping: 0.09\r\n                }\r\n            }\r\n             \r\n                ,\r\n            onDelete: function (data, callback) {\r\n                //   $scope.publish(\"deleting\");\r\n            }\r\n        }\r\n            ,\r\n            //transforms neo graph data object into object containing array of nodes and array of edges renderable by vis network\r\n             toGraphData : function (g) {\r\n                var graphData = {\r\n                    nodes: [],\r\n                    edges: []\r\n                }\r\n                for (var n in g.nodes) {\r\n                    var node = graphNodeFromNeoNode(g.nodes[n])\r\n                    graphData.nodes.push(node);\r\n                }\r\n\r\n                for (var r in g.edges) {\r\n                    var edge = graphEdgeFromNeoEdge(g.edges[r]);\r\n                    graphData.edges.push(edge);\r\n                }\r\n                return graphData;\r\n            }\r\n            //mopve to 'state' object\r\n            ,\r\n            tabSettings: {}\r\n            ,\r\n            selectedTab:\"Properties\"\r\n \r\n      \r\n\r\n\r\n    }\r\n    return utils.init();\r\n\r\n}]);\r\n","angular.module('neograph.node.edit',['neograph.cache', 'neograph.session', 'neograph.utils'])\r\n    .controller('EditNodeCtrl',  function (neo, session, utils,$scope,$stateParams,cache) {\r\n       \r\n                 if ($stateParams.node){\r\n                    cache.getNode($stateParams.node).then(function(node){\r\n                            $scope.node = node;\r\n                        }); \r\n                }\r\n                \r\n                $scope.deleteNode = function (n) {\r\n                    \r\n                    neo.deleteNode(n)\r\n                    .then(function (deleted) {\r\n                        \r\n                        $scope.selection.selectedNode = deleted;\r\n                        //this assumes that the current view is not of deleted items, otherwise this would be inconsistent\r\n                        //let view handle its own data ?\r\n                        delete $scope.activeView.data.nodes[n.id];\r\n                        $scope.publish(\"deleted\", { selection: { nodes: [n] } });\r\n\r\n                    });\r\n                }\r\n                \r\n                \r\n                $scope.destroyNode = function (n) {\r\n                    \r\n                    neo.destroyNode(n)\r\n                    .then(function (deleted) {\r\n                        \r\n                        $scope.selection.selectedNode = undefined;\r\n                        \r\n                        //this assumes that the current view is not of deleted items, otherwise this would be inconsistent\r\n                        //let view handle its own data ?\r\n                        delete $scope.activeView.data.nodes[n.id];\r\n                        \r\n                        $scope.publish(\"deleted\", { selection: { nodes: [n] } });\r\n\r\n                    });\r\n\r\n                }\r\n                \r\n                $scope.saveNode = function (n) {\r\n        \r\n                    neo.saveNode(n, session.user)\r\n                    .then(function (node) {\r\n                        \r\n                        $scope.node = node;\r\n                        \r\n                        var newData = {};\r\n                        newData[node.id] = node;\r\n                        $scope.publish(\"dataUpdate\", newData)\r\n                        //if type, refresh types\r\n                        if (node.Type == \"Type\") {\r\n                            utils.refreshTypes();\r\n                        }\r\n                        \r\n                        $(node.temp.links).each(function (i, e) { e.editing = undefined; })\r\n\r\n                    });\r\n                }\r\n                \r\n                \r\n                $scope.restoreNode = function (n) {\r\n                    \r\n                    neo.restoreNode(n).then(function (node) {\r\n                        $scope.node = node;\r\n                        var newData = {};\r\n                        newData[node.id] = node;\r\n                        $scope.publish(\"dataUpdate\", newData)\r\n                    });\r\n                }\r\n                \r\n                \r\n                $scope.$watch(\"node\", function (node) {\r\n                    if (node) {\r\n                        \r\n                        node.temp.labelled = node.temp.labelled || [];\r\n                        \r\n                        $(\".labelEdit input\").val('');\r\n                        \r\n                        $scope.deleted = node.labels.indexOf('Deleted') > -1;\r\n                    }\r\n\r\n                });\r\n                \r\n                \r\n                \r\n                \r\n                //tie label value to lookup if empty or the same already\r\n                $scope.$watch(\"node.Lookup\", function (lookup, beforechange) {\r\n                    if (lookup) {\r\n                        \r\n                        if ($scope.node.Label != undefined && $scope.node.Label.trim() == \"\" || $scope.node.Label == beforechange) {\r\n                            $scope.node.Label = lookup;\r\n\r\n                        }\r\n                 \r\n\r\n                    }\r\n\r\n                });\r\n                \r\n                $scope.isAutogeneratedField = function (key) {\r\n                    \r\n                    \r\n                    return key != 'Lookup' && key != 'Type' && key != 'Label' && key != 'Description' && key != 'Text' && key != 'Name' && key != 'SystemInfo' &&\r\n                    key.indexOf('FB_') != 0 &&\r\n                    key.indexOf('Wiki') != 0 &&\r\n                    key.indexOf('Image') != 0 &&\r\n                    key != 'temp' &&\r\n                    key != 'labels' &&\r\n                    key != 'id' &&\r\n                    key != 'created';\r\n\r\n                }\r\n                \r\n                \r\n                \r\n                \r\n                $scope.addItem = function (col, item) {\r\n                    \r\n                    \r\n                    \r\n                    if ($scope.node[col].indexOf(item.Label) === -1) {\r\n                        $scope.node[col].push(item.Label);\r\n                    }\r\n                //else highlight the item momentarily\r\n\r\n\r\n                }\r\n                \r\n                $scope.removeItem = function (col, label) {\r\n                    \r\n                    var ind = $scope.node[col].indexOf(label);\r\n                    if (ind > -1) {\r\n                        $scope.node[col].splice(ind, 1);\r\n                        if ($scope.node.Type == label) {\r\n                            $scope.node.Type = undefined;\r\n                        }\r\n                    }\r\n\r\n                }\r\n                \r\n                \r\n                $scope.nodeTypes = [];\r\n                \r\n                $scope.$watchCollection(\"node.labels\", function (labels) {\r\n                    console.log('labels changed')\r\n                    console.log(labels);\r\n                    if (labels) {\r\n                        \r\n                        var selectedTypes = [];\r\n                        angular.forEach($scope.node.labels, function (l) {\r\n                            if (utils.types[l]) {\r\n                                selectedTypes.push({ Lookup: l, Type: 'Type' });\r\n                            }\r\n                        });\r\n                        \r\n                        $scope.nodeTypes = selectedTypes;\r\n                        \r\n                        //     console.log(selectedTypes);\r\n                        \r\n                        //set type if not yet set and one label added that is a type\r\n                        if (!$scope.node.Type && $scope.nodeTypes.length === 1) {\r\n                            \r\n                            $scope.node.Type = $scope.nodeTypes[0].Lookup; //for types the lookup will always be the label\r\n\r\n                        }\r\n\r\n                    //get properties relating to chosen labels and extend node to enable them\r\n                    //neo.getProps(labels).then(function (out) {\r\n                    //    console.log('extending node');\r\n                    //    console.log(out);\r\n                    //    console.log(out.props);\r\n                    //    $scope.node = $.extend(out.props,$scope.node);\r\n                    //    console.log($scope.node);\r\n                    //});\r\n\r\n\r\n                    }\r\n\r\n                });\r\n                \r\n                //can be called from clicking label, in which case item is text value, or from the typeahead in which case it is an object with Lookup property\r\n                $scope.setType = function (item) {\r\n                    //   var itemtext = item.Label ||item.Lookup\r\n                    console.log(item);\r\n                    if (utils.isType(item.Label)) {\r\n                        $scope.node.Type = item.Label;\r\n                    }\r\n                }\r\n                \r\n                \r\n                $scope.reverseRelprop = function (prop) {\r\n                    \r\n                    var reversedProp = angular.copy(prop);\r\n                    reversedProp.predicate.Reverse();\r\n                    \r\n                    //disallow if prop already exists\r\n                    if ($scope.node.temp.relProps[reversedProp.predicate.Key()]) {\r\n                        return;\r\n                    }\r\n                    else {\r\n                        \r\n                        //remove prop and replace with cloned prop\r\n                        delete $scope.node.temp.relProps[prop.predicate.Key()];\r\n                        $scope.node.temp.relProps[reversedProp.predicate.Key()] = reversedProp;\r\n                    }\r\n\r\n\r\n                }\r\n                \r\n                \r\n                $scope.$watch('newPredicate', function (v) {\r\n                    \r\n                    if (v) {\r\n                        $scope.addRelationship({ Lookup: v.toUpperCase().replace(/ /g, \"_\") });\r\n                    }\r\n                });\r\n                \r\n                \r\n                \r\n                \r\n                $scope.addRelationship = function (item) {\r\n                    \r\n                    \r\n                    var p = new utils.Predicate(item.Lookup, \"out\");//currently no way to select 'in' relationships\r\n                    \r\n                    $scope.node.temp = $scope.node.temp || {};\r\n                    $scope.node.temp.relProps = $scope.node.temp.relProps || {};\r\n                    if (!$scope.node.temp.relProps[p.Key()]) {\r\n                        $scope.node.temp.relProps[p.Key()] = { predicate: p, items: [] };\r\n                    }\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n           \r\n\r\n\r\n            });","angular.module('neograph.node',[\r\n    'neograph.node.graphpanel',\r\n    'neograph.node.favourites',\r\n    'neograph.node.freebase',\r\n    'neograph.node.graphpanel',\r\n    'neograph.node.images',\r\n    'neograph.node.edit',\r\n    'neograph.node.wikipedia',\r\n    'neograph.node.multiple',\r\n    'neograph.cache',\r\n    'ui.router'\r\n    \r\n])\r\n.config(function($stateProvider){\r\n    $stateProvider\r\n        .state('admin.main.node',{\r\n            url:'/node/:node',\r\n            //abstract:true,\r\n            views:{\r\n                    'nodeHeader@admin':{\r\n                        controller:'NodeHeaderCtrl',\r\n                        templateUrl:'app/node/nodeHeader.html'\r\n                    }\r\n                     ,\r\n                      'node@admin':{\r\n                        controller:'NodeCtrl',\r\n                        templateUrl:'app/node/node.html'\r\n                    }\r\n             \r\n            }\r\n            \r\n        })\r\n        .state('admin.main.node.view',{\r\n            url:'/view',\r\n            views:{\r\n                     'viewnode@admin.main.node':{\r\n                        templateUrl:'app/node/node.view.html',\r\n                        controller:function ($scope,$stateParams,cache) {\r\n                            if ($stateParams.node){\r\n                                cache.getNode($stateParams.node).then(function(node){\r\n                                        $scope.node = node;\r\n                                    }); \r\n                            }\r\n                        }\r\n                    }\r\n            }\r\n            \r\n        })\r\n        .state('admin.main.node.edit',{\r\n            url:'/edit',\r\n            views:{\r\n          \r\n                      'editnode@admin.main.node':{\r\n                       templateUrl:'app/node/node.edit.html',\r\n                       controller:'EditNodeCtrl'\r\n                    }\r\n            }\r\n            \r\n        });\r\n})\r\n.controller('NodeSearchCtrl',function($scope,$state,cache){\r\n        \r\n    $scope.selection = {\r\n        selectedNode: null,\r\n        selectedEdge: null,\r\n        hoverNode: null\r\n    }\r\n        \r\n     $scope.$watch('nodeLookup', function (n) {\r\n\r\n        if (n && n.id) {\r\n             cache.getNode(n.Label).then(function(node){\r\n                 $scope.selection.selectedNode = node;\r\n                 $state.go('admin.main.node.view',{node:n.Label});\r\n             })    \r\n          \r\n        }\r\n    });\r\n    \r\n    $scope.addNodeToGraph = function (node) {\r\n        console.log('add node to graph');\r\n        //check node is not already in graph\r\n        if (!$scope.views.Graph.data.nodes[node.id]) {\r\n            console.log('get relationships');\r\n            //pull in relationships\r\n            neo.getRelationships(node.id).then(function (g) {\r\n                console.log('got relationships');\r\n                console.dir(g);\r\n\r\n                var newData = {\r\n                    edges: g.edges,\r\n                    nodes: {}\r\n                }\r\n                newData.nodes[node.id] = node;\r\n\r\n\r\n                $scope.publish(\"dataUpdate\", newData);\r\n\r\n\r\n                if (node.id === $scope.selection.selectedNode.id) {\r\n                    $scope.publish(\"selected\", { selection: { nodes: [node.id] } });\r\n                    $scope.publish(\"focus\", node.id)\r\n                }\r\n\r\n            });\r\n\r\n            $scope.activeView = graphView;\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n        \r\n})\r\n.controller('NodeHeaderCtrl',function($scope,$stateParams,cache){\r\n        \r\n    $scope.selection = {\r\n        selectedNode: null,\r\n        selectedEdge: null,\r\n        hoverNode: null\r\n    }\r\n\r\n     if ($stateParams.node){\r\n          \r\n           cache.getNode($stateParams.node).then(function(node){\r\n                 $scope.selection.selectedNode = node;\r\n            });\r\n                \r\n      }\r\n   \r\n\r\n        \r\n})\r\n.controller('NodeCtrl',function($scope,$stateParams,neo,cache){\r\n\r\n       $scope.selection = {\r\n            selectedNode: null,\r\n            selectedEdge: null,\r\n            hoverNode: null\r\n        }\r\n        \r\n      \r\n      if ($stateParams.node){\r\n          \r\n           cache.getNode($stateParams.node).then(function(node){\r\n                 $scope.selection.selectedNode = node;\r\n            });\r\n                \r\n      }\r\n      \r\n\r\n     $scope.newNode = function () {\r\n\r\n        var newNode = {\r\n            id: -1,\r\n            labels: [],\r\n            Type: \"\",\r\n            temp: {\r\n                tabs: [\"Properties\"]\r\n            }\r\n        }\r\n\r\n        if ($scope.nodeLookupText && (!$scope.selection.selectedNode || $scope.nodeLookupText != $scope.selection.selectedNode.Lookup)) {\r\n            newNode.Lookup = $scope.nodeLookupText;\r\n        }\r\n\r\n        $scope.selection.selectedNode = newNode;\r\n        $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n\r\n        $scope.selectedTab = 'Properties';\r\n\r\n\r\n    }\r\n\r\n/*\r\n    //respond to published event from other component\r\n     $scope.subscribe(\"selected\", function (params) {//params is object containing array of nodes and array of edges\r\n\r\n\r\n        //avoid feedback loop by checking that sender is not self\r\n        if (params.sender != \"Controller\") {\r\n\r\n            if (params.selection.nodes.length == 1) {\r\n\r\n                if (params.selection.nodes[0].id) {\r\n\r\n                 \r\n                    neo.getNode(params.selection.nodes[0].id, true)\r\n                   .then(function (loadedNode) {\r\n                 \r\n                       $scope.selection.selectedNode = loadedNode;\r\n                       $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                    \r\n\r\n                   \r\n                   });\r\n                }\r\n                else if (params.selection.nodes[0].Label) {\r\n\r\n                    neo.getNodeByLabel(params.selection.nodes[0].Label, true)\r\n                   .then(function (loadedNode) {\r\n                      \r\n                       $scope.selection.selectedNode = loadedNode;\r\n                       $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                       \r\n                   });\r\n                }\r\n\r\n            }\r\n            else if (params.selection.nodes.length > 1)//multiple node selection\r\n            {\r\n                $scope.selection.multiple = params.selection.nodes;\r\n                $scope.selection.selectedNode = undefined;\r\n                $scope.selection.selectedEdge = undefined;\r\n                $scope.tabs = [\"Properties\"];\r\n                $scope.selectedTab = $scope.tabs[0];\r\n\r\n            }\r\n            else if (params.selection.edges.length == 1) {\r\n                $scope.selection.selectedNode = undefined;\r\n                $scope.selection.selectedEdge = params.selection.edges[0];\r\n                $scope.tabs = [\"Properties\", \"Images\"];\r\n                $scope.selectedTab = $scope.tabs[0];\r\n\r\n            }\r\n        }\r\n    });\r\n    */\r\n\r\n    $scope.tabs = [];\r\n    $scope.selectedTab = \"Properties\";\r\n    $scope.selectTab = function (tab) {\r\n        $scope.selectedTab = tab;\r\n    }\r\n\r\n\r\n    //update tabs & properties if labels change\r\n    var settingPropsAndTabs = false;\r\n \r\n    //how can i stop this firing for newly loaded nodes ?\r\n    $scope.$watchCollection('selection.selectedNode.labels', function (labels) {\r\n     \r\n        if (labels && labels.length && !settingPropsAndTabs ) {\r\n\r\n            settingPropsAndTabs = true;\r\n\r\n            console.dir($scope.selection.selectedNode);\r\n            neo.getProps(labels).then(function (out) {\r\n\r\n                console.dir($scope.selection.selectedNode);\r\n                $scope.selection.selectedNode = $.extend(null,out.properties, $scope.selection.selectedNode);\r\n                $scope.selection.selectedNode.temp.tabs = out.tabs;\r\n                $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                /*\r\n                if (session.user.favourites[$scope.selection.selectedNode.id]) {\r\n                    $scope.tabs.push(\"Favourite\");\r\n                }\r\n                */\r\n                settingPropsAndTabs = false;\r\n            })\r\n        }\r\n    });\r\n    \r\n   \r\n\r\n \r\n\r\n\r\n    \r\n    \r\n    \r\n}) ","angular.module('neograph.query',['neograph.utils','neograph.queryDirective'])\r\n    .factory('viewService',function(utils){\r\n        \r\n        var views = {};\r\n\r\n        var newView = function (key, type) {\r\n            var view = utils.newView(key, type);\r\n            view.key = key;\r\n            views[key] = view;\r\n            return view;\r\n        }\r\n\r\n        var graphView = newView('Graph', 'Graph');\r\n        var defaultImageView = newView('Grid', 'Grid');\r\n        \r\n        var activeView = defaultImageView;\r\n        \r\n        var cloneView = function () {\r\n            views[$scope.views[activeView].queryGenerators.nodeFilter.options.node.Lookup] = angular.copy(views[activeView]);\r\n        }\r\n        \r\n        var listeners = [];\r\n        \r\n        \r\n        function publishViewChange(){\r\n            \r\n            for (var i =0;i<listeners.length;i++){\r\n                listeners[i](activeView);\r\n            }\r\n        }\r\n        \r\n        \r\n        return {\r\n            views:views,\r\n            activeView:activeView,\r\n            updateView:function(key){\r\n                activeView = views[key];\r\n                publishViewChange();\r\n            }\r\n            ,\r\n            subscribe:function(callback){\r\n                listeners.push(callback);\r\n            }\r\n        }\r\n        \r\n    })\r\n    .controller('QueryCtrl',function($scope,viewService,$stateParams){\r\n        \r\n        console.log($stateParams);\r\n        \r\n        //todo - should be per view\r\n        if ($stateParams.querypreset){\r\n            $scope.defaultpreset = $stateParams.querypreset;\r\n        }\r\n        \r\n        viewService.subscribe(function(activeView){\r\n            $scope.activeView = activeView;\r\n        })\r\n        \r\n        $scope.views = viewService.views;\r\n        $scope.activeView = viewService.activeView;\r\n\r\n        \r\n    })\r\n    .controller('QueryResultsCtrl',function($scope,viewService){\r\n        \r\n        viewService.subscribe(function(activeView){\r\n            $scope.activeView = activeView;\r\n        })\r\n        \r\n        $scope.views = viewService.views;\r\n        $scope.activeView = viewService.activeView;\r\n        \r\n        $scope.selectedTab = $scope.activeView.key;\r\n\r\n        $scope.$watch('selectedTab',function(key){\r\n            viewService.updateView(key);\r\n        });\r\n        \r\n       \r\n/*\r\n        $scope.$watch('activeView', function (view) {\r\n            $scope.activeViewKey = view.key;\r\n       //     shouldEnabledAddToGraph();\r\n        });\r\n\r\n        $scope.$watch('activeViewKey', function (key) {\r\n            $scope.activeView = $scope.views[key];\r\n        });\r\n        \r\n        */\r\n        /*\r\n        $scope.subscribe(\"query\", function (query) {\r\n\r\n            if (query && (query.q || query.queryGenerator)) {\r\n\r\n                if (!query.view) {\r\n                    query.view = query.type;\r\n                }\r\n\r\n                var view = $scope.views[query.view];\r\n\r\n                if (view) {\r\n                    //reset name incase it changed due to node filter\r\n                    view.name = query.view;\r\n                }\r\n                else {\r\n\r\n                    view = newView(query.view, query.type);//view = view key, type = \"Graph\" or \"Grid\"\r\n                }\r\n\r\n                if (query.queryGenerator) {\r\n                    var qg = view.queryGenerators[query.queryGenerator.id];\r\n                    qg.options = query.queryGenerator.options;\r\n                    view.queryGenerator = qg;\r\n\r\n                }\r\n                else {\r\n                    view.query = query;\r\n                }\r\n\r\n                $scope.activeView = view;\r\n\r\n            }\r\n\r\n        });\r\n\r\n*/\r\n        \r\n        \r\n    });\r\n    ","angular.module('neograph.query.presets',[])\r\n.factory(\"queryPresets\", function () {\r\n\r\n    return {\r\n        \"AddedRecently\": {\r\n\r\n            q: \"match (n:Global) where n.created is not null return n order by n.created desc limit 100\"\r\n\r\n        },  \"AddedRecentlyPictures\": {\r\n            //MATCH (p:Label) - [:ASSOCIATED_WITH|:PART_OF|:FOUNDS|:LEADS|:MEMBER_OF|:REPRESENTS] - (g:Group), (p) -- (i:Picture) where ID(g) = \" + n.id + \" return p.Name,collect(i)[0..5],count(*) as count order by p.Name\r\n            q: \"MATCH  (p:Label) -- (i:Picture) where p.created is not null return p.created,collect(i)[0..5],count(*) as count  order by p.created desc limit 500\"\r\n\r\n        },\r\n        \"Overview\": {\r\n            q: \"match (n) - [r] - (m) where (n:Global and m:Global) and (n.Status is null or n.Status > 6) and (m.Status is null or m.Status > 6) and not (n-[:TYPE_OF]-m) RETURN r\"\r\n        }\r\n        ,\r\n        \"OverViewDense\": {\r\n            q: \"match (n) - [r] - (m) where (n:Global and m:Global) and (n.Status is null or n.Status > 3) and (m.Status is null or m.Status > 3) and not (n-[:TYPE_OF]-m) RETURN r\"\r\n        }\r\n        ,\r\n        \"British Influence\": {\r\n            q: \"MATCH (c:Global)-[r]-(d:Global) where (c:English or c:Scottish) and not (c-[:TYPE_OF]-d) and not d.Lookup='English' and not c.Lookup='English'  return c,d,r\"\r\n        },\r\n        \"British Only\": {\r\n            q: \"MATCH (c:Global)-[r]-(d:Global) where (c:English or c:Scottish) and  (d:English or d:Scottish) and not (c-[:TYPE_OF]-d) and not d.Lookup='English' and not c.Lookup='English'  return c,d,r\"\r\n            ,\r\n            connectAll: true\r\n        }\r\n           ,\r\n        \"French Only\": {\r\n            q: \"MATCH (c:Global:French)-[r]-(d:Global:French) where  not (c-[:TYPE_OF]-d) and not d.Lookup='French' and not c.Lookup='French'  return c,d,r\"\r\n             ,\r\n            connectAll: true\r\n        }\r\n        ,\r\n        \"French Painter influence\": {\r\n            q: \"MATCH (c:Global:French:Painter)-[r]-(d:Painter) where not (c-[:TYPE_OF]-d) and not d.Lookup='French' and not c.Lookup='French'  return c,d,r\"\r\n                    ,\r\n            connectAll: true\r\n        }\r\n        ,\r\n        \"Cezanne 3 gen\": {\r\n            q: \"MATCH (c {Lookup:'Cezanne'})-[r]-(d:Painter)  -[s]-(e:Painter)  -[t]-(f:Painter) return c,d,e,f,r,s,t\"\r\n            ,\r\n            connectAll: true\r\n        }\r\n            ,\r\n        \"Cezanne 3 gen outbound\": {\r\n            q: \"MATCH (c {Lookup:'Cezanne'})-[r]->(d:Painter)  -[s]->(e:Painter)  -[t]->(f:Painter) return c,d,e,f,r,s,t\"\r\n            ,\r\n            connectAll: true\r\n        }\r\n            ,\r\n        \"Cezanne 3 gen inbound\": {\r\n            q: \"MATCH (c {Lookup:'Cezanne'})<-[r]-(d:Painter)  <-[s]-(e:Painter)  <-[t]-(f:Painter) return c,d,e,f,r,s,t\"\r\n                    ,\r\n            connectAll: true\r\n        }\r\n               ,\r\n        \"French-English Painters\": {\r\n            q: \"MATCH (c:Global:French:Painter)-[r]-(d:Global:English:Painter) where  not (c-[:TYPE_OF]-d) and not d.Lookup='French' and not c.Lookup='French'  return c,d,r\"\r\n             ,\r\n            connectAll: true\r\n        }\r\n                 ,\r\n        \"German\": {\r\n            q: \"MATCH (c:Global:German)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='German' and not c.Lookup='German'  return c,d,r\"\r\n        }\r\n                  ,\r\n        \"NorthernEurope\": {\r\n            q: \"MATCH (c:Global)-[r]-(d:Global) where (c:NorthernEurope or c:German or c:Dutch or c:English or c:Scottish) and  (d:NorthernEurope or d:German or d:Dutch or d:English or d:Scottish) and not c:Provenance and not d:Provenance and not (c-[:TYPE_OF]-d)   return c,d,r\"\r\n        }\r\n                 ,\r\n        \"Italian\": {\r\n            q: \"MATCH (c:Global:Italian)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='Italian' and not c.Lookup='Italian'  return c,d,r\"\r\n        }\r\n                 ,\r\n        \"Spanish\": {\r\n            q: \"MATCH (c:Global:Spanish)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='Spanish' and not c.Lookup='Spanish'  return c,d,r\"\r\n        }\r\n                  ,\r\n        \"American\": {\r\n            q: \"MATCH (c:Global:American)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='American' and not c.Lookup='American'  return c,d,r\"\r\n        }\r\n                 ,\r\n        \"Pop\": {\r\n            q: \"match (n {Lookup:'Pop'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) and not m:Provenance and not p:Provenance return n,r,m,s,p\"\r\n        }\r\n               ,\r\n        \"Impressionism\": {\r\n            q: \"match (n {Lookup:'Impressionist'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) and not m:Provenance and not p:Provenance return n,r,m,s,p\"\r\n            ,\r\n            connectAll: true\r\n        }\r\n               ,\r\n        \"Landscape\": {\r\n            q: \"MATCH (c:Global:Landscape)-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  and not d.Lookup='Landscape' and (d:Landscape or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r\"\r\n        }\r\n               ,\r\n        \"Modern\": {\r\n            q: \"MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and c.YearTo > 1870  and d.YearTo > 1870 return c,d,r\"\r\n        }\r\n                  ,\r\n        \"Rennaissance\": {\r\n            q: \"MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and c.YearTo > 1400 and c.YearTo<1700 and d.YearTo > 1400 and d.YearTo<1700 return c,d,r\"\r\n        }\r\n\r\n\r\n        // $scope.query =;\r\n\r\n        // $scope.query = \"match (n) - [r:INFLUENCES|:PART_OF|:MEMBER_OF|:ASSOCIATED_WITH|:INSPIRES|:ADMIRES|:FROM|:DEVELOPS|:ANTICIPATES|:FOUNDS|:LEADS|:WORKS_IN] - (m) where (n:Global and m:Global) and (n:Greatest or n:Group or n:Theme or n:School or n:Iconography or n:Provenance) and (m:Greatest or m:Group  or m:Theme or m:School or m:Iconography or m:Provenance) RETURN r\";//\"match (n) - [r:INFLUENCES|:PART_OF|:MEMBER_OF] - (m) where (n:Greatest or n:Group) and (m:Greatest or m:Group) RETURN r\";\r\n\r\n        //BRITSH\r\n        // $scope.query = ;\r\n\r\n        //IMPRESSIONISM\r\n        // MATCH (c:Global:Impressionist)-[r]-(d:Global:Impressionist) where  not (c-[:TYPE_OF]-d)   return c,d,r\r\n        //need to use connect all:\r\n        //  match (n {Lookup:'Impressionism'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) return n,r,m,s,p\r\n        //match (n {Lookup:'Impressionism'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) and not m:Provenance and not p:Provenance return n,r,m,s,p\r\n        //only follow links to next gen for above given weight ?\r\n\r\n        //LANDSCAPE\r\n        //\"MATCH (c:Global:Landscape)-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  and not d.Lookup='Landscape' and (d:Landscape or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r\"\r\n\r\n        //DATE FILTER\r\n        //   $scope.query =\r\n\r\n        //  var initQueryText = \"match (n:Greatest) - [r:INFLUENCES] - (m:Greatest) RETURN r\";//\"match (n:Painter) return n.Name\"\r\n\r\n        //   $scope.query = \"match (n) - [r:INFLUENCES|:PART_OF|:MEMBER_OF|:ASSOCIATED_WITH|:INSPIRES|:ADMIRES|:FROM|:DEVELOPS|:ANTICIPATES|:FOUNDS|:LEADS|:WORKS_IN] - (m) where (n:Global and m:Global and n.YearTo is not null and m.YearTo is not null) and (n:Great or n:Group or n:School  or n:Period) and (m:Great or m:Group  or m:School or m:Period) RETURN r\";\r\n\r\n        // $scope.query = \"match (n) - [r:INFLUENCES|:PART_OF|:MEMBER_OF|:ASSOCIATED_WITH|:INSPIRES|:ADMIRES|:FROM|:DEVELOPS|:ANTICIPATES|:FOUNDS|:LEADS|:WORKS_IN] - (m) where (n:Global and m:Global and n.YearTo is not null and m.YearTo is not null) and (n:Greatest or n:Group or n:Theme or n:School or n:Iconography or n:Provenance) and (m:Greatest or m:Group  or m:Theme or m:School or m:Iconography or m:Provenance) RETURN r\";\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n})","angular.module('neograph.queryDirective',['neograph.neo', 'neograph.query.presets','neograph.query.generator'])\r\n.directive('query', ['neo', 'queryPresets',function (neo,presets) {\r\n        return {\r\n            replace: true,\r\n            restrict: 'E',\r\n            templateUrl: 'app/query/queryDirective.html',\r\n            scope: {\r\n                view: '=',\r\n                editable: '=?',\r\n                defaultpreset: '=?'\r\n\r\n            },\r\n            link: function ($scope, $element, $attrs) {\r\n                \r\n          \r\n                   \r\n                $scope.$watch('preset', function (preset) {\r\n                    console.log('p')\r\n                    if (preset) {\r\n                        console.log('preset change')\r\n                        $scope.view.query = preset;\r\n                    }\r\n                })\r\n                \r\n                if ($scope.defaultpreset)\r\n                {\r\n                    $scope.preset=presets[$scope.defaultpreset];\r\n                }\r\n\r\n                $scope.$watch('view.query', function (query) {\r\n                    if (query && query.q) {\r\n                        console.log('query Change');\r\n                        $scope.getData();\r\n                    }\r\n\r\n                });\r\n                \r\n                $scope.generatedQuery = {};\r\n                $scope.$watch('generatedQuery.q', function (q) {\r\n                    \r\n                    if (q) {\r\n                        $scope.view.query = { q: q }\r\n                    }\r\n                });\r\n                \r\n                $scope.nodeChanged = function (node) {\r\n                    if (node) {\r\n                        \r\n                        \r\n                        $scope.view.name = node.Label || node.Lookup;\r\n                \r\n                    }\r\n                }\r\n                \r\n                $scope.connectAll = function () {\r\n                    neo.getAllRelationships($scope.view.data.nodes)\r\n                    .then(function (g) {\r\n                        $.extend($scope.view.data.edges, g.edges);//add to cached data\r\n                        $scope.publish(\"dataUpdate\", g)\r\n                    });\r\n                }\r\n                \r\n                $scope.getData = function () {\r\n                    \r\n                    var query = $scope.view.query;\r\n                    \r\n                    if (query && query.q) {\r\n                        console.log('get data')\r\n                        \r\n                        //if grid query then return results as array to preserve sort order\r\n                        var returnArray = $scope.view.type === 'Grid' ? true : false;\r\n                        \r\n                        neo.getGraph(query.q, returnArray)\r\n                        .then(function (g) {\r\n                            \r\n                            if (query.connectAll) {\r\n                                \r\n                                neo.getAllRelationships(g.nodes)\r\n                                    .then(function (g2) {\r\n                                    \r\n                                    $.extend(g.edges, g2.edges);\r\n                                    $scope.view.data = g;\r\n\r\n                                });\r\n                            }\r\n                            else {\r\n                                $scope.view.data = g;\r\n                                console.log(g);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }])","angular.module('neograph.node.favourites',[])\r\n    .directive('favourites', function () {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/favourites/node.favourites.html',\r\n        scope: {\r\n            node: '=',\r\n            query: '='\r\n        }\r\n        ,\r\n        link: function ($scope) {\r\n\r\n\r\n        \r\n\r\n            $scope.$watch('node', function (node) {\r\n\r\n                var querys = [];\r\n\r\n                if (node) {\r\n\r\n                    querys.push(\r\n                         {\r\n                             name: \"Pictures\",\r\n                             view: node.Lookup + \" favourites\",\r\n                             type:\"Grid\",\r\n                             queryGenerator: { id: \"favouritesFilter\", options: { user: node } }\r\n                         })\r\n\r\n\r\n                    querys.push(\r\n                      {\r\n                          name: \"People\",\r\n                          q: \"MATCH (c:\" + node.Lookup + \":Favourite)-[]->(d) - [] - (n:Person)    return n\", // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                          connectAll: true,\r\n                          view: \"Graph\"\r\n                      });\r\n\r\n                    querys.push(\r\n                              {\r\n                                  name: \"People + 1\",\r\n                                  q: \"MATCH (c:\" + node.Lookup + \":Favourite)-[]->(d) - [] - (n:Person) -[]-(m:Person)   return n,m\", // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                                  connectAll: true,\r\n                                  view: \"Graph\"\r\n                              });\r\n\r\n                    querys.push(\r\n                   {\r\n                       name: \"People and groups\",\r\n                       q: \"MATCH (c:\" + node.Lookup + \":Favourite)-[]->(d) - [] - (n) where (n:Person or n:Period or n:Group or n:Provenance)   return n\", // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                       connectAll: true,\r\n                       view: \"Graph\"\r\n                   });\r\n\r\n                    querys.push(\r\n                       {\r\n                           name: \"People and groups + 1 \",\r\n                           q: \"MATCH (c:\" + node.Lookup + \":Favourite)-[]->(d) - [] - (n) - [] - (m) where (n:Person or n:Period or n:Group or n:Provenance) and  (m:Person or m:Period or m:Group or m:Provenance)  return n,m\", // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                           connectAll: true,\r\n                           view: \"Graph\"\r\n                       });\r\n\r\n\r\n\r\n                    querys.push(\r\n                       {\r\n                           name: \"Everything\",\r\n                           q: \"MATCH (c:\" + node.Lookup + \":Favourite)-[]->(d) - [] - (n:Global)  return n\", // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                           connectAll: true,\r\n                           view: \"Graph\"\r\n                       });\r\n\r\n\r\n                    querys.push(\r\n                       {\r\n                           name: \"Everything + 1\",\r\n                           q: \"MATCH (c:\" + node.Lookup + \":Favourite)-[]->(d) - [] - (n:Global) - [] - (m:Global)   return n,m\", // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                           connectAll: true,\r\n                           view: \"Graph\"\r\n                       });\r\n\r\n\r\n\r\n                }\r\n\r\n                console.log(querys);\r\n\r\n                $scope.querys = querys;\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n})","angular.module('neograph.node.freebase',['neograph.neo'])\r\n    .factory('freebase.service',\r\n    function(){\r\n        \r\n        \r\n    var creationQueries = [];\r\n\r\n    //creationQueries.push({\r\n    //    name: \"Description\",\r\n    //    propname: \"description\",\r\n    //    query: {\r\n    //        \"type\": \"/common/topic\",\r\n    //        \"description\": [{ \"mid\": null, \"name\": null }]\r\n    //    }\r\n    //});\r\n    //creationQueries.push({\r\n    //    name: \"Image\",\r\n    //    propname: \"image\",\r\n    //    query: {\r\n    //        \"type\": \"/common/topic\",\r\n    //        \"image\": [{ \"mid\": null, \"name\": null }]\r\n    //    }\r\n    //});\r\n    creationQueries.push({\r\n        name: \"About\",\r\n        propname: [\"type\", \"art_genre\", \"\", \"art_subject\", \"period_or_movement\", \"locations\", \"date_begun\", \"date_completed\"],\r\n        query: {\r\n            \"type\": \"/visual_art/artwork\",\r\n            \"art_genre\": [{ \"mid\": null, \"name\": null }],\r\n            \"art_subject\": [{ \"mid\": null, \"name\": null }],\r\n            \"period_or_movement\": [{ \"mid\": null, \"name\": null }],\r\n            \"locations\": [{ \"mid\": null, \"name\": null }],\r\n            \"date_begun\": null,\r\n            \"date_completed\": null\r\n        }\r\n    });\r\n\r\n    //creationQueries.push({\r\n    //    name: \"About\",\r\n    //    propname: [\"type\",\"art_genre\",\"\",\"art_subject\",\"period_or_movement\",\"locations\",\"date_begun\",\"date_completed\"],\r\n    //    query: {\r\n    //        \"type\": \"/visual_art/artwork\",\r\n    //        \"art_genre\": [{ \"mid\": null, \"name\": null }],\r\n    //        \"art_subject\": [{ \"mid\": null, \"name\": null }],\r\n    //        \"period_or_movement\": [{ \"mid\": null, \"name\": null }],\r\n    //        \"locations\": [{ \"mid\": null, \"name\": null }],\r\n    //        \"date_begun\": null,\r\n    //        \"date_completed\":null\r\n    //    }\r\n    //});\r\n\r\n    ///visual_art/artwork/art_genre\r\n    ///visual_art/artwork/art_subject\r\n    ///visual_art/artwork/period_or_movement\r\n    ///visual_art/artwork/dimensions_meters\r\n    ///visual_art/artwork/locations\r\n    //visual_art/artwork/date_begun\r\n    //visual_art/artwork/date_completed\r\n\r\n\r\n\r\n\r\n\r\n    //queries that return lists\r\n    var queries = [];\r\n\r\n    //queries.push({\r\n    //    name: \"Description\",\r\n    //    propname: \"description\",\r\n    //    query: {\r\n    //        \"type\": \"/common/topic/description\",\r\n    //        \"description\": [{ \"mid\": null, \"name\": null }]\r\n    //    }\r\n    //});\r\n    //queries.push({\r\n    //    name: \"Image\",\r\n    //    propname: \"image\",\r\n    //    query: {\r\n    //        \"type\": \"/common/topic/image\",\r\n    //        \"image\": [{ \"mid\": null, \"name\": null }]\r\n    //    }\r\n    //});\r\n\r\n\r\n\r\n    queries.push({\r\n        name: \"Artworks\",\r\n        propname: \"artworks\",\r\n        query: {\r\n            \"type\": \"/visual_art/visual_artist\",\r\n            \"artworks\": [{ \"mid\": null, \"name\": null }]\r\n        }\r\n    });\r\n\r\n\r\n    queries.push({\r\n        name: \"Quotations\",\r\n        propname: \"quotations\",\r\n        query: {\r\n            \"type\": \"/people/person\",\r\n            \"quotations\": [{ \"mid\": null, \"name\": null }]\r\n        }\r\n    });\r\n\r\n    queries.push({\r\n        name: \"Influence\",\r\n        propname: \"influenced\",\r\n        query: {\r\n            \"type\": \"/influence/influence_node\",\r\n            \"influenced\": [{ \"mid\": null, \"name\": null }]\r\n        }\r\n    });\r\n\r\n    queries.push({\r\n        name: \"Influenced by\",\r\n        propname: \"influenced_by\",\r\n        query: {\r\n            \"type\": \"/influence/influence_node\",\r\n            \"influenced_by\": [{ \"mid\": null, \"name\": null }]\r\n        }\r\n    });\r\n    queries.push({\r\n        name: \"Periods or Movements\",\r\n        propname: \"associated_periods_or_movements\",\r\n        query: {\r\n            \"type\": \"/visual_art/visual_artist\",\r\n            \"associated_periods_or_movements\": [{ \"mid\": null, \"name\": null }]\r\n        }\r\n    });\r\n    queries.push({\r\n        name: \"Peers\",\r\n        propname: \"peers\",\r\n        query: {\r\n            \"type\": \"/influence/influence_node\",\r\n            \"peers\": [{ \"mid\": null, \"name\": null }]\r\n        }\r\n    });\r\n\r\n\r\n\r\n    //queries for single-value results\r\n    queries.push({\r\n        name: \"Date of Birth\",\r\n        propname: \"date_of_birth\",\r\n        query: {\r\n            \"type\": \"/people/person\",\r\n            \"date_of_birth\": null\r\n        }\r\n    });\r\n\r\n    queries.push({\r\n        name: \"Date of Death\",\r\n        propname: \"date_of_death\",\r\n        query: {\r\n            \"type\": \"/people/deceased_person\",\r\n            \"date_of_death\": null\r\n        }\r\n    });\r\n\r\n\r\n    var getTopic = function (freebaseId, filter, callback) {\r\n\r\n        var service_url = 'https://www.googleapis.com/freebase/v1/topic';\r\n        var params = {\r\n            'key': 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE',\r\n            'filter': filter\r\n            //  , 'filter': 'suggest'\r\n        }\r\n\r\n        $.getJSON(service_url + freebaseId + '?callback=?', params, function (response) {\r\n\r\n            callback(response);\r\n\r\n\r\n\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    var runQuery = function (q, callback) {\r\n\r\n        var API_KEY = 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE';\r\n        var service_url = 'https://www.googleapis.com/freebase/v1/mqlread';\r\n\r\n\r\n        var params = {\r\n            'key': API_KEY,\r\n            'query': JSON.stringify(q)\r\n        };\r\n        // console.log(params);\r\n\r\n        $.getJSON(service_url + '?callback=?', params, function (response) {\r\n\r\n            //var out = { results: [], error: undefined };\r\n            //if (response.result && response.result[q.propname]) {\r\n            //    out.result = response.result[q.propname];\r\n            //}\r\n\r\n            callback(response.result);\r\n        });\r\n\r\n    }\r\n\r\n    var getPersonData = function (freebaseId, callback) {\r\n\r\n        var filters = [];\r\n\r\n        filters.push(\r\n            {\r\n                filter: \"/visual_art/visual_artist\",\r\n                props: [\r\n                    \"associated_periods_or_movements\"\r\n                ]\r\n            }\r\n            )\r\n\r\n        filters.push({\r\n            filter: \"/influence/influence_node\",\r\n            props: [\"influenced\",\r\n                \"peers,/influence/peer_relationship/peers\",\r\n                \"influenced_by\"\r\n            ]\r\n\r\n        })\r\n\r\n        filters.push({\r\n            filter: \"/people/person\",\r\n            props: [\"date_of_birth\",\r\n                \"gender\",\r\n                \"nationality\",\r\n             //   \"parents\",\r\n                \"place_of_birth\",\r\n                \"places_lived,/people/place_lived/location\",\r\n            //    \"profession\",\r\n             //   \"religion\",\r\n             //   \"sibling_s,/people/sibling_relationship/sibling\",\r\n                \"quotations\"\r\n            ]\r\n\r\n        })\r\n\r\n        filters.push({\r\n            filter: \"/people/deceased_person\",\r\n            props: [\"date_of_death\"\r\n                , \"place_of_death\"]\r\n\r\n        })\r\n\r\n\r\n\r\n        var results = {};\r\n        var cnt = 0;\r\n   \r\n\r\n        var out = {};\r\n\r\n        angular.forEach(filters, function (f) {\r\n\r\n            getTopic(freebaseId, f.filter, function (result) {\r\n\r\n                angular.forEach(f.props, function (p) {\r\n\r\n                    arr = p.split(',');\r\n\r\n                    var propname = f.filter + \"/\" + arr[0];\r\n\r\n                \r\n                    if (!result || !result.property || !result.property[propname])\r\n                    { console.log('property not available: ' + propname); }\r\n                    else {\r\n                           var val = result.property[propname];\r\n\r\n                        if (val.valuetype == \"compound\") {\r\n                            vals = [];\r\n                            angular.forEach(val.values, function (v) {\r\n                                vals.push(v.property[arr[1]].values[0].text);\r\n                            });\r\n\r\n                            out[\"FB_\" + arr[0]] = vals;\r\n                        }\r\n                        else {\r\n\r\n                            vals = [];\r\n                            angular.forEach(val.values, function (v) {\r\n                                vals.push(v.text);\r\n                            });\r\n                            out[\"FB_\" + arr[0]] = vals;\r\n                        }\r\n\r\n                        if (arr[0] == \"date_of_death\" || arr[0] == \"place_of_death\" || arr[0] == \"place_of_birth\" || arr[0] == \"date_of_birth\" || arr[0] == \"gender\" || arr[0] == \"nationality\") {\r\n                            out[\"FB_\" + arr[0]] = out[\"FB_\" + arr[0]][0];\r\n                        }\r\n\r\n                      \r\n\r\n                    }\r\n\r\n                });\r\n\r\n                cnt += 1;\r\n        \r\n                if (cnt == filters.length) {\r\n                   \r\n                    callback(out);\r\n                }\r\n\r\n\r\n            });\r\n        });\r\n\r\n\r\n    }\r\n\r\n \r\n\r\n\r\n    return {\r\n\r\n       \r\n        getImage: function (freebaseId, width, height, callback) {\r\n\r\n            //first get image ids\r\n\r\n            getTopic(freebaseId, \"/common/topic/image\", function (prop) {\r\n                console.log(prop);\r\n                var imageId = prop.values[0].id;\r\n\r\n                var service_url = \"https://usercontent.googleapis.com/freebase/v1/image\";\r\n\r\n                var params = {\r\n                    'key': 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE'\r\n                    //maxwidth=225&maxheight=225&mode=fillcropmid\r\n                }\r\n                width = width || 225;\r\n                height = height || 400;\r\n\r\n                callback(service_url + imageId + \"?mode=fillcropmid&maxwidth=\" + width + \"&maxheight=\" + height);\r\n\r\n                //$.getJSON(service_url + imageId + '?callback=?', params, function (response) {\r\n\r\n                //    console.log(response);\r\n                //    callback(response);\r\n                //});\r\n\r\n\r\n            });\r\n\r\n        }\r\n        ,\r\n        getText: function (node, callback) {\r\n\r\n            var prop = '/common/topic/description';\r\n\r\n            var service_url = 'https://www.googleapis.com/freebase/v1/topic';\r\n            var params = {\r\n                'key': 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE',\r\n                'filter': prop\r\n                //  , 'filter': 'suggest'\r\n            }\r\n\r\n            $.getJSON(service_url + node.FB_ID + '?callback=?', params, function (response) {\r\n                //var out = { results: [], error: undefined };\r\n                //if (response.result && response.result[q.propname]) {\r\n                //    out.result = response.result[q.propname];\r\n                //}\r\n                // console.log(response);\r\n\r\n                if (!response[\"property\"])\r\n                {\r\n                    console.log('no blurb found for ' + node.Name)\r\n                    callback({});\r\n                }\r\n                else{\r\n\r\n                    console.log(response);\r\n\r\n                var blurb = response[\"property\"][prop].values[0].value;\r\n\r\n                var allowedLength = 20;\r\n\r\n                var indIs = blurb.indexOf(' is ');\r\n                var indWas = blurb.indexOf(' was ');\r\n                if (indIs > -1 && (indIs < indWas || indWas == -1)) { indWas = indIs; }\r\n                if (indWas === -1) { indWas = 0; };\r\n\r\n                if ($.inArray(\"Person\", node.labels) == -1) {\r\n                    indWas = 0;\r\n                }\r\n\r\n\r\n                var stopSpc = blurb.substring(allowedLength + indWas, blurb.length).indexOf('. ') + 1;\r\n                var stopCr = blurb.substring(allowedLength + indWas, blurb.length).indexOf('.\\n') + 1;\r\n\r\n                var stop = (stopCr>0 &&stopCr < stopSpc )? stopCr : stopSpc;\r\n\r\n                //console.log(blurb);\r\n                //console.log(indIs);\r\n                //console.log(indWas);\r\n                //console.log(stop);\r\n\r\n                var until = stop > 0 ? allowedLength + indWas + stop : blurb.length;\r\n\r\n\r\n                var shortname = node.Lookup;\r\n\r\n                if (shortname.replace(/ /g, '').toLowerCase() == node.Name.toLowerCase()) {\r\n                    shortname = node.name\r\n                }\r\n                else {\r\n                    shortname=shortname.replace(/([A-Z])/g, ' $1').replace(/^./, function (str) { return str.toUpperCase(); });\r\n                }\r\n\r\n                  \r\n\r\n\r\n\r\n                var short = (indWas > 0 ? (shortname) : \"\") + blurb.substring(indWas, until);\r\n                var full = blurb.substring(until, blurb.length);\r\n\r\n                if (short != full)\r\n                {\r\n                    callback(\r\n                    {\r\n                        \"FB_blurb\": short.trim(),\r\n                        \"FB_blurb_full\": full.trim()\r\n                   \r\n                    });\r\n                }\r\n                else{\r\n                    callback(\r\n                      {\r\n                          \"FB_blurb\": short.trim(),\r\n                          \"FB_blurb_full\": null\r\n                    })\r\n                }\r\n\r\n    \r\n            }\r\n\r\n            });\r\n\r\n        }\r\n        ,\r\n        getTopic: function (freebaseId, callback) {\r\n\r\n            getTopic(freebaseId, callback);\r\n\r\n        }\r\n        ,\r\n        getPersonData: function (freebaseId, callback) {\r\n\r\n\r\n            getPersonData(freebaseId, callback);\r\n\r\n        }\r\n         ,\r\n        getCreationData: function (freebaseId, callback) {\r\n\r\n            getData(freebaseId, creationQueries, callback);\r\n\r\n\r\n\r\n        }\r\n        ,\r\n        getId: function (node, callback) {\r\n\r\n      \r\n            var API_KEY = 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE';\r\n            var service_url = 'https://www.googleapis.com/freebase/v1/search';\r\n\r\n            var ispicture = $.inArray('Picture', node.labels) ;\r\n\r\n            var params = {\r\n                'key': API_KEY,\r\n                'query': ispicture ? node.Title || node.Name : node.Lookup,\r\n               \r\n                'limit': 100\r\n            };\r\n\r\n            if ($.inArray(\"Person\", node.labels) > -1) {\r\n                params.filter = \"(any type:/people/person type:/people/deceased_person type:/book/author type:/visual_art/visual_artist )\";\r\n\r\n                //if ($.inArray(\"Painter\", node.labels) > -1) {\r\n                //    params.domain = \"/visual_art\";\r\n                //}\r\n\r\n            }\r\n            else if ($.inArray(\"Group\", node.labels) > -1 || $.inArray(\"Period\", node.labels) > -1 ) {\r\n\r\n                params.filter = \"(any type:/visual_art/art_period_movement type:/architecture/architectural_style  type:/time/event   type:/book/book_subject)\";\r\n     \r\n            }\r\n            else if ($.inArray(\"Provenance\", node.labels) > -1) {\r\n\r\n            \r\n                params.filter = \"(any type:/people/ethnicity type:/location/country )\";\r\n              //  params.query = node.Name + \" people\";\r\n            }\r\n            else if ( ispicture)\r\n            {\r\n                params.domain = \"/visual_art\";\r\n            }\r\n\r\n            var out = { id: undefined, error: undefined };\r\n\r\n            $.getJSON(service_url + '?callback=?', params, function (response) {\r\n\r\n                $(response.result).each(function (i, e) {\r\n\r\n\r\n                    if (e.name === node.Name || e.name == node.Wikipagename || e.name.indexOf(node.Name) > -1 || e.name.indexOf(node.Lookup) > -1)\r\n                        {\r\n                        out = e;\r\n                        return false;\r\n                    }\r\n                    //if (e.notable && (e.notable.name === type || e.notable.name.indexOf('Art') > -1)) {\r\n                    //    out = e.mid;\r\n                    //    return false;\r\n                    //}\r\n                });\r\n\r\n     \r\n                out.response = response.result;\r\n\r\n                callback(out);\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n    \r\n        \r\n    })\r\n    .directive('freebase', ['freebase.service', 'neo', function (service, neo) {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/freebase/node.freebase.html',\r\n        scope: {\r\n            node: '=',\r\n            active:'='\r\n        },\r\n        link: function ($scope) {\r\n\r\n            var getPersonData = function (node, callback) {\r\n\r\n                service.getPersonData(node.FB_ID, function (data) {\r\n\r\n                    $.extend(node, data);\r\n                    if (node.FB_date_of_birth && !node.YearFrom) {\r\n                        node.YearFrom = parseInt(node.FB_date_of_birth.split('-')[0]);\r\n                    }\r\n                    if (node.FB_date_of_death && !node.YearTo) {\r\n                        node.YearTo = parseInt(node.FB_date_of_death.split('-')[0]);\r\n                    }\r\n                    callback(node);\r\n\r\n                });\r\n\r\n            }\r\n\r\n            var getBlurb = function (node, callback) {\r\n\r\n\r\n                service.getText(node, function (blurb) {\r\n\r\n                    $scope.$apply(function () {\r\n                        $.extend(node, blurb);\r\n                        if (node.FB_blurb && !node.Description) {\r\n                            node.Description = node.FB_blurb;\r\n                        }\r\n                        if (node.FB_blurb_full && !node.Text) {\r\n                            node.Text = node.FB_blurb_full;\r\n                        }\r\n                    });\r\n\r\n                    callback(node);\r\n\r\n                });\r\n\r\n            }\r\n\r\n\r\n            var getData = function (node, blurbOnly) {\r\n\r\n                getBlurb(node, function (updated) {\r\n\r\n                    if ($.inArray(\"Person\", updated.labels) > -1 && !blurbOnly) {\r\n\r\n                        getPersonData(updated, function (updatedPerson) {\r\n\r\n                            console.dir(updatedPerson);\r\n                            neo.saveProps(updatedPerson)\r\n                             .then(function (nid) {\r\n                                 console.log(nid + \" saved\");\r\n                             });\r\n                        });\r\n                    }\r\n                    else {\r\n\r\n                        neo.saveProps(updated)\r\n                         .then(function (nid) {\r\n                             console.log(nid + \" saved\");\r\n                         });\r\n                    }\r\n\r\n                })\r\n\r\n            }\r\n\r\n            $scope.reselect = function (node, mid, name) {\r\n\r\n                $scope.clear(node);\r\n\r\n                node.FB_ID = mid;\r\n                node.FB_name = name;\r\n                getData(node);\r\n\r\n\r\n            }\r\n\r\n            $scope.clear = function (node) {\r\n\r\n                node.FB_ID = null;\r\n\r\n                if (node.Text === node.FB_blurb_full) {\r\n                    delete node.Text;\r\n                }\r\n\r\n                if (node.Description === node.FB_blurb) {\r\n                    delete node.Description\r\n                }\r\n\r\n                if (node.FB_date_of_birth && node.YearFrom == parseInt(node.FB_date_of_birth.split('-')[0])) {\r\n                    delete node.YearFrom;\r\n                }\r\n\r\n                if (node.FB_date_of_death && node.YearTo == parseInt(node.FB_date_of_death.split('-')[0])) {\r\n                    delete node.YearTo;\r\n                }\r\n\r\n                for (var prop in node) {\r\n                    if (prop.indexOf('FB_') == 0) {\r\n                        delete node[prop];\r\n                    }\r\n                }\r\n\r\n                neo.saveProps(node)\r\n                           .then(function (nid) {\r\n                               console.log(nid + \" saved\");\r\n                           });\r\n\r\n            }\r\n          \r\n            var loaded = false;\r\n\r\n            var getFreebase = function () {\r\n\r\n                service.getId($scope.node, function (result) {\r\n                   \r\n                    $scope.$apply(function () {\r\n                        $scope.disambiguation = result.response;\r\n                        loaded = true;\r\n                    })\r\n\r\n                });\r\n                \r\n\r\n            }\r\n\r\n            $scope.$watch('node', function (node) {\r\n\r\n                if (node) {\r\n\r\n                    loaded = false;\r\n\r\n                    if ($scope.active) {\r\n                        getFreebase();\r\n                    }\r\n                  \r\n                }\r\n            });\r\n\r\n            $scope.$watch('active', function (active) {\r\n\r\n                if (active && $scope.node && !loaded) {\r\n\r\n                    getFreebase();\r\n                }\r\n\r\n\r\n            })\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.node.graphpanel',['neograph.neo', 'neograph.utils'])\r\n    .directive('nodegraphpanel', ['neo', 'utils', function (neo, utils) {\r\n        return {\r\n            replace: true,\r\n            restrict: 'E',\r\n            templateUrl: 'app/node/graphpanel/node.graphpanel.html',\r\n            scope: {\r\n                node: '='\r\n                , active: '='\r\n                ,window: '=?'\r\n                ,width: '=?'\r\n                ,height: '=?'\r\n            },\r\n            link: function ($scope, $element, $attrs) {\r\n                \r\n                \r\n                \r\n                \r\n                var network;\r\n                \r\n                var graph = {\r\n                    nodes: new vis.DataSet(),\r\n                    edges: new vis.DataSet()\r\n                };\r\n                \r\n                $scope.view = utils.newView('NodeGraph', 'NodeGraph');\r\n                \r\n                $scope.view.queryGenerator = {\r\n                    type: \"nodeGraph\",\r\n                    options: { node: $scope.node }\r\n                }\r\n                \r\n                $scope.$watch('node', function (n) {\r\n                    $scope.view.queryGenerator.options = { node: n };\r\n                })\r\n                \r\n                $scope.w = 200;\r\n                $scope.h = 200;\r\n                \r\n                $scope.$watch('active', function (active) {\r\n                    if (active && !network) {\r\n                        \r\n                    \r\n                        if ($scope.width && $scope.height) {\r\n                              $scope.w = $scope.width;\r\n                            $scope.h = $scope.height;\r\n                            \r\n\r\n                        }\r\n                        else if ($scope.window) {\r\n                          $scope.w = $scope.window.width;\r\n                            $scope.h = $scope.window.height - 170;\r\n                        }\r\n                        \r\n                        \r\n                        network = new vis.Network($element.find('.graphContainer')[0], graph, utils.graphOptions);\r\n                        network.setSize(($scope.w) + \"px\", ($scope.h) + \"px\");\r\n                        //fit to screen on resize\r\n                        network.on('resize', function (params) {\r\n                            network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n                        });\r\n                        \r\n                 \r\n                    //network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n                    }\r\n                });\r\n                \r\n                \r\n                \r\n                \r\n                $scope.$watch('view.data', function (data) {\r\n                    if ($scope.active) {\r\n                        console.log('drawing new graph');\r\n                        graph.nodes.clear();\r\n                        graph.edges.clear();\r\n                        var gArr = utils.toGraphData(data);\r\n                        graph.nodes.add(gArr.nodes);\r\n                        graph.edges.add(gArr.edges);\r\n                    }\r\n\r\n                });\r\n                \r\n                \r\n                $scope.$watch('window', function (w) {\r\n                    \r\n                    if (network && w) {\r\n                        network.setSize(($scope.window.width) + \"px\", ($scope.window.height - 170) + \"px\");\r\n                        network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n                    }\r\n              \r\n             \r\n                });\r\n                \r\n                \r\n                $scope.$watch('width', function () {\r\n                    \r\n                    if (network) {\r\n                        network.setSize(($scope.width) + \"px\", ($scope.height - 170) + \"px\");\r\n                        network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n                    }\r\n              \r\n             \r\n                });\r\n                $scope.$watch('height', function () {\r\n                    \r\n                    if (network) {\r\n                        network.setSize(($scope.width) + \"px\", ($scope.height - 170) + \"px\");\r\n                        network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n                    }\r\n              \r\n             \r\n                });\r\n   \r\n\r\n\r\n            }\r\n        }\r\n    }])","angular.module('node.graphTypes',['neograph.neo'])\r\n.directive('graphTypes', function () {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/graphtypes/node.graphTypes.html',\r\n        scope: {\r\n            node: '=',\r\n            window: '='\r\n        }\r\n        ,\r\n        link: function ($scope) {\r\n\r\n\r\n\r\n\r\n            $scope.$watch('node', function (node) {\r\n\r\n\r\n                if (node) {\r\n\r\n                    var querys = [];\r\n\r\n                    var Lookup = node.Lookup;\r\n\r\n\r\n                    //if ($.inArray('User', node.labels) > -1 || $.inArray('Picture', node.labels) > -1 || $.inArray('Favourite', node.labels) > -1) {\r\n                    //    querys.push(\r\n                    //                          {\r\n                    //                              name: \"All immediate relationships\",\r\n                    //                              q: \"MATCH (c)-[r]-(d) where ID(c) = \" + node.id + \" return c,d,r\"\r\n                    //                          })\r\n                    //}\r\n                    //else {\r\n\r\n                    //    querys.push(\r\n                    //                          {\r\n                    //                              name: \"All immediate relationships\",\r\n                    //                              q: \"MATCH (c)-[r]-(d:Global) where ID(c) = \" + node.id + \" return c,d,r\"\r\n                    //                          })\r\n\r\n                    //}\r\n\r\n\r\n                    if ($.inArray(\"Provenance\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Provenance\",\r\n                                q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n                            })\r\n                    }\r\n\r\n                    if ($.inArray(\"Period\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Period\",\r\n                                q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n                            })\r\n                    }\r\n\r\n                    if ($.inArray(\"Theme\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Theme\",\r\n                                q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n                            })\r\n                    }\r\n\r\n                    if ($.inArray(\"Person\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Outbound Influence\",\r\n                              //  q: \"MATCH (c {Lookup:'\" + Lookup + \"'})-[r]->(d:Painter)  -[s]->(e:Painter)  -[t]->(f:Painter) return c,d,e,f,r,s,t\",\r\n                                q:\"MATCH (c {Lookup:'\" + Lookup + \"'})-[r]->(d:Painter) with c,d,r optional  match(d) -[s]->(e:Painter) return c,d,r,s,e \",\r\n                                connectAll: true\r\n                            })\r\n\r\n                        querys.push(\r\n                          {\r\n                              name: \"Inbound Influence\",\r\n                          //    q: \"MATCH (c {Lookup:'\" + Lookup + \"'})<-[r]-(d:Painter)  <-[s]-(e:Painter)  <-[t]-(f:Painter) return c,d,e,f,r,s,t\",\r\n                              q: \"MATCH (c {Lookup:'\" + Lookup + \"'})<-[r]-(d:Painter) with c,d,r optional  match(d) <-[s]-(e:Painter) return c,d,r,s,e \",\r\n                              connectAll: true\r\n                          })\r\n\r\n                    }\r\n\r\n                    if ($.inArray(\"Group\", node.labels) > -1) {\r\n\r\n                        querys.push({\r\n                            name: 'Group',\r\n                            q: \"match (n {Lookup:'\" + Lookup + \"'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) and not m:Provenance and not p:Provenance return n,r,m,s,p\"\r\n    ,\r\n                            connectAll: true\r\n                        });\r\n\r\n                    }\r\n\r\n\r\n                    if ($.inArray(\"Iconography\", node.labels) > -1) {\r\n\r\n\r\n                        querys.push({\r\n                            name: 'Iconography',\r\n                            q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  and not d.Lookup='\" + Lookup + \"' and (d:\" + Lookup + \" or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r\"\r\n                          ,\r\n                            connectAll: true\r\n                        });\r\n\r\n                    }\r\n\r\n                    if (!node.temp.isPicture && node.YearFrom && node.YearTo) {\r\n\r\n                        var yq = \"MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and \";\r\n                        yq += \"((c.YearTo >= \" + node.YearFrom + \" and c.YearTo<= \" + node.YearTo + \") or (c.YearFrom >= \" + node.YearFrom + \" and c.YearFrom<= \" + node.YearTo + \"))\";\r\n                        yq += \"and ((d.YearTo >= \" + node.YearFrom + \" and d.YearTo<= \" + node.YearTo + \") or (d.YearFrom >= \" + node.YearFrom + \" and d.YearFrom<= \" + node.YearTo + \"))\";\r\n                        yq += \" return c,d,r\";\r\n                        querys.push({\r\n                            name: 'YearFromYearTo',\r\n                            q: yq\r\n\r\n                         ,\r\n                            connectAll: true\r\n                        });\r\n\r\n                    }\r\n\r\n                    angular.forEach(querys, function (query) {\r\n\r\n                        query.view = node.Lookup + \" - \" + query.name;\r\n                        query.type = \"Graph\";\r\n\r\n                    })\r\n\r\n\r\n                    $scope.querys = querys;\r\n\r\n\r\n                }\r\n                else {\r\n\r\n                    $scope.querys = [];\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n})","angular.module('node.imageRelationships',['neograph.neo'])\r\n    .directive('imageRelationships', ['neo', function (neo) {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: '/app/node/imageRelationships/node.imageRelationships.html',\r\n        scope: {\r\n            node: '=',\r\n            query: '=',\r\n            window:'='\r\n        }\r\n        ,\r\n        link: function ($scope) {\r\n\r\n         \r\n\r\n\r\n            $scope.$watch('node', function (node) {\r\n\r\n\r\n                if (node) {\r\n\r\n\r\n\r\n                    var querys = [];\r\n\r\n                    querys.push(\r\n                         {\r\n                             name: \"Linked pictures\",\r\n                             q: \"MATCH (c)-[r]-(d:Picture) where ID(c) = \" + node.id + \" return d\"\r\n                         })\r\n\r\n\r\n                    if ( node.YearFrom || node.YearTo) {\r\n                        var yq;\r\n\r\n                        if (node.YearFrom && node.YearTo) {\r\n                            yq = {\r\n                                q: \"MATCH (c:Picture) where  (c.YearTo >= \" + node.YearTo + \" and c.YearTo<= \" + node.YearTo + \") or (c.YearFrom >= \" + node.YearFrom + \" and c.YearFrom<= \" + node.YearFrom + \") return c\"\r\n                            }\r\n                        }\r\n                        else if (node.YearTo) {\r\n                            yq = {\r\n                                q: \"MATCH (c:Picture) where  (c.YearTo = \" + node.YearTo + \" ) or (c.YearFrom = \" + node.YearTo + \" ) return c\"\r\n                            };\r\n                        }\r\n                        else if (node.YearFrom) {\r\n                            yq = {\r\n                                q: \"MATCH (c:Picture) where  (c.YearTo = \" + node.YearFrom + \") or (c.YearFrom = \" + node.YearFrom + \" ) return c\"\r\n                            };\r\n                        }\r\n                        yq.name = \"Contemporaneous\";\r\n                        yq.type = \"Grid\";\r\n\r\n\r\n                        yq.preview = yq.q + \" limit 3\";\r\n                        querys.push(yq);\r\n\r\n                    }\r\n\r\n\r\n                    angular.forEach(node.labels, function (label) {\r\n\r\n                        if (label != \"Picture\" && label != \"Painting\") {\r\n                            querys.push(\r\n                          {\r\n                              isLabel:true,\r\n                              name:  label,\r\n                              q: \"MATCH (c:Picture:\" + label + \") return c\",\r\n                              preview: \"MATCH (c:Picture:\" + label + \")  where ID(c)<>\" + node.id + \"  return c limit 3\",\r\n                              view: label,\r\n                              type:\"Grid\",\r\n                              queryGenerator: { id: \"nodeFilter\", options: { node: { Lookup: label } } }\r\n                          })\r\n\r\n                        }\r\n\r\n                    })\r\n\r\n                  \r\n                    //if (node.YearFrom && node.YearTo) {\r\n\r\n                    //    var yq = \"MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and \";\r\n                    //    yq += \"((c.YearTo >= \" + node.YearFrom + \" and c.YearTo<= \" + node.YearTo + \") or (c.YearFrom >= \" + node.YearFrom + \" and c.YearFrom<= \" + node.YearTo + \"))\";\r\n                    //    yq += \"and ((d.YearTo >= \" + node.YearFrom + \" and d.YearTo<= \" + node.YearTo + \") or (d.YearFrom >= \" + node.YearFrom + \" and d.YearFrom<= \" + node.YearTo + \"))\";\r\n                    //    yq += \" return c,d,r\";\r\n                    //    querys.push({\r\n                    //        name: 'YearFromYearTo',\r\n                    //        q: yq\r\n\r\n                    //     ,\r\n                    //        connectAll: true\r\n                    //    });\r\n\r\n                    //}\r\n\r\n\r\n\r\n                    $scope.querys = querys;\r\n\r\n                    angular.forEach(querys,function(query){\r\n                    \r\n                        neo.getGraph(query.preview || query.q)\r\n                       .then(function (g) {\r\n                                \r\n                           query.hasData = !$.isEmptyObject(g.nodes);\r\n                        \r\n\r\n                           query.data = g;\r\n                       });\r\n                    });\r\n\r\n\r\n                    //   console.log(querys);\r\n\r\n                }\r\n                else {\r\n\r\n                    $scope.querys = [];\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n}])","angular.module('neograph.node.images',['neograph.neo'])\r\n    .directive('nodeimages', ['neo', function (neo) {\r\n    return {\r\n        replace: true,\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/images/node.images.html',\r\n        scope: {\r\n            node: '='\r\n            , active: '='\r\n            , updatemasonry:'=' //required to pass on to images. if defined then masonry not used\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n            $scope.images = [];\r\n\r\n            var loaded = false;\r\n\r\n            //load images on active change or on node change if active\r\n            $scope.$watch('active', function (active) {\r\n\r\n                if ($scope.node && active && !loaded) {\r\n                    getImages();\r\n                }\r\n            });\r\n\r\n            $scope.$watch('node', function (node) {\r\n                loaded = false;\r\n                if (!$scope.active) {\r\n                    $scope.images = [];\r\n                }\r\n                if (node && $scope.active) {\r\n                    getImages();\r\n                }\r\n            });\r\n\r\n            var getImages = function () {\r\n\r\n                neo.getImages($scope.node).then(function (images) {\r\n                    $scope.images = images;\r\n                    loaded = true;\r\n                })\r\n\r\n            }\r\n\r\n            $scope.openGridTab = function (node) {\r\n\r\n                $scope.publish(\"query\", {\r\n                    view: node.Lookup,\r\n                    type: \"Grid\",\r\n                    queryGenerator: { id: \"nodeFilter\", options: { node: node } }\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.node.multiple',['neograph.neo', 'neograph.utils'])\r\n    .directive('multiple', ['neo', 'utils', function (neo, utils) {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/multiple/node.multiple.html',\r\n        scope: {\r\n            nodes: '='\r\n        },\r\n        link: function ($scope) {\r\n\r\n            $scope.$watch('nodes', function (nodes) {\r\n\r\n                if (nodes) {\r\n                    var allLabels = nodes.map(function (node) {\r\n                        return node.labels;\r\n                    });\r\n\r\n                    $scope.labels = allLabels.shift().filter(function (v) {\r\n                        return allLabels.every(function (a) {\r\n                            return a.indexOf(v) !== -1;\r\n                        });\r\n                    });\r\n\r\n                    $scope.originalLabels = angular.copy($scope.labels);//store for saving so we know what to change\r\n\r\n                }\r\n\r\n            });\r\n\r\n            $scope.addLabel = function (item) {\r\n\r\n                if ($scope.labels.indexOf(item.Label) === -1) {\r\n                    $scope.labels.push(item.Label);\r\n                }\r\n            }\r\n            $scope.removeLabel = function (label) {\r\n\r\n                var ind = $scope.labels.indexOf(label);\r\n                if (ind > -1) {\r\n                    $scope.labels.splice(ind, 1);\r\n                }\r\n\r\n            }\r\n\r\n            $scope.save = function () {\r\n                neo.saveMultiple({\r\n                    nodes: $scope.nodes,\r\n                    labels: $scope.labels,\r\n                    originalLabels: $scope.originalLabels\r\n                });\r\n            }\r\n\r\n            $scope.restore = function () {\r\n                var restored = [];\r\n                angular.forEach($scope.nodes, function (node) {\r\n                    neo.restoreNode(node).then(function () {\r\n                        restored.push(node);\r\n                        if (restored.length === $scope.nodes.length) {\r\n                            $scope.publish(\"restored\", { selection: { nodes: restored } });\r\n                            $scope.selection.multiple = undefined;\r\n                            $scope.tabs = [];\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            $scope.delete = function () {\r\n                var deleted = [];\r\n                angular.forEach($scope.nodes, function (node) {\r\n                    neo.deleteNode(node).then(function () {\r\n                        deleted.push(node);\r\n                        if (deleted.length === $scope.nodes.length) {\r\n                            $scope.publish(\"deleted\", { selection: { nodes: deleted } });\r\n                            $scope.selection.multiple = undefined;\r\n                            $scope.tabs = [];\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            $scope.destroy = function () {\r\n                var deleted = [];\r\n                angular.forEach($scope.nodes, function (node) {\r\n                    neo.destroyNode(node).then(function () {\r\n                        deleted.push(node);\r\n                        if (deleted.length === $scope.nodes.length) {\r\n                            $scope.publish(\"deleted\", { selection: { nodes: deleted } });\r\n                            $scope.selection.multiple = undefined;\r\n                            $scope.tabs = [];\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n          \r\n\r\n            //$scope.selection.multiple = new (function (nodes, labels) {\r\n            //    var self = this;\r\n            //    this.nodes = nodes;\r\n            //    this.labels = labels;\r\n             \r\n\r\n             \r\n\r\n\r\n            //})(params.selection.nodes, labels);\r\n\r\n        }\r\n    }\r\n}]);","angular.module('neograph.node.wikipedia',['neograph.neo'])\r\n    .factory('wikiservice',function(){\r\n       \r\n       var wikiTabs = function (data,page) {\r\n\r\n        var tabs = [];\r\n\r\n        if (data.parse) {\r\n\r\n       //     console.log(data.parse.text[\"*\"]);\r\n            var $wikiDOM = $(\"<document>\" + data.parse.text[\"*\"] + \"</document>\");\r\n\r\n            // handle redirects\r\n            if ($wikiDOM.find('ul.redirectText').length > 0) {\r\n              \r\n                tabs = { redirect: $wikiDOM.find(\"ul.redirectText li a\").attr(\"title\") };\r\n\r\n                //$wikiDOM.find('li:contains(\"REDIRECT\") a').css(\"cursor\", \"pointer\");\r\n                //$wikiDOM.find('li:contains(\"REDIRECT\") a').each(function () {\r\n\r\n                //    $(this).replaceWith($(this).text());\r\n\r\n                //});\r\n\r\n                //if ($wikiDOM.find('li:contains(\"REDIRECT\")').length == 1) {\r\n                //    // self.getItem().wikiPageName = ;\r\n                //    var redirectTo = $wikiDOM.find('li:contains(\"REDIRECT\")').text().replace('REDIRECT', '').trim();\r\n\r\n                //    service.getWiki(redirectTo).done(function (data) {\r\n                //        self.populateWiki(data);\r\n                //    });\r\n\r\n\r\n                //}\r\n                //else {\r\n\r\n                //    self.wiki($wikiDOM);\r\n                //    self.loaded(true);\r\n                //    self.loading(false);\r\n\r\n\r\n                //}\r\n\r\n            }\r\n            else {\r\n\r\n                var images = $(\"<div></div>\");\r\n\r\n\r\n                $wikiDOM.find(\".image\").each(function (i, e) {\r\n\r\n                    $(e).attr(\"href\", $(e).attr(\"href\").replace(\"/wiki/\", \"https://en.wikipedia.org/wiki/\" + page.replace(\" \", \"_\") + \"#/media/\"))\r\n                    .attr(\"target\", \"_blank\").css({\"padding-right\": \"5px\",\"padding-bottom\": \"5px\"});\r\n\r\n                });\r\n\r\n\r\n                $wikiDOM.find(\".image\").appendTo(images);\r\n\r\n               \r\n\r\n                $wikiDOM.find(\"p\").css({ \"margin-bottom\": \"4px\", \"clear\": \"left\" });\r\n\r\n\r\n                //$wikiDOM.find(\"p,.thumb,.thumbinner\").css({ \"width\": \"340px\" });\r\n                $wikiDOM.find(\"p,.thumb,.thumbinner\").css({ \"width\": \"100%\" });\r\n\r\n                // $wikiDOM.find(\".gallery.p,.gallery.thumb,.gallery.thumbinner\").css({ \"width\": \"\" });\r\n\r\n                // $wikiDOM.find(\"h2,h3\").css({ \"margin-top\": \"4px\", \"float\": \"left\", \"clear\": \"left\" });\r\n                //$wikiDOM.find(\"h2,h3,h4\").css({ \"margin-top\": \"4px\", \"margin-bottom\": \"2px\", \"float\": \"left\", \"clear\": \"left\", \"width\": \"340px\", \"overflow\": \"hidden\" });\r\n                $wikiDOM.find(\"h2,h3,h4\").css({ \"margin-top\": \"4px\", \"margin-bottom\": \"2px\", \"float\": \"left\", \"clear\": \"left\", \"width\": \"100%\", \"overflow\": \"hidden\" });\r\n                $wikiDOM.find(\"#toc\").remove();\r\n                $wikiDOM.find(\".editsection\").remove();\r\n                $wikiDOM.find(\".magnify\").remove();\r\n                $wikiDOM.find(\".reflist\").remove();\r\n                $wikiDOM.find(\"img\").css({ \"display\": \"block\", \"float\": \"left\", \"margin-right\": \"3px\", \"margin-bottom\": \"3px\" });\r\n                $wikiDOM.find(\".thumb,.thumbinner\").css({ \"float\": \"left\", \"margin-right\": \"3px\", \"margin-bottom\": \"3px\" });\r\n                $wikiDOM.find(\".thumbcaption\").css({ \"font-size\": \"11px\" });\r\n                $wikiDOM.find(\".plainlinks\").remove();\r\n                $wikiDOM.find(\"#navbox\").remove();\r\n                $wikiDOM.find(\".rellink\").remove();\r\n                $wikiDOM.find(\".references\").remove();\r\n                $wikiDOM.find(\".IPA\").remove();\r\n                $wikiDOM.find(\"sup\").remove();\r\n                //$wikiDOM.find(\"dd,blockquote\").css({ \"margin\": \"10px\", \"width\": \"340px\", \"font-size\": \"11px\" });\r\n                $wikiDOM.find(\"dd,blockquote\").css({ \"margin\": \"0px\", \"width\": \"\", \"font-size\": \"11px\", \"margin-bottom\": \"10px\", \"margin-top\": \"7px\" });\r\n                $wikiDOM.find(\"blockquote p\").css({ \"font-size\": \"11px\" });\r\n                $wikiDOM.find(\".navbox, .vertical-navbox\").remove(); //nb this has interesting stuff in it\r\n                $wikiDOM.find(\"#persondata\").remove();\r\n                $wikiDOM.find(\"#Footnotes\").parent().remove();\r\n                $wikiDOM.find(\"#References\").parent().remove();\r\n                $wikiDOM.find(\"#Bibliography\").parent().remove();\r\n                $wikiDOM.find(\".refbegin\").remove();\r\n                $wikiDOM.find(\".dablink\").remove();\r\n                $wikiDOM.find(\"small\").remove(); //a bit too radical?\r\n                $wikiDOM.find(\"img[alt='Wikisource-logo.svg'], img[alt='About this sound'], img[alt='Listen']\").remove();\r\n                $wikiDOM.find(\".mediaContainer\").remove();\r\n                //remove links - todo:leave external links ?\r\n                $wikiDOM.find(\"a\").each(function () { $(this).replaceWith($(this).html()); })\r\n\r\n                $wikiDOM.find(\".gallery\").find(\"p\").css({ \"width\": \"\", \"font-size\": \"11px\", \"float\": \"left\", \"clear\": \"left\" });\r\n                $wikiDOM.find(\".gallery\").find(\".thumb\").css({ \"width\": \"\" });\r\n                $wikiDOM.find(\".gallerybox\").css(\"height\", \"220px\");\r\n                $wikiDOM.find(\".gallerybox\").css(\"float\", \"left\");\r\n\r\n                $wikiDOM.find(\"table\").css({ \"background\": \"none\", \"width\": \"\", \"max-width\": \"\", \"color\": \"\" });\r\n\r\n                $wikiDOM.find(\".gallery\").remove();\r\n                $wikiDOM.find(\"#gallery\").parent().remove();\r\n                $wikiDOM.find(\"#notes\").parent().remove();\r\n                $wikiDOM.find(\"#sources\").parent().remove();\r\n\r\n                //radical - remoces all tables\r\n                $wikiDOM.find(\"table\").remove();\r\n\r\n\r\n                $wikiDOM.find(\"h1,h2,h3,h4\").next().css({ \"clear\": \"left\" });\r\n\r\n                //remove description lists\r\n                $wikiDOM.find(\"dl\").remove();\r\n                //removes images\r\n                $wikiDOM.find(\".thumb\").remove();\r\n\r\n\r\n                $wikiDOM.find(\"ul,.cquote\").css({ \"float\": \"left\", \"clear\": \"left\" });\r\n\r\n\r\n\r\n                $wikiDOM.find(\".infobox, .vcard\").remove();\r\n                $wikiDOM.find(\".thumbimage\").css({ \"max-width\": \"150px\", \"height\": \"auto\" });\r\n\r\n                $wikiDOM.find(\".mw-editsection\").remove();\r\n\r\n\r\n                $wikiDOM.html($wikiDOM.html().replace('()', ''));\r\n                $wikiDOM.html($wikiDOM.html().replace('(; ', '('));\r\n\r\n\r\n\r\n                //    $wikiDOM.prepend(\"<h2>\" + self.query() + \"</h2>\");\r\n\r\n\r\n                $wikiDOM.find(\"h2\").css({ \"cursor\": \"pointer\", \"color\": \"rgba(0,85,128,1)\", \"font-size\": \"20px\" });\r\n                $wikiDOM.find(\"h3\").css({ \"font-size\": \"18px\" });\r\n                $wikiDOM.find('#Gallery').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#See_also').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Notes').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#External_links').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Selected_works').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Sources').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Other_reading').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Further_reading').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Resources').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Further_reading_and_sources').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#List_of_paintings').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Self-portraits').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Selected_paintings').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#References_and_sources').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Partial_list_of_works').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Notes_and_references').parent().nextUntil(\"h2\").andSelf().remove();\r\n\r\n                $wikiDOM.find('[id^=Selected_works]').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('[id^=Books]').parent().nextUntil(\"h2\").andSelf().remove();\r\n                //    $wikiDOM.find('#Books/Essays').parent().nextUntil(\"h2\").andSelf().remove();\r\n\r\n\r\n\r\n                //var $menu = $tabs.find(\"#tabmenu\");\r\n                //var $content = $tabs.find(\"#tabcontent\");\r\n\r\n                var $introTab = $(\"<div></div>\");\r\n                $wikiDOM.find(\"p:first\").nextUntil(\"h2\").andSelf().appendTo($introTab);\r\n                if ($introTab.text().indexOf(\"Redirect\") === -1 && $introTab.text().indexOf(\"may refer to\") === -1) {\r\n                    $introTab.find('ul').remove();\r\n                }\r\n                if ($introTab.html()) {\r\n                    tabs.push({\r\n                        header: \"Summary\",\r\n                        content: $introTab.html().replace('/; /g', '')\r\n                    });\r\n                }\r\n\r\n\r\n                $wikiDOM.find(\"h2\").each(function (i, e) {\r\n\r\n                    let $tab = $(\"<div></div>\");\r\n                    $(e).nextUntil(\"h2\").appendTo($tab);\r\n                    if ($tab.html()) {\r\n\r\n                        tabs.push({\r\n                            header: $(e).text(),\r\n                            content: $tab.html()\r\n                        });\r\n                    }\r\n\r\n                });\r\n\r\n                if (images.html()) {\r\n\r\n                    images.find(\"img\").css({ \"width\": \"250px\", \"marginBottom\": \"5px\" });\r\n\r\n                    tabs.push({\r\n                        header: \"Images\",\r\n                        content: images.html()\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return tabs;\r\n\r\n    }\r\n        \r\n        \r\n       var getWiki = function (page, callback) {\r\n\r\n            $.getJSON('http://en.wikipedia.org/w/api.php?action=parse&format=json&callback=?',\r\n                  {\r\n                      page: page,\r\n                      prop: 'text',\r\n                      //prop: 'wikitext',\r\n                      uselang: 'en'\r\n                  },\r\n                  function (data) {\r\n                      console.log(data);\r\n                      var tabs = wikiTabs(data, page);\r\n\r\n                      if (tabs.redirect) {\r\n\r\n                          getWiki(tabs.redirect, callback);\r\n\r\n                      }\r\n                      else {\r\n                          callback(tabs);\r\n                      }\r\n\r\n\r\n                  });\r\n       } \r\n                 \r\n                 \r\n        return {\r\n\r\n            getPage: function (page, callback) {\r\n\r\n                getWiki(page, callback);\r\n\r\n            }\r\n        }\r\n        \r\n        \r\n    })\r\n    .directive('wikipedia', ['wikiservice', 'neo',function (wikiservice,neo) {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/wikipedia/node.wikipedia.html',\r\n        scope: {\r\n            node: '=',\r\n            window: '=',\r\n            active:'='\r\n        },\r\n        link: function ($scope,$element) {\r\n\r\n            $scope.tabs = [];\r\n\r\n            $scope.setActiveTab = function (tab) {\r\n                $scope.activeTab = tab;\r\n            }\r\n       \r\n            var loaded = false;\r\n            $scope.$watch('node', function (node) {\r\n                if (node) {\r\n                    loaded = false;\r\n                    $scope.page = node.Wikipagename || node.Name || node.Title;\r\n                }\r\n\r\n            });\r\n\r\n            $scope.savePage = function () {\r\n\r\n                $scope.node.Wikipagename = $scope.page;\r\n                neo.saveWikipagename($scope.node).then(function (node) {\r\n                    $scope.page = node.Wikipagename;\r\n                });\r\n\r\n            }\r\n\r\n            var getPage = function () {\r\n\r\n                wikiservice.getPage($scope.page, function (tabs) {\r\n\r\n                    $scope.tabs = tabs;\r\n                    $scope.activeTab = $scope.tabs[0];\r\n                    $scope.$digest();\r\n                    $($element).find('.wikidropdown').dropdown();\r\n                    loaded = true;\r\n                });\r\n            }\r\n\r\n            $scope.$watch('page', function (page) {\r\n\r\n                if (page && $scope.active) {\r\n\r\n                    getPage();\r\n                }\r\n                else {\r\n                    $scope.tabs = [];\r\n                }\r\n\r\n            });\r\n\r\n            $scope.$watch('active', function (active) {\r\n\r\n                if ($scope.page && active && !loaded) {\r\n\r\n                    getPage();\r\n\r\n                }\r\n\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.query.generator.favouritesFilter',['neograph.neo'])\r\n.directive('favouritesFilter', ['neo', function (neo) {\r\n\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/query/generator/favouritesFilter.html',\r\n        scope: {\r\n            options: '='\r\n            ,\r\n            generated: '='\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n\r\n            $scope.filters = [];\r\n            $scope.node = {};\r\n            var labels = [];\r\n            $scope.$watch('options', function (options) {\r\n                if (options) {\r\n                    $scope.node = options.user;\r\n                }\r\n            });\r\n\r\n            $scope.$watch('node', function (user) {\r\n                load();\r\n            });\r\n\r\n            var load = function () {\r\n                if ($scope.node) {\r\n                    labels = [$scope.node.Lookup, 'Favourite'];\r\n                    getFilters();\r\n                    $scope.enabledFilters = [];\r\n                    $scope.process();\r\n                }\r\n\r\n            }\r\n\r\n            var getFilters = function () {\r\n                if (labels && labels.length) {\r\n\r\n                    var labelQuery = \"match (a:\" + labels.join(':') + \") - [] -> (b) return distinct(LABELS(b))\";\r\n\r\n                    neo.getDistinctLabelsQuery(labelQuery)\r\n                    .then(function (l) {\r\n\r\n                        //remove filter for this node as it is duplicating\r\n                        angular.forEach(labels, function (lab) {\r\n                            l.splice($.inArray(lab, l), 1);\r\n                        });\r\n                        $scope.filters = l;\r\n\r\n                    });\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n            $scope.process = function (labs) {\r\n\r\n                if ($scope.node) {\r\n\r\n                    labs = labs || [];\r\n\r\n                    var b = \"b\";\r\n                    if (labs.length) {\r\n                        b += \":\" + labs.join(\":\");\r\n                    }\r\n\r\n                    var q = \"match (a:\" + labels.join(':') + \") - [] -> (\" + b + \")\";\r\n\r\n                    \r\n                     \r\n                    $scope.generated = q + \" return b\";\r\n                 \r\n\r\n\r\n\r\n                    if (labs.length) {\r\n                        neo.getDistinctLabelsQuery(q + \" return distinct(LABELS(b))\")\r\n                          .then(function (l) {\r\n                              $scope.enabledFilters = l;\r\n\r\n                          });\r\n                    }\r\n                    else {\r\n                        $scope.enabledFilters = [];\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.query.generator.nodeFilter',['neograph.neo'])\r\n    .directive('nodeFilter', ['neo', function (neo) {\r\n\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/query/generator/nodeFilter.html',\r\n        scope: {\r\n            options: '='\r\n            ,\r\n            generated: '='\r\n            ,\r\n            nodechanged: '&?'\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n\r\n            $scope.filters = [];\r\n            $scope.node = {};\r\n            var labels = [];\r\n\r\n            $scope.$watch('options', function (options) {\r\n\r\n                console.log('node filter options changed')\r\n                $scope.node = options.node;\r\n\r\n            });\r\n        \r\n\r\n            //$scope.$watch('options.node', function (node) {\r\n             \r\n            //    console.log('node filter options.node changed')\r\n                 \r\n              \r\n            //});\r\n\r\n            $scope.$watch('node', function (node) {\r\n                if ($scope.nodechanged) {\r\n                    $scope.nodechanged({ node: node });\r\n                }\r\n                load();\r\n            });\r\n        \r\n            $scope.openNode = function () {\r\n\r\n                if ($scope.node) {\r\n                    $scope.publish('selected',{selection:{nodes:[$scope.node]}})\r\n                }\r\n            }\r\n\r\n            var load = function () {\r\n                if ($scope.node) {\r\n                    labels = [$scope.node.Label, 'Picture'];\r\n                    getFilters();\r\n                    $scope.enabledFilters = [];\r\n                    $scope.process();\r\n                }\r\n            }\r\n\r\n            var getFilters = function () {\r\n                console.log('node filter - get filters')\r\n                console.log(labels);\r\n                if (labels && labels.length) {\r\n                    neo.getDistinctLabels(labels)\r\n                    .then(function (l) {\r\n\r\n                        //remove filter for this node as it is duplicating\r\n                        angular.forEach(labels, function (lab) {\r\n                            l.splice($.inArray(lab, l), 1);\r\n                        });\r\n\r\n                        $scope.filters = l;\r\n                        console.log($scope.filters )\r\n                    });\r\n                }\r\n            }\r\n\r\n\r\n            $scope.process = function (labs) {\r\n\r\n                if ($scope.node) {\r\n\r\n                    if (!labs || !labs.length) {\r\n                        labs = labels;\r\n                    }\r\n                    else {\r\n                        labs = labs.concat(labels);\r\n                    }\r\n\r\n                    $scope.generated = \"match (a:\" + labs.join(':') + \" ) return a order by a.Status desc limit 500\";\r\n\r\n                    if (labs != labels) {\r\n                        neo.getDistinctLabels(labs)\r\n                          .then(function (l) {\r\n                              $scope.enabledFilters = l;\r\n\r\n                          });\r\n                    }\r\n                    else {\r\n                        $scope.enabledFilters =[];\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.query.generator.nodeGraph',['neograph.neo'])\r\n    .directive('nodeGraph', ['neo', function (neo) {\r\n\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/query/generator/nodeGraph.html',\r\n        scope: {\r\n            options: '='\r\n            ,\r\n            generated: '='\r\n            ,\r\n            nodechanged: '&?'\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n            $scope.querys = [];\r\n            $scope.selected = \"\";\r\n            $scope.node = {};\r\n\r\n            $scope.$watch('options', function (options) {\r\n                console.log('node filter options changed')\r\n                $scope.node = options.node;\r\n\r\n            });\r\n\r\n            $scope.$watch('selected', function (sel) {\r\n                console.log(sel);\r\n                if (sel && sel.q) {\r\n                    $scope.generated = sel.q;\r\n                }\r\n            });\r\n\r\n            $scope.$watch('node', function (node) {\r\n\r\n                if (node && node.id) {\r\n                    if ($scope.nodechanged) {\r\n                        $scope.nodechanged({ node: node });\r\n                    }\r\n                    neo.getNode(node.id, false)\r\n                .then(function (loaded) {\r\n                    getQuerys(loaded);\r\n                });\r\n                }\r\n\r\n            });\r\n\r\n            $scope.openNode = function () {\r\n\r\n                if ($scope.node) {\r\n                    $scope.publish('selected', { selection: { nodes: [$scope.node] } })\r\n                }\r\n            }\r\n\r\n            var getQuerys = function (node) {\r\n\r\n                if (node) {\r\n\r\n                    var querys = [];\r\n                    var Lookup = node.Lookup;\r\n\r\n\r\n                                          \r\n\r\n                    querys.push(\r\n                       {\r\n                           name: \"All immediate relationships\",\r\n                           q: \"MATCH (c)-[r]-(d:Global) where ID(c) = \" + node.id + \" return c,d,r\"\r\n                       });\r\n\r\n                    querys.push(\r\n                          {\r\n                              name: \"Self\",\r\n                              q: \"MATCH (c:\" + node.Label + \")-[r]-(d:\" + node.Label + \")   return c,d,r\"\r\n                          });\r\n\r\n                    if ($.inArray(\"Provenance\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Provenance\",\r\n                                q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n                            })\r\n                    }\r\n\r\n                    if ($.inArray(\"Period\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Period\",\r\n                                q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n                            })\r\n                    }\r\n\r\n                    if ($.inArray(\"Theme\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Theme\",\r\n                                q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n                            })\r\n                    }\r\n\r\n                    if ($.inArray(\"Person\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Outbound Influence\",\r\n                                //  q: \"MATCH (c {Lookup:'\" + Lookup + \"'})-[r]->(d:Painter)  -[s]->(e:Painter)  -[t]->(f:Painter) return c,d,e,f,r,s,t\",\r\n                                q: \"MATCH (c {Lookup:'\" + Lookup + \"'})-[r]->(d:Painter) with c,d,r optional  match(d) -[s]->(e:Painter) return c,d,r,s,e \",\r\n                                connectAll: true\r\n                            })\r\n\r\n                        querys.push(\r\n                          {\r\n                              name: \"Inbound Influence\",\r\n                              //    q: \"MATCH (c {Lookup:'\" + Lookup + \"'})<-[r]-(d:Painter)  <-[s]-(e:Painter)  <-[t]-(f:Painter) return c,d,e,f,r,s,t\",\r\n                              q: \"MATCH (c {Lookup:'\" + Lookup + \"'})<-[r]-(d:Painter) with c,d,r optional  match(d) <-[s]-(e:Painter) return c,d,r,s,e \",\r\n                              connectAll: true\r\n                          })\r\n\r\n                    }\r\n\r\n                    if ($.inArray(\"Group\", node.labels) > -1) {\r\n\r\n                        querys.push({\r\n                            name: 'Group',\r\n                            q: \"match (n {Lookup:'\" + Lookup + \"'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) and not m:Provenance and not p:Provenance return n,r,m,s,p\"\r\n    ,\r\n                            connectAll: true\r\n                        });\r\n\r\n                    }\r\n\r\n\r\n                    if ($.inArray(\"Iconography\", node.labels) > -1) {\r\n\r\n\r\n                        querys.push({\r\n                            name: 'Iconography',\r\n                            q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  and not d.Lookup='\" + Lookup + \"' and (d:\" + Lookup + \" or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r\"\r\n                          ,\r\n                            connectAll: true\r\n                        });\r\n\r\n                    }\r\n\r\n                    if (node.YearFrom && node.YearTo) {\r\n\r\n                        var yq = \"MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and \";\r\n                        yq += \"((c.YearTo >= \" + node.YearFrom + \" and c.YearTo<= \" + node.YearTo + \") or (c.YearFrom >= \" + node.YearFrom + \" and c.YearFrom<= \" + node.YearTo + \"))\";\r\n                        yq += \"and ((d.YearTo >= \" + node.YearFrom + \" and d.YearTo<= \" + node.YearTo + \") or (d.YearFrom >= \" + node.YearFrom + \" and d.YearFrom<= \" + node.YearTo + \"))\";\r\n                        yq += \" return c,d,r\";\r\n                        querys.push({\r\n                            name: 'YearFromYearTo',\r\n                            q: yq\r\n\r\n                         ,\r\n                            connectAll: true\r\n                        });\r\n\r\n                    }\r\n\r\n                    var prevselection = $scope.selected.name;\r\n\r\n                    $scope.querys = querys;\r\n\r\n                    $($scope.querys).each(function (i, e) {\r\n\r\n                        if (e.name === prevselection)\r\n                        {\r\n                            $scope.selected = e;\r\n                        }\r\n                    });\r\n\r\n\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.query.generator',[\r\n    'neograph.query.generator.favouritesFilter',\r\n    'neograph.query.generator.nodeFilter',\r\n    'neograph.query.generator.nodeGraph',\r\n]);"],"sourceRoot":"/source/"}