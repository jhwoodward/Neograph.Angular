{"version":3,"sources":["app.js","popup.js","publishSubscribe.js","settings.js","common/common.js","common/filter.js","common/filters.js","common/images.js","common/labels.js","common/nodeArray.js","common/typeahead.js","common/typeaheadSimple.js","controllers/controller.mob.js","controllers/controller.utils.js","edge/edge.js","graph/graph.js","interaction/draggable.js","interaction/interaction.js","interaction/resizable.js","interaction/selectable.js","layout/layout.js","models/node.js","models/predicate.js","neo/neo.client.js","neo/neo.js","neo/session.js","neo/utils.js","node/node.js","node/node.service.js","query/query.js","query/query.presets.js","query/queryDirective.js","node/favourites/node.favourites.js","node/freebase/node.freebase.js","node/graphpanel/node.graphpanel.js","node/graphtypes/node.graphTypes.js","node/imageRelationships/node.imageRelationships.js","node/images/node.images.js","node/multiple/node.multiple.js","node/properties/node.properties.edit.js","node/relationships/node.relationships.edit.js","node/wikipedia/node.wikipedia.js","query/generator/favouritesFilter.js","query/generator/nodeFilter.js","query/generator/nodeGraph.js","query/generator/query.generator.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["angular.module(\"templates\",[]);\r\nvar app = angular\r\n    .module(\"Neograph\", \r\n    [\r\n    \"templates\",\r\n    'publishSubscribe',\r\n    'ui.router',\r\n    'ngSanitize',\r\n    'neograph.common',\r\n    'neograph.edge',\r\n    'neograph.graph',\r\n    'neograph.interaction',\r\n    'neograph.layout',\r\n    'neograph.neo',\r\n    'neograph.node',\r\n    'neograph.query',\r\n    'neograph.controller.mob'\r\n   \r\n    ])\r\n    .config( ($stateProvider, $urlRouterProvider)=> {\r\n\r\n\r\n        $stateProvider\r\n          \r\n            .state('admin',{\r\n                url:'/admin',\r\n                templateUrl:'app/partials/admin.html'\r\n            })\r\n            .state('admin.main',{\r\n                url:'/main?querypreset',\r\n                views:{\r\n                    'nodeSearch@admin':{\r\n                        controller:'NodeSearchCtrl',\r\n                        templateUrl:'app/node/node.search.html'\r\n                    }\r\n                    ,\r\n                    'query@admin':{\r\n                        controller:'QueryCtrl',\r\n                        templateUrl:'app/query/query.html'\r\n                    }\r\n                    ,\r\n                    'queryResults@admin':{\r\n                        controller:'QueryResultsCtrl',\r\n                        templateUrl:'app/query/queryResults.html'\r\n                    }\r\n                    \r\n                }\r\n\r\n            })\r\n    \r\n\r\n        $urlRouterProvider.otherwise(\"/admin/main\");\r\n\r\n    })\r\n    .controller(\"AdminController\", ['$scope', 'neo', 'queryPresets', 'utils','session', \r\nfunction ($scope,  neo, presets, utils,session) {\r\n\r\n    //SWAP ADMIRES FOR INSPIRES\r\n    //MATCH (n)-[r:ADMIRES]->(m) CREATE (m)-[r2:INSPIRES]->(n) SET r2 = r WITH r DELETE r\r\n\r\n   \r\n        \r\n\r\n    $scope.subscribe(\"hover\", function (node) {\r\n\r\n        $scope.selection.hoverNode = node;\r\n\r\n    });\r\n\r\n   \r\n\r\n    //= function () {\r\n\r\n    //    var view = newView($scope.selection.selectedNode.Lookup, \"Grid\");\r\n    //    view.queryGenerators.nodeFilter.options = { node: $scope.selection.selectedNode };\r\n    //    view.queryGenerator = view.queryGenerators.nodeFilter;\r\n    //    $scope.activeViewKey = view.key;\r\n\r\n    //}\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n   \r\n function shouldEnabledAddToGraph() {\r\n\r\n        $scope.enableAddToGraph = $scope.selection.selectedNode &&\r\n            $scope.selection.selectedNode.id &&\r\n            $scope.activeView.type == \"Graph\" &&\r\n            !$scope.activeView.data.nodes[$scope.selection.selectedNode.id];\r\n\r\n\r\n    }\r\n \r\n\r\n   \r\n\r\n\r\n    $scope.$watch('selection.selectedEdge', function (edge) {\r\n\r\n        if (edge) {\r\n            $scope.selection.selectedNode = undefined;\r\n            $scope.selection.multiple = undefined;\r\n            $scope.selection.images = [];\r\n\r\n        }\r\n\r\n    });\r\n\r\n    $scope.subscribe(\"favourite\", function (node) {\r\n\r\n        neo.saveFavourite(node, session.user);\r\n\r\n    });\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    ////published by graph ondelete\r\n    //$scope.subscribe(\"deleting\", function () {\r\n\r\n    //    if (confirm(\"Delete Confirm ? \")) {\r\n    //        //TODO: WHY DOES THIS FIRE 3 TIMES ??\r\n    //        if ($scope.selection.selectedNode) {\r\n\r\n    //            $scope.deleteNode($scope.selection.selectedNode);\r\n\r\n    //        }\r\n    //        else if ($scope.selection.selectedEdge) {\r\n\r\n    //            $scope.deleteEdge($scope.selection.selectedEdge);\r\n    //        }\r\n    //    }\r\n\r\n    //})\r\n\r\n\r\n\r\n    //published by graph onconnecting\r\n    //the new edge shows in the properties window and must then be saved \r\n    $scope.subscribe(\"newEdge\", function (newEdge) {\r\n\r\n        $scope.$apply(function () {\r\n\r\n            $scope.selection.selectedEdge = newEdge;\r\n            $scope.tabs = [\"Properties\"];\r\n            $scope.selectedTab = \"Properties\";\r\n\r\n        })\r\n\r\n\r\n    });\r\n\r\n/*\r\n    $scope.defaultpreset = presets[\"British Only\"];\r\n  \r\n   \r\n    setTimeout(function(){\r\n        var initNode = {id:78550};\r\n        \r\n         $scope.nodeLookup=initNode;\r\n        $scope.publish(\"selected\", \r\n        {\r\n            selection:{nodes:[initNode]}\r\n        }\r\n        );\r\n        \r\n        $scope.selectedTab = \"Images\";\r\n        \r\n    },1000);\r\n*/\r\n\r\n}])\r\n   .run(function ($rootScope, PubSubService) {\r\n      PubSubService.Initialize($rootScope);\r\n  });\r\n   \r\n\r\n","\r\n\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n\r\n    $('#btn').click(function () {\r\n\r\n        chrome.tabs.executeScript(null, { file: \"angular.min.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"jquery.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"scraper/controller.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"scraper/scraper.js\" });\r\n\r\n\r\n    });\r\n\r\n\r\n    var addDependencies = function () {\r\n\r\n\r\n chrome.tabs.insertCSS(null, { file: \"ext/lib/bootstrap-button.css\" });\r\n        chrome.tabs.insertCSS(null, { file: \"ext/lib/bootstrap-dropdown.css\" });\r\n        chrome.tabs.insertCSS(null, { file: \"ext/style.css\" });\r\n        chrome.tabs.executeScript(null, { file: \"ext/lib/jquery.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"ext/lib/bootstrap.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"ext/lib/angular.min.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"ext/lib/angular-resource.min.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"ext/lib/angular-sanitize.min.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"modules.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"filters/filters.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"factories/neoHelper.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"factories/utils.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"factories/neo.js\" });\r\n        chrome.tabs.executeScript(null, { file: \"directives/typeahead.js\" });\r\n\r\n    }\r\n\r\n\r\n    $('#google').click(function () {\r\n        addDependencies();\r\n        chrome.tabs.executeScript(null, { file: \"ext/google.js\" });\r\n    });\r\n\r\n    $('#tate').click(function () {\r\n        addDependencies();\r\n        chrome.tabs.executeScript(null, { file: \"ext/tate.js\" });\r\n    });\r\n\r\n});\n","angular.module(\"publishSubscribe\",[])\r\n.service('PubSubService', function () {\r\n\r\n      return {Initialize:Initialize};\r\n\r\n      function Initialize (scope) {\r\n          //Keep a dictionary to store the events and its subscriptions\r\n          var publishEventMap = {};\r\n\r\n          //Register publish events\r\n          scope.constructor.prototype.publish =  scope.constructor.prototype.publish \r\n           || function () {\r\n               var _thisScope = this,\r\n                   handlers, \r\n                   args, \r\n                   evnt;\r\n               //Get event and rest of the data\r\n               args = [].slice.call(arguments);\r\n               evnt = args.splice(0, 1);\r\n               //Loop though each handlerMap and invoke the handler\r\n               angular.forEach((publishEventMap[evnt] || []), function (handlerMap) {\r\n                   handlerMap.handler.apply(_thisScope, args);\r\n               })\r\n           }\r\n\r\n          //Register Subscribe events\r\n          scope.constructor.prototype.subscribe = scope.constructor.prototype.subscribe \r\n             || function (evnt, handler) {\r\n                 var _thisScope = this,\r\n                     handlers = (publishEventMap[evnt] = publishEventMap[evnt] || []);\r\n\r\n                 //Just keep the scopeid for reference later for cleanup\r\n                 handlers.push({ $id: _thisScope.$id, handler: handler });\r\n                 //When scope is destroy remove the handlers that it has subscribed.  \r\n                 _thisScope.$on('$destroy', function () {\r\n                     for(var i=0,l=handlers.length; i<l; i++){\r\n                         if (handlers[i].$id === _thisScope.$id) {\r\n                             handlers.splice(i, 1);\r\n                             break;\r\n                         }\r\n                     }\r\n                 });\r\n             }\r\n\r\n      }\r\n  });","angular.module('neograph.settings',[])\r\n.factory(\"settings\", function () {\r\n\r\n    return {\r\n        apiRoot : 'http://localhost:1337'\r\n    }\r\n\r\n});\r\n","angular.module('neograph.common',[\r\n    'neograph.common.filter',\r\n    'neograph.common.filters',\r\n    'neograph.common.images',\r\n   'neograph.common.labels',\r\n    'neograph.common.nodeArray',\r\n   'neograph.common.typeahead',\r\n   'neograph.common.typeaheadSimple'\r\n    ]);","angular.module('neograph.common.filter',[])\r\n.directive('filter', function () {\r\n    return {\r\n        replace: true,\r\n        restrict: 'E',\r\n        templateUrl: 'app/common/filter.html',\r\n        scope: {\r\n\r\n            init: '='//an array of labels\r\n            ,\r\n            enabled: '='\r\n            ,\r\n            process: '&'\r\n\r\n\r\n\r\n\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n            $scope.filters = {}\r\n\r\n            $scope.$watch('init', function (labels) {\r\n\r\n                var filters = {};\r\n                angular.forEach(labels, function (f) {\r\n                    filters[f] = 0;\r\n                });\r\n\r\n                $scope.filters = filters;\r\n\r\n            });\r\n\r\n            $scope.getFilterClass = function (value) {\r\n\r\n                if (value === 1)\r\n                    return 'label-success';\r\n                else if (value === 0)\r\n                    return 'label-info';\r\n                else return '';\r\n            }\r\n\r\n            $scope.toggleFilter = function (label) {\r\n                if ($scope.filters[label] == 1) {\r\n                    $scope.filters[label] = 0;\r\n\r\n                }\r\n                else if ($scope.filters[label] == 0) {\r\n                    $scope.filters[label] = 1;\r\n\r\n                }\r\n                else if ($scope.filters[label] == -1) {\r\n                    for (var f in $scope.filters) {\r\n                        $scope.filters[f] = 0;\r\n                    };\r\n                    $scope.filters[label] = 1;\r\n                }\r\n\r\n                var labels = [];\r\n                for (var f in $scope.filters) {\r\n\r\n                    if ($scope.filters[f] === 1) {\r\n                        labels.push(f);\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                $scope.process({ labels: labels })\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            $scope.$watch(\"enabled\", function (labels) {//labels = selectable labels following filtering\r\n\r\n                if (labels && labels.length) {\r\n                    for (var f in $scope.filters) {\r\n\r\n                        if ($.inArray(f, labels) == -1) {//disable filter if not in list\r\n                            $scope.filters[f] = -1;\r\n                        }\r\n                        else if ($scope.filters[f] == -1) {//enable filter if in list and previously disabled\r\n                            $scope.filters[f] = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n\r\n                    for (var f in $scope.filters) {\r\n                        $scope.filters[f] = 0;\r\n                    }\r\n                }\r\n\r\n            })\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n})","angular.module('neograph.common.filters', []).filter('checkmark', function () {\r\n    return function (input) {\r\n        return input ? '\\u2713' : '\\u2718';\r\n    };\r\n}).filter('predicate', function () {\r\n    return function (input) {\r\n        return input ? '\\u2713' : '\\u2718';\r\n    };\r\n});","angular.module('neograph.common.images',['neograph.neo','neograph.session'])\r\n.directive('images', ['neo','session', function (neo) {\r\n    return {\r\n        replace: true,\r\n        restrict: 'E',\r\n        templateUrl: 'app/common/images.html',\r\n        scope: {\r\n            editing: '='\r\n            , nodes: '=' //must be an array to preserve sort order\r\n            , active: '='\r\n            , updatemasonry: '='//required to update masonry on resize\r\n\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n            var $ul = $($element).find('ul');\r\n\r\n            $scope.items = {};\r\n\r\n            $scope.$watch('nodes', function (nodes) {\r\n                $ul.removeClass('masonryLoaded');\r\n                $scope.items = nodes;\r\n                applyMasonry();\r\n\r\n            })\r\n\r\n            $scope.$watch('updatemasonry', function () {\r\n                if ($ul.hasClass('masonry')) {\r\n                    $ul.masonry('reload');\r\n                }\r\n            });\r\n\r\n            $scope.$watch('active',applyMasonry);\r\n\r\n            var applyMasonry = function () {\r\n\r\n            //    if ($scope.updatemasonry) {\r\n\r\n                    setTimeout(function () {\r\n\r\n                        if ($ul.hasClass('masonry')) {\r\n                            $ul.masonry('reload');\r\n                        }\r\n                        else {\r\n                            $ul.masonry({\r\n                                nodeselector: 'li'\r\n                                //,\r\n                                //columnWidth: 1,\r\n                                //\"isFitWidth\": true\r\n                            });\r\n                        }\r\n\r\n                        $ul.addClass('masonryLoaded');\r\n\r\n\r\n                    }, 100);\r\n             //   }\r\n           //     else {\r\n                 //   $ul.addClass('masonryLoaded');\r\n           ///     }\r\n            }\r\n\r\n            $scope.navigate = function (label) {\r\n                $scope.publish(\"query\", {\r\n                    name: label,\r\n                    view: label,\r\n                    type: \"Grid\",\r\n                   queryGenerator: { id: \"nodeFilter\", options: { node: { Label: label } } } \r\n                });\r\n\r\n            }\r\n\r\n            $scope.selectAll = function () {\r\n\r\n                if ($ul.find(\"li.ui-selected\").length < $ul.find(\"li\").length) {\r\n                    $ul.find(\"li\").addClass(\"ui-selected\");\r\n                    $scope.selected = $scope.nodes.map(function (e, i) { return i });\r\n                }\r\n                else {\r\n                    $ul.find(\"li\").removeClass(\"ui-selected\");\r\n                    $scope.selected = [];\r\n                }\r\n            }\r\n\r\n            //this assumes that we are looking at a view of not deleted items\r\n            $scope.subscribe(\"deleted\", function (params) {\r\n\r\n                // alternatively i could have a deep watch on nodearray and update that \r\n                removeItems(params.selection.nodes);\r\n            });\r\n\r\n            //this assumes that we are looking at a view of deleted items\r\n            $scope.subscribe(\"restored\", function (params) {\r\n\r\n                // alternatively i could have a deep watch on nodearray and update that \r\n                removeItems(params.selection.nodes);\r\n            });\r\n\r\n\r\n            var removeItems = function (items) {\r\n\r\n                if (items && items.length) {\r\n                    angular.forEach(items, function (node) {\r\n                        var sel = \"li[nodeid='\" + node.id + \"']\";\r\n                        console.log(sel);\r\n                        $ul.find(sel).remove();\r\n                    });\r\n                    applyMasonry();\r\n\r\n                }\r\n            }\r\n     \r\n\r\n\r\n            $scope.getFilterClass = function (value) {\r\n\r\n                if (value === 1)\r\n                    return 'label-success';\r\n                else if (value === 0)\r\n                    return 'label-info';\r\n                else return '';\r\n            }\r\n\r\n            $scope.toggleFilter = function (label) {\r\n                if ($scope.filters[label] == 1) {\r\n                    $scope.filters[label] = 0;\r\n                    refreshContent();\r\n                }\r\n                else if ($scope.filters[label] == 0) {\r\n                    $scope.filters[label] = 1;\r\n                    refreshContent();\r\n                }\r\n                else if ($scope.filters[label] == -1) {\r\n                    for (var f in $scope.filters) {\r\n                        $scope.filters[f] = 0;\r\n                    };\r\n\r\n                    $scope.filters[label] = 1;\r\n                    refreshContent();\r\n                }\r\n\r\n\r\n            }\r\n\r\n            //triggered by selecting a filter\r\n            $scope.$watch('filterBy', function (label) {\r\n                if (label) {\r\n                    $scope.filters[label] = 1;\r\n                    $scope.filterBy = undefined;\r\n                    refreshContent();\r\n                }\r\n\r\n            });\r\n\r\n      \r\n\r\n            //triggered by selecting one or more images\r\n            $scope.$watch('selected', function (selected) {// NB selected is now an array of node indexes\r\n\r\n                if (selected && selected.length) {\r\n\r\n             \r\n                    var selectedNodes = selected.map(function (i) {\r\n                        return $scope.nodes[i];\r\n                    });\r\n\r\n            //NB if there are multiple instances of the images directive (as typically) it wont be possible ot know which one the event was sent from\r\n                    //but mainly we need to know that it wasnt sent from the graph or controller, as images currently doesnt substribe to selected event\r\n                    $scope.publish(\"selected\", { sender: \"Images\", selection: { nodes: selectedNodes} })\r\n        \r\n\r\n\r\n                }\r\n\r\n\r\n            });\r\n\r\n            $scope.makeFavourite = function (node) {\r\n                console.log(node);\r\n                $scope.publish(\"favourite\", node);\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.common.labels',['neograph.neo','neograph.utils'])\r\n.directive('labels', ['neo', 'utils', function (neo, utils) {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/common/labels.html',\r\n        scope: {\r\n            node: '=?'\r\n            ,\r\n            labels: '=?'\r\n            ,\r\n            items: '=?'\r\n            ,\r\n            navpath: '@'\r\n            ,\r\n            highlight:'@?'\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n            $scope.$watch('node', function (node) {\r\n                if (node) {\r\n                    $scope.labels = $scope.node.labels;\r\n                }\r\n          \r\n            });\r\n\r\n            $scope.$watch('items', function (items) {\r\n                if (items) {\r\n                    $scope.labels = $scope.items.map(function (x) {return x.label });\r\n                }\r\n              \r\n            });\r\n\r\n\r\n    \r\n           \r\n            $scope.getClass = function (label) {\r\n                    if (label === $attrs['highlight']) { \r\n                        return 'label-warning';\r\n                    }\r\n                    else\r\n                return utils.getLabelClass($scope.node, label);\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n}]);","angular.module('neograph.common.nodeArray',['neograph.utils'])\r\n    .directive('nodeArray', ['utils', function (utils) {\r\n    return {\r\n        replace: true,\r\n        restrict: 'EA',\r\n        templateUrl: 'app/common/nodeArray.html',\r\n        scope: {\r\n\r\n            items: '='//an array of string or  items with label property \r\n            ,\r\n            enabled: '='\r\n            ,\r\n            onselected: '&?'\r\n            ,\r\n            node: '=?'\r\n            ,\r\n            directbinding: '@?'//set this to false if passing in array of strings\r\n            ,\r\n            width: '@?'\r\n\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n            var directBinding = $attrs[\"directbinding\"]==\"false\" ? false : true;\r\n     \r\n            $scope.nodes = [];\r\n\r\n         \r\n\r\n            $scope.$watch('items', function (items) {\r\n\r\n                if (items && items.length) {\r\n                     console.log(items);\r\n                    \r\n\r\n                    if (items[0] && (items[0].label || items[0].lookup)) {\r\n                     \r\n                        $scope.nodes = items;\r\n\r\n                    }\r\n                    else {\r\n                        directBinding = false;\r\n                        $scope.nodes = items.map(function (e) { return { label: e } });\r\n\r\n\r\n                    }\r\n                    \r\n                    console.log($scope.nodes);\r\n                    \r\n                    \r\n                }\r\n                else {\r\n                    if (directBinding) {\r\n                        $scope.nodes = items;\r\n                    }\r\n                    else {\r\n                        $scope.nodes = [];\r\n                    }\r\n                  \r\n                }\r\n            })\r\n\r\n            $($element).on('click', function () {\r\n                $($element).find('input').focus();\r\n            });\r\n\r\n            ////update items array (needed as items can be array of text items not nodes)\r\n            //$scope.$watch('nodes', function (nodes) {\r\n            //    if (!directBinding) {\r\n            //        mappingNodesToItems = true;\r\n            //        $scope.items = nodes.map(function (n) { return n.Label; })\r\n            //        mappingNodesToItems = false;\r\n            //    }\r\n\r\n            //}, true)\r\n\r\n            //$scope.getWidth = function () {\r\n            //    if ($scope.nodes) {\r\n            //        return $attrs[\"width\"] ? $attrs[\"width\"] : $scope.nodes.length > 5 ? '495px' : '230px'\r\n            //    }\r\n            //    else {\r\n            //        return null;\r\n            //    }\r\n            //}\r\n\r\n            $scope.getClass = function (node) {\r\n                return utils.getLabelClass($scope.node, node.label);\r\n            }\r\n\r\n            $scope.clickable = $attrs[\"onselected\"] != undefined;\r\n\r\n            $scope.nodeClicked = function (node) {\r\n         \r\n                if ($attrs[\"onselected\"]) {\r\n\r\n                    $scope.onselected({ item: node });\r\n\r\n                }\r\n            }\r\n\r\n            var indexOf = function (node) {\r\n\r\n                var ind = -1;\r\n\r\n                $($scope.nodes).each(function (i, e) {\r\n\r\n                    if ((node.label && e.label === node.label) || node.lookup && e.lookup == node.lookup) {\r\n                        ind = i;\r\n                        return;\r\n                    }\r\n                });\r\n\r\n                return ind;\r\n\r\n            }\r\n\r\n            $scope.addNode = function (node) {\r\n                console.log(node);\r\n                console.log(directBinding);\r\n                if (indexOf(node) == -1) {\r\n                    console.log('node adding');\r\n                    $scope.nodes.push(node);\r\n  \r\n                    if (!directBinding) {\r\n                        console.log('item adding');\r\n                        $scope.items.push(node.label)\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                //else highlight the node momentarily\r\n\r\n\r\n            }\r\n\r\n            $scope.removeNode = function (node) {\r\n                console.log(node);\r\n                var ind = indexOf(node);\r\n                console.log(ind);\r\n                if (ind > -1) {\r\n                    $scope.nodes.splice(ind, 1);\r\n\r\n                    if (!directBinding) {\r\n                        $scope.items.splice($scope.items.indexOf(node.label||node.lookup), 1);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}]);","angular.module('neograph.common.typeahead',['neograph.utils','neograph.node.service'])\r\n    .directive('typeahead', ['utils', 'nodeService', function (utils, nodeService) {\r\n    return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n            choice: '=?',   //the choice should be an object for 2 way binding with lookup property\r\n            watchvalue: '=?',  //watchvalue should be a text string  -just for updating the textbox value when the value changes, not fed back\r\n            text: '=?', //to feed back the text value when it changes (when no item has been selected)\r\n            restrict: '=?',//options to retrict the items that can be selected = Type,Predicate,User,custom object array with lookup property\r\n            onselected: '&?',\r\n            autosize:'@?'\r\n\r\n        },\r\n        template: '<input type=\"text\" class=\"form-control\" />',\r\n        link: function ($scope, element, attrs) {\r\n\r\n            var placeholderDefault = \"Node...\";\r\n\r\n            var $input = $(element);//.find('input');\r\n            $input.attr(\"placeholder\", attrs[\"placeholder\"] || placeholderDefault);\r\n\r\n            $scope.$watch('choice', function (n) {\r\n                if (n) {\r\n                    $input.val(n.Label || n.lookup);\r\n                }\r\n            })\r\n\r\n            if (!attrs[\"choice\"]) {\r\n                $scope.$watch('watchvalue', function (n) {\r\n                    $input.val(n);\r\n                })\r\n            }\r\n\r\n            if (attrs[\"autosize\"]) {\r\n\r\n                $input.css({ width: '10px' });\r\n                $input.attr(\"placeholder\", \"+\");\r\n                $input.on(\"focus\", function () {\r\n                    $input.css({ width: '100px' });\r\n                    $input.attr(\"placeholder\", attrs[\"placeholder\"] || placeholderDefault);\r\n                    setTimeout(function () {\r\n                        $input.css({ width: '100px' });\r\n                        $input.attr(\"placeholder\", attrs[\"placeholder\"] || placeholderDefault);\r\n                    }, 100)\r\n                  \r\n                });\r\n                $input.on(\"blur\", function () {\r\n                    $input.css({ width: '10px' });\r\n                    $input.attr(\"placeholder\", \"+\");\r\n                    $input.val('');\r\n                })\r\n              \r\n            }\r\n\r\n            $input.typeahead({\r\n                source: getSource(),\r\n\r\n                matcher: function (obj) {\r\n\r\n                    var item = JSON.parse(obj);\r\n\r\n                    return ~item.lookup.toLowerCase().indexOf(this.query.toLowerCase())\r\n                }\r\n                ,\r\n                sorter: function (items) {\r\n                    var beginswith = [], caseSensitive = [], caseInsensitive = [],aItem, item;\r\n                    while (aItem = items.shift()) {\r\n                        var item = JSON.parse(aItem);\r\n                        if (!item.lookup.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(JSON.stringify(item));\r\n                        else if (~item.lookup.indexOf(this.query)) caseSensitive.push(JSON.stringify(item));\r\n                        else caseInsensitive.push(JSON.stringify(item));\r\n                    }\r\n\r\n                    return beginswith.concat(caseSensitive, caseInsensitive)\r\n\r\n                },\r\n                highlighter: function (obj) {\r\n                    var item = JSON.parse(obj);\r\n                    var query = this.query.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n                    var out;\r\n\r\n                    if (attrs[\"restrict\"] == \"Predicate\") {\r\n                        out = new utils.Predicate(item.lookup).ToString().replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\r\n                            return '<strong>' + match + '</strong>'\r\n                        });\r\n\r\n                    }\r\n                    else {\r\n                      \r\n                        out = item.lookup.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\r\n                            return '<strong>' + match + '</strong>'\r\n                        }) + \" <div style='float:right;margin-left:8px;color:#ccc'>\" + item.class + \"</div>\";\r\n                       \r\n                    }\r\n\r\n                    return out;\r\n                },\r\n                updater: function (obj) {\r\n\r\n                    itemSelected = true;\r\n\r\n                    var item = JSON.parse(obj);\r\n\r\n                    $scope.$apply(function () {\r\n\r\n                        if (attrs[\"choice\"]) {\r\n                            $scope.choice = item;\r\n                            //if (attrs[\"clearonselect\"]) {\r\n                            //    $scope.choice = undefined;\r\n                            //    $scope.text = \"\";\r\n                            //}\r\n                        }\r\n\r\n                        if (attrs[\"onselected\"]) {\r\n                            $scope.onselected({ item: item });\r\n                        }\r\n\r\n                    });\r\n\r\n\r\n                    if (!attrs[\"clearonselect\"]) {\r\n   \r\n                        return item.lookup;\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            var itemSelected = false;\r\n\r\n\r\n            $input.on('keydown', function (e) {\r\n                itemSelected = false;\r\n                if (e.keyCode == 13) {//enter\r\n\r\n                    setTimeout(function () {\r\n\r\n                        $scope.$apply(function () {\r\n                            if (!itemSelected) {\r\n                                $scope.text = $input.val();\r\n                                $input.val('');\r\n                            }\r\n                        });\r\n\r\n\r\n                    }, 100);\r\n\r\n                \r\n\r\n                }\r\n\r\n            });\r\n\r\n            function getSource() {\r\n\r\n                if (attrs[\"restrict\"] == \"Type\") {\r\n                    //convert types object to array\r\n                    var source = [];\r\n                    for (var key in utils.types) {\r\n                        source.push(JSON.stringify(utils.types[key]));\r\n                    }\r\n                    return source;\r\n                }\r\n                else if (attrs[\"restrict\"] == \"Predicate\") {\r\n                    //convert predicates object to array\r\n                    var source = [];\r\n                    for (var key in utils.predicates) {\r\n                        source.push(JSON.stringify(utils.predicates[key]));\r\n                    }\r\n\r\n                    return source;\r\n                  \r\n                }\r\n                else return nodeSource;\r\n\r\n            }\r\n\r\n            //Globals & users or one or the other depending on value of restrict\r\n            var nodeSource = function (query, process) {\r\n\r\n                if ($scope.restrict && $.isArray($scope.restrict) && $scope.restrict.lenth > 0) {\r\n\r\n                    if ($scope.restrict[0].lookup) {\r\n                        return $scope.restrict.map(function (d) { return JSON.stringify(d); });\r\n                    }\r\n                    else {\r\n                        return $scope.restrict.map(function (d) { return JSON.stringify({ lookup: d }); });\r\n                    }\r\n                }\r\n                else {\r\n                    nodeService.search(query, attrs[\"restrict\"]).then(function (nodes) {\r\n\r\n                        console.log(nodes);\r\n                        process(nodes.map(function (d) {\r\n                            return JSON.stringify(d);\r\n                        }));\r\n                    });\r\n                }\r\n\r\n            }\r\n\r\n            $scope.$watch('restrict', function () {\r\n                $input.data('typeahead').source = getSource();\r\n            }, true);\r\n\r\n\r\n\r\n        }\r\n    };\r\n}]);\r\n","angular.module('neograph.common.typeaheadSimple',[])\r\n.directive('typeaheadSimple', [function () {\r\n    return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n            ngModel: '=?',   //the choice should be an object for 2 way binding with Lookup property\r\n            source: '='\r\n        },\r\n        template: '<input type=\"text\" />',\r\n        link: function ($scope, element, attrs) {\r\n\r\n            var placeholderDefault = \"\";\r\n\r\n            var $input = $(element);//.find('input');\r\n            $input.attr(\"placeholder\", attrs[\"placeholder\"] || placeholderDefault);\r\n\r\n\r\n            $input.typeahead({\r\n                source: $scope.source,\r\n                updater: function (item) {\r\n\r\n\r\n                    $scope.$apply(function () {\r\n\r\n\r\n                        $scope.ngModel = item;\r\n\r\n\r\n                    });\r\n\r\n\r\n\r\n                    return item;\r\n\r\n\r\n                }\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    };\r\n}]);\r\n","angular.module('neograph.controller.mob',['neograph.neo','neograph.utils','neograph.session'])\r\n.controller(\"MobController\", ['$scope', '$window', '$document', 'neo', 'utils', 'session', '$routeParams','$location',\r\n function ($scope, $window, $document, neo, utils, session, routeParams,$location) {\r\n        \r\n        \r\n        $scope.window = {\r\n            tabsWidth: 0,\r\n            topBarHeight: 150\r\n        }\r\n        \r\n        $scope.selection = {\r\n            selectedNode: null,\r\n            selectedEdge: null,\r\n            hoverNode: null\r\n        }\r\n        \r\n        $scope.tabs = [];\r\n        \r\n        $scope.selectTab = function (tab) {\r\n            $scope.selectedTab = tab;\r\n            utils.selectedTab = tab;\r\n        }\r\n        \r\n        if (routeParams.label) {\r\n            \r\n            //load full node including labels and relationships\r\n            neo.getNodeByLabel(routeParams.label, true)\r\n            .then(function (node) {\r\n                $scope.selection.selectedNode = node;\r\n                $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                setTab();\r\n            });\r\n\r\n        }\r\n        \r\n        if (routeParams.pictureid) {\r\n            \r\n           // utils.selectedTab = \"Images\";\r\n            \r\n            //load full node including labels and relationships\r\n            neo.getNode(routeParams.pictureid, true)\r\n            .then(function (node) {\r\n                $scope.selection.selectedNode = node;\r\n                $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                setTab();\r\n            });\r\n\r\n\r\n        }\r\n        \r\n        \r\n        $scope.$watch('nodeLookup', function (n) {\r\n            \r\n            if (n && n.id) {\r\n\r\n                $location.path('/label/'+n.Label)\r\n                \r\n                ////load full node including labels and relationships\r\n                //neo.getNode(n.id, true)\r\n                //.then(function (node) {\r\n                //    $scope.selection.selectedNode = node;\r\n                //    $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                //    setTab();\r\n                //});\r\n            }\r\n        });\r\n        \r\n        \r\n        \r\n        var setTab = function () {\r\n\r\n            if ($scope.tabs.indexOf(utils.selectedTab) > -1) {\r\n                $scope.selectTab(utils.selectedTab);\r\n            }\r\n            else {\r\n                $scope.selectTab($scope.tabs[0]);\r\n            }\r\n\r\n\r\n        }\r\n        \r\n        \r\n        $scope.tabSettings = utils.tabSettings;\r\n        \r\n        $scope.$watch('tabs', function (tabs) {\r\n            $(tabs).each(function (i, tab) {\r\n                \r\n                if (utils.tabSettings[tab] === undefined) {\r\n                    utils.tabSettings[tab] = {\r\n                        'editable': false\r\n                    }\r\n                }\r\n            })\r\n        });\r\n        \r\n        \r\n        \r\n        $scope.toggleEditSelectedTab = function () {\r\n            \r\n            utils.tabSettings[$scope.selectedTab].editable = !$scope.tabSettings[$scope.selectedTab].editable;\r\n        }\r\n        \r\n        //update tabs & properties if labels change\r\n        var settingPropsAndTabs = false;\r\n        \r\n        //how can i stop this firing for newly loaded nodes ?\r\n        $scope.$watchCollection('selection.selectedNode.labels', function (labels) {\r\n            \r\n            if (labels && labels.length && !settingPropsAndTabs) {\r\n                \r\n                settingPropsAndTabs = true;\r\n\r\n                neo.getProps(labels).then(function (out) {\r\n\r\n                    $scope.selection.selectedNode = $.extend(null, out.properties, $scope.selection.selectedNode);\r\n                    $scope.selection.selectedNode.temp.tabs = out.tabs;\r\n                    $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                    if (session.user.favourites[$scope.selection.selectedNode.id]) {\r\n                        $scope.tabs.push(\"Favourite\");\r\n                    }\r\n                    settingPropsAndTabs = false;\r\n\r\n                })\r\n\r\n\r\n            }\r\n\r\n        });\r\n        \r\n        \r\n        $scope.newNode = function () {\r\n            \r\n            var newNode = {\r\n                id: -1,\r\n                labels: [],\r\n                Type: \"\",\r\n                temp: {\r\n                    tabs: [\"Properties\"]\r\n                }\r\n            }\r\n            \r\n            if ($scope.nodeLookupText && (!$scope.selection.selectedNode || $scope.nodeLookupText != $scope.selection.selectedNode.Lookup)) {\r\n                newNode.Lookup = $scope.nodeLookupText;\r\n            }\r\n            \r\n            $scope.selection.selectedNode = newNode;\r\n            $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n            \r\n            $scope.selectedTab = 'Properties';\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }]);\r\n\r\n\r\n\r\n","angular.module('neograph.controller.mob',['neograph.neo','neograph.utils','neograph.session'])\r\n.controller(\"UtilsController\", ['$scope', '$window', 'Neo', 'GraphPresets', 'Metadata', function ($scope, $window, neo, presets, metadata) {\r\n\r\n\r\n    var getPersonData = function (node, callback) {\r\n\r\n\r\n\r\n\r\n        metadata.getFreebasePersonData(node.FreebaseID, function (data) {\r\n\r\n            //    console.dir(data);\r\n\r\n            $.extend(node, data);\r\n\r\n            if (node.FB_date_of_birth && !node.YearFrom) {\r\n\r\n                node.YearFrom = parseInt(node.FB_date_of_birth.split('-')[0]);\r\n            }\r\n            if (node.FB_date_of_death && !node.YearTo) {\r\n\r\n                node.YearTo = parseInt(node.FB_date_of_death.split('-')[0]);\r\n            }\r\n\r\n            callback(node);\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    var getBlurb = function (node, callback) {\r\n\r\n\r\n        metadata.getFreebaseText(node, function (blurb) {\r\n  \r\n            $scope.$apply(function () {\r\n                $.extend(node, blurb);\r\n            });\r\n\r\n            callback(node);\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    var getData = function (node, blurbOnly) {\r\n\r\n        getBlurb(node, function (updated) {\r\n\r\n\r\n            if ($.inArray(\"Person\", updated.labels) > -1 && !blurbOnly) {\r\n\r\n                getPersonData(updated, function (updatedPerson) {\r\n\r\n                    console.log(updatedPerson);\r\n                    neo.saveProps(updatedPerson)\r\n                     .then(function (nid) {\r\n                         console.log(nid + \" saved\");\r\n                     });\r\n                });\r\n            }\r\n            else {\r\n\r\n                console.log(updated);\r\n\r\n                neo.saveProps(updated)\r\n                 .then(function (nid) {\r\n\r\n                     console.log(nid + \" saved\");\r\n\r\n                 });\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n\r\n    $scope.fixNames = function () {\r\n\r\n\r\n\r\n\r\n        neo.getNodeList(\" match (n:Person) where n.Name =~ '(?i).*,.*'\")\r\n            .then(function (nodes) {\r\n                console.log(nodes);\r\n                angular.forEach(nodes, function (node) {\r\n\r\n                    var names = node.Name.split(\",\");\r\n\r\n                    if (names.length == 2) {\r\n\r\n\r\n\r\n                        var newName = names[1].trim() + \" \" + names[0].trim();\r\n                        console.log(\"old name: \" + node.Name + \", new name: \" + newName);\r\n                        node.Name = newName;\r\n\r\n                        neo.saveProps(node)\r\n                              .then(function (nid) {\r\n\r\n                                  console.log(nid + \" saved\");\r\n\r\n                              });\r\n                    }\r\n                    else {\r\n                        console.log(\"ODD NAME: \" + node.Name);\r\n                    }\r\n\r\n                });\r\n\r\n            });\r\n\r\n    }\r\n\r\n    $scope.importQuery = \"match(n:Period) \"\r\n\r\n    $scope.reselect = function (node, mid,name) {\r\n\r\n        node.FreebaseID = mid;\r\n        node.FB_name = name;\r\n        getData(node);\r\n\r\n\r\n    }\r\n\r\n    $scope.clear = function (node) {\r\n\r\n        node.FreebaseID = null;\r\n        node.FB_name = null;\r\n        node[\"FB_blurb\"]=null; \r\n        node[\"FB_blurb_full\"]=null;\r\n\r\n        neo.saveProps(node)\r\n                   .then(function (nid) {\r\n                       console.log(nid + \" saved\");\r\n                   });\r\n\r\n\r\n\r\n    }\r\n\r\n    //TODO: REMOVE ALL FB ASSOCIATIONS FOR THE FOLLOWING QUERY\r\n    //match(n:Global)  where n.Status is null\r\n    //THEY ARE UNSAFE\r\n    //DICTIONARY WOULD BE A BETTER SOURCE FOR THOSE\r\n\r\n    $scope.importFreebaseData = function () {\r\n\r\n\r\n        console.log('importing...');\r\n        // -persons - quotes, dates, nationality, fbid\r\n        neo.getNodeList($scope.importQuery)\r\n            .then(function (nodes) {\r\n                $scope.nodes = nodes;\r\n\r\n                console.log(nodes);\r\n\r\n                angular.forEach(nodes, function (node) {\r\n\r\n                    //if (node.FreebaseID) {\r\n                    //    console.log('already have freebase id for ' + node.Name + ':' + node.FreebaseID)\r\n                    //    getData(node);\r\n                    //}\r\n                    //else {\r\n                    metadata.getFreebaseId(node, function (result) {\r\n                        $scope.$apply(function () {\r\n\r\n                            node.disambiguation = result.response;\r\n\r\n                            var nochange = false;\r\n\r\n                            if (node.FreebaseID) {\r\n                                console.log('already have freebase id for ' + node.Name + ':' + node.FreebaseID)\r\n                            }\r\n                            else if (result.mid && !node.FreebaseID) {\r\n                                nochange = result.mid == node.FreebaseID;\r\n                                node.FreebaseID = result.mid;\r\n                                console.log('got freebase id:' + result.mid + ' for ' + node.Name)\r\n\r\n                            }\r\n                            else {\r\n                                console.log('couldnt get freebase id for ' + node.Name);\r\n                                console.dir(result.response);\r\n\r\n                            }\r\n\r\n                            if (node.FreebaseID) { //&& !nochange\r\n                                //set freebasename\r\n                                angular.forEach(node.disambiguation, function (n) {\r\n                                    if (n.mid === node.FreebaseID) {\r\n                                        node.FB_name = n.name;\r\n                                    }\r\n                                });\r\n                                getData(node,true);//true = blurb only\r\n                            }\r\n\r\n\r\n                        })\r\n\r\n\r\n\r\n                    });\r\n\r\n                    //  }\r\n\r\n\r\n                })\r\n\r\n\r\n\r\n            })\r\n\r\n\r\n        //\r\n        //neo.getNodeList(\"match(n:Global)\", 10);\r\n\r\n    }\r\n\r\n    $scope.quotesToNodes = function () {\r\n\r\n        neo.getNodeList(\"match (n) where n.FB_quotations is not null\")\r\n           .then(function (nodes) {\r\n               angular.forEach(nodes, function (node) {\r\n                   //   console.log(node);\r\n                   angular.forEach(node.FB_quotations, function (quote) {\r\n                       //console.log(quote);\r\n                       var qnode = { id: 0, properties: { Type: 'Quotation', Text: quote, Creator: node.Lookup }, labels: [node.Lookup] };\r\n\r\n                       neo.saveNode(qnode).then(function (n) {\r\n\r\n                           console.log(n);\r\n\r\n                           var edge = { startNode: n.id, endNode: node.id, type: 'BY' }\r\n                           neo.saveEdge(edge, n, node).then(function (e) {\r\n                               console.log(e);\r\n                           });\r\n\r\n                       });\r\n\r\n                   });\r\n\r\n               });\r\n\r\n           });\r\n\r\n\r\n    }\r\n\r\n\r\n}]);\r\n\r\n\r\n\r\n","angular.module('neograph.edge',['neograph.neo', 'neograph.utils','ui.router'])\r\n    .config(function($stateProvider){\r\n         $stateProvider.state('neograph.admin.edge',{\r\n            url:'edge/:edge',\r\n            views:{\r\n                      'edge@':{\r\n                        controller:'controller.edge',\r\n                        templateUrl:'app/edge/edge.html'\r\n                    }\r\n                    ,\r\n                      'edgeHeader@':{\r\n                        controller:'controller.edgeHeader',\r\n                        templateUrl:'app/edge/edgeHeader.html'\r\n                    }\r\n            }\r\n            \r\n        });\r\n    })\r\n    .controller('controller.edgeHeader',function($scope,$stateParams){\r\n        \r\n           if ($stateParams.edge){\r\n                $scope.edge=JSON.parse($stateParams.edge);\r\n    \r\n           }\r\n           \r\n    })\r\n    .controller('controller.edge', function (neo, utils,$stateParams,$scope) {\r\n   \r\n            \r\n           if ($stateParams.edge){\r\n                $scope.edge=JSON.parse($stateParams.edge);\r\n                $scope.predicateType = utils.predicates[$scope.edge.type];\r\n           }\r\n\r\n           $scope.$watch(\"predicateType\", function (predicateType) {\r\n               if (predicateType) {\r\n                   $scope.edge.type = predicateType.Lookup;\r\n               }\r\n           });\r\n\r\n           $scope.deleteEdge = function (e) {\r\n\r\n               neo.deleteEdge(e,\r\n                           $scope.activeView.data.nodes[e.startNode],\r\n                           $scope.activeView.data.nodes[e.endNode])\r\n                   .then(function () {\r\n\r\n\r\n                       //let view handle its own data ?\r\n                       delete $scope.activeView.data.edges[e.id];\r\n                       if ($scope.selection.selectedEdge && $scope.selection.selectedEdge.id === e.id) {\r\n                           $scope.selection.selectedEdge = null;\r\n                       }\r\n\r\n                       $scope.publish(\"deleted\", { selection: { edges: [e] } });\r\n\r\n                   });\r\n\r\n           }\r\n\r\n           $scope.saveEdge = function (e) {\r\n\r\n               neo.saveEdge(e)\r\n               .then(\r\n                   function (g) {\r\n\r\n                       $scope.publish(\"dataUpdate\", g)\r\n\r\n                       //update cache\r\n                       for (key in g.nodes) {\r\n                           $scope.activeView.data.nodes[key] = g.nodes[key];\r\n                       }\r\n\r\n                       for (key in g.edges) {\r\n                           $scope.activeView.data.edges[key] = g.edges[key];\r\n\r\n                           if ($scope.selection.selectedEdge && (key === $scope.selection.selectedEdge.id || !$scope.selection.selectedEdge.id)) {\r\n                               $scope.selection.selectedEdge = g.edges[key];\r\n                           }\r\n\r\n                       }\r\n                   });\r\n           }\r\n\r\n});\r\n    \r\n","angular.module('neograph.graph',['neograph.utils','ui.router'])\r\n    .directive('graph', ['utils','$state', function (utils,$state) {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/graph/graph.html',\r\n        scope: {\r\n            data: '=',\r\n            active: '=',\r\n            network: '='\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n            \r\n            var graphWidth= 1300;\r\n            var graphHeight=1300;\r\n            var topBarHeight=150;\r\n\r\n\r\n            var options = utils.graphOptions;\r\n            options.onConnect= function (data, callback) {\r\n\r\n                var newEdge = {\r\n                    start: $scope.data.nodes[data.from],\r\n                    type: utils.defaultEdgeType($scope.data.nodes[data.from].Type, $scope.data.nodes[data.to].Type),\r\n                    end: $scope.data.nodes[data.to],\r\n                    properties: { Weight: 3 }\r\n                }\r\n                $scope.publish(\"newEdge\", newEdge);\r\n            }\r\n\r\n            $scope.data = {\r\n                nodes: {},\r\n                edges:{}\r\n            }\r\n\r\n            var graph = {\r\n                nodes: new vis.DataSet(),\r\n                edges: new vis.DataSet()\r\n            };\r\n\r\n            var network = new vis.Network($element.find('.graphContainer')[0], graph, options);\r\n\r\n\r\n\r\n            //network.on('startStabilization', function () {//should be network.on('NewData')\r\n            //    $window.setTimeout( function () {  network.zoomExtent();},2000);\r\n\r\n            //});\r\n\r\n\r\n            //set size to window size\r\n            $scope.$watch('window', function (w) {\r\n                network.setSize(graphWidth + \"px\", graphHeight + \"px\");\r\n            });\r\n\r\n            //fit to screen on resize\r\n            network.on('resize', function (params) {\r\n                if (getSelectedNodeId()) {\r\n                    network.focusOnNode(getSelectedNodeId(), { scale: 1, animation: { duration: 1000, easingFunction: 'easeOutCubic' } });\r\n                }\r\n                else {\r\n                    network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n                }\r\n            });\r\n\r\n            graph.nodes.on('*', function (event, properties, senderId) {\r\n                //  console.log('event:', event, 'properties:', properties, 'senderId:', senderId);\r\n                if (graph.nodes.length) {\r\n                    $(\".network-manipulationUI.connect\").css(\"display\", \"inline-block\");\r\n                }\r\n                else {\r\n                    $(\".network-manipulationUI.connect\").hide();\r\n                }\r\n\r\n            });\r\n\r\n            var suppressSelected = false;\r\n\r\n            $scope.subscribe(\"selected\", function (params) {\r\n\r\n                if (params.sender != \"Graph\" &&\r\n                        $scope.active &&\r\n                        params.selection.nodes &&\r\n                        params.selection.nodes.length &&\r\n                        params.selection.nodes[0] != getSelectedNodeId() &&\r\n                        graph.nodes.get(params.selection.nodes[0])\r\n                        ) {\r\n                    suppressSelected = true;\r\n\r\n                    var nodeids = params.selection.nodes.map(function (n) { return n.id });\r\n                    network.selectNodes(nodeids);\r\n                    suppressSelected = false;\r\n                }\r\n\r\n\r\n            });\r\n\r\n            // add event listeners\r\n            network.on('select', function (params) {\r\n                if (!suppressSelected) {\r\n                    \r\n                    \r\n                    if (params.nodes.length===1){\r\n                          $state.go('admin.main.node.view',{node:$scope.data.nodes[params.nodes[0]].Label});\r\n                    }\r\n                    else if (params.edges.length===1){\r\n                        \r\n                        var id=params.edges[0];\r\n                        var startNode=$scope.data.nodes[$scope.data.edges[id].startNode];\r\n                        var endNode =$scope.data.nodes[$scope.data.edges[id].endNode];\r\n                        var edge ={\r\n                            id: id,\r\n                            start: {Lookup:startNode.Lookup},\r\n                            end:  {Lookup:endNode.Lookup},\r\n                            type: $scope.data.edges[id].type,\r\n                            properties: $scope.data.edges[id].properties\r\n                        }\r\n                        \r\n                        $state.go('admin.main.edge.view',{edge:JSON.stringify(edge)});\r\n                    }\r\n                    \r\n\r\n/*\r\n                    var nodes = [];\r\n                    var edges = [];\r\n\r\n                    angular.forEach(params.nodes, function (id) {\r\n                        nodes.push($scope.data.nodes[id]);\r\n                    });\r\n\r\n\r\n                    angular.forEach(params.edges, function (id) {\r\n\r\n                        edges.push({\r\n                            id: id,\r\n                            start: $scope.data.nodes[$scope.data.edges[id].startNode],\r\n                            end: $scope.data.nodes[$scope.data.edges[id].endNode],\r\n                            type: $scope.data.edges[id].type,\r\n                            properties: $scope.data.edges[id].properties\r\n                        });\r\n\r\n                    });\r\n                    \r\n                    */\r\n\r\n/*\r\n                    var params = { sender: \"Graph\", selection: { nodes: nodes, edges: edges } };\r\n\r\n                    console.log(params);\r\n                    $scope.$apply(function () {\r\n                        $scope.publish(\"selected\", params);\r\n                    })\r\n                    */\r\n                    \r\n                  \r\n                }\r\n            });\r\n\r\n            $scope.subscribe(\"deleted\", function (params) {\r\n                console.log(params);\r\n                if (params.selection.nodes && params.selection.nodes.length) {\r\n                    var nodeids = params.selection.nodes.map(function (n) { return n.id });\r\n                    graph.nodes.remove(nodeids);\r\n                }\r\n                if (params.selection.edges && params.selection.edges.length) {\r\n                    var edgeids = params.selection.edges.map(function (n) { return n.id });\r\n                    graph.edges.remove(edgeids);\r\n                }\r\n            });\r\n\r\n            $scope.subscribe(\"focus\", function (nodeid) {\r\n\r\n                network.focusOnNode(nodeid, { scale: 1, animation: { duration: 1000, easingFunction: 'easeOutCubic' } });\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n            var getSelectedNodeId = function () {\r\n\r\n                var selectedNodes = network.getSelectedNodes();\r\n                if (selectedNodes.length == 1) {\r\n                    return selectedNodes[0];\r\n                }\r\n                else return undefined;\r\n\r\n            }\r\n\r\n            $(\".network-manipulationUI.connect\").hide();\r\n\r\n            //capture hover node\r\n            $scope.hoverNode = undefined;\r\n            $('.graphContainer').on('mousemove',\r\n                function (event) {\r\n                    var n = network._getNodeAt({ x: event.pageX, y: event.pageY - topBarHeight - 55 });\r\n                    $scope.$apply(function () {\r\n                        if (n) {\r\n                            var dataNode = $scope.data.nodes[n.id];\r\n                            $scope.hoverNode = dataNode;\r\n                            $scope.publish(\"hover\", dataNode);\r\n                        }\r\n                        else {\r\n                            $scope.publish(\"hover\", undefined);\r\n                            $scope.hoverNode = undefined;\r\n\r\n                        }\r\n                    });\r\n                });\r\n\r\n\r\n            //freeze simulation if not active\r\n            $scope.$watch('active',\r\n                function (active) {\r\n                    if (active != undefined) {\r\n                        network.freezeSimulation(!active);\r\n                    }\r\n                });\r\n\r\n          \r\n\r\n\r\n         \r\n\r\n           $scope.$watch('data', function () {\r\n                console.log('new change')\r\n                if ($scope.active) {\r\n                    console.log('drawing new graph');\r\n                    graph.nodes.clear();\r\n                    graph.edges.clear();\r\n                    var gArr = utils.toGraphData($scope.data);\r\n                    graph.nodes.add(gArr.nodes);\r\n                    graph.edges.add(gArr.edges);\r\n                }\r\n            })\r\n\r\n            //updates existing data (not replace)\r\n            $scope.subscribe(\"dataUpdate\", function (g) {\r\n                console.log('graph: dataUpdate');\r\n                if ($scope.active && $scope.data) {\r\n                    console.log('updating graph');\r\n                    $.extend($scope.data.edges, g.edges);\r\n                    $.extend($scope.data.nodes, g.nodes);\r\n                    var gArr = utils.toGraphData(g);\r\n                    graph.edges.update(gArr.edges);\r\n                    graph.nodes.update(gArr.nodes);\r\n                }\r\n\r\n            });\r\n\r\n       \r\n\r\n        }\r\n\r\n    }\r\n}])","angular.module('neograph.interaction.draggable',[])\r\n    .directive('draggable', function () {\r\n    return {\r\n\r\n        link: function ($scope, element, attrs) {\r\n          \r\n            var initLeft = $(element).position().left;\r\n\r\n            $(element).draggable({ \r\n                axis: \"x\" ,  \r\n                drag: function() {\r\n                \r\n                    var change = initLeft - $(element).position().left;\r\n                  \r\n                    $scope.$apply(function () {\r\n                        $scope.window.tabsWidth = $scope.window.tabsWidth + change;\r\n                    });\r\n                   \r\n\r\n                    initLeft = $(element).position().left;\r\n\r\n                    }\r\n            });\r\n        }\r\n    };\r\n});\r\n","angular.module('neograph.interaction',[\r\n    'neograph.interaction.draggable',\r\n    'neograph.interaction.resizable',\r\n    'neograph.interaction.selectable'\r\n])","angular.module('neograph.interaction.resizable',[])\r\n.directive('resizable', function ($window) {\r\n    return {\r\n        scope: {\r\n            window: '='\r\n        },\r\n        controller: function ($scope, $element) {\r\n\r\n            var w = angular.element($window);\r\n            var getWindowDimensions = function () {\r\n                var width = w.width();\r\n                var height = w.height();\r\n                return {\r\n                    'height': height,\r\n                    'width': width,\r\n                    'tabsWidth': $scope.window.tabsWidth,\r\n                    'tabsWidthInner': $scope.window.tabsWidth-10,\r\n                    'graphWidth': width - $scope.window.tabsWidth,\r\n                    'graphHeight': height - $scope.window.topBarHeight,\r\n                    'topBarHeight': $scope.window.topBarHeight,\r\n                    'tabsHeight': height - $scope.window.topBarHeight\r\n                };\r\n            };\r\n\r\n            $scope.window = getWindowDimensions();\r\n\r\n            $scope.$watch(getWindowDimensions, function (newValue, oldValue) {\r\n\r\n                $scope.window = newValue;\r\n\r\n            }, true);\r\n\r\n            w.bind('resize', function () {\r\n                $scope.$apply();\r\n            });\r\n   \r\n            //w.bind(\"debouncedresize\", function (event) {\r\n            //    $scope.$apply();\r\n\r\n            //});\r\n\r\n        }\r\n    }\r\n});\r\n\r\n","angular.module('neograph.interaction.selectable',[])\r\n.directive('selectable', function () {\r\n    return {\r\n        scope: {\r\n            selected: '='\r\n\r\n        },\r\n        link: function ($scope, element, attrs) {\r\n\r\n            $scope.$watch($(element).find(\"li.ui-selected\").length, function (i) {\r\n\r\n\r\n\r\n\r\n\r\n\r\n                $(element).selectable({\r\n                    filter: \"li\",\r\n                    stop: function (event, ui) {\r\n\r\n\r\n                        var selected = [];\r\n\r\n\r\n                        $(element).find(\"li.ui-selected\").each(function (i, e) {\r\n                            selected.push(parseInt($(e).attr(\"nodeindex\")));\r\n                        });\r\n\r\n                        $scope.$apply(function () {\r\n\r\n                            $scope.selected = selected;\r\n\r\n                        });\r\n\r\n                    }\r\n                    ,\r\n                    cancel: '.badge, .label'\r\n\r\n\r\n\r\n                });\r\n\r\n\r\n            });\r\n\r\n\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n","angular.module('neograph.layout',[])\r\n.directive('tabs', function () {\r\n    return {\r\n        restrict: 'E',\r\n        transclude: true,\r\n        scope: {\r\n            tabs:'=',//required to remove panes no longer available\r\n            selected: '=?'\r\n        },\r\n        controller: function ($scope) {\r\n            var panes = $scope.panes = [];\r\n            var self = this;\r\n\r\n            $scope.select = function (pane) {\r\n                angular.forEach(panes, function (pane) {\r\n                    pane.selected = false;\r\n                });\r\n                pane.selected = true;\r\n                $scope.selected = pane.key;\r\n            };\r\n\r\n            this.add = function (pane) {\r\n                if (panes.length === 0) {\r\n                    $scope.select(pane);\r\n                }\r\n                panes.push(pane);\r\n            };\r\n\r\n            this.remove = function (pane) {\r\n                //console.log('remove')\r\n                //console.log(pane);\r\n                angular.forEach(panes, function (p, i) {\r\n                    if (pane.key == p.key) {\r\n                        panes.splice(i, 1);\r\n                        if (pane.selected) {\r\n                            pane.selected = false;\r\n                            $scope.select($scope.panes[0]);\r\n                        }\r\n\r\n\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n            $scope.$watch('selected', function (key) {//the title of the selected pane\r\n               \r\n                if (key) {\r\n                    angular.forEach(panes, function (pane) {\r\n                       \r\n                        pane.selected = pane.key === key;\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n\r\n            //remove tabs not in list (child pane only adds them)\r\n            $scope.$watch('tabs', function (tabs) {//the title of the selected pane\r\n\r\n                if (tabs) {\r\n                    angular.forEach(panes, function (pane) {\r\n\r\n                        if (tabs.indexOf(pane.key) === -1) {\r\n\r\n                            self.remove(pane);\r\n                        }\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n\r\n        },\r\n        templateUrl: 'app/layout/tabs.html'\r\n    };\r\n})\r\n.directive('tabPane', function () {\r\n    return {\r\n        require: '^tabs',\r\n        restrict: 'E',\r\n        transclude: true,\r\n        scope: {\r\n            key:'@',\r\n            title: '=',\r\n            visible: '=',\r\n            active: '=?',\r\n            window:'='\r\n        },\r\n        link: function ($scope, element, attrs, tabsCtrl) {\r\n\r\n\r\n               tabsCtrl.add($scope);\r\n\r\n\r\n            //$scope.$watch('visible', function (visible) {\r\n\r\n            //    if (visible) {\r\n            //        tabsCtrl.addPane($scope);\r\n            //    }\r\n            //    else {\r\n            //        tabsCtrl.removePane($scope);\r\n\r\n            //    }\r\n\r\n            //});\r\n\r\n         \r\n            $scope.$watch('active', function (active) {//the title of the selected pane\r\n\r\n                $scope.selected = active;\r\n             \r\n            });\r\n\r\n\r\n        },\r\n        templateUrl: 'app/layout/tabPane.html'\r\n    };\r\n})\r\n.directive('noBubble', function () {\r\n    return {\r\n\r\n        link: function ($scope, element, attrs, tabsCtrl) {\r\n\r\n\r\n            \r\n            $(element).on('keydown', function (event) {\r\n  \r\n                event.stopPropagation()\r\n            });\r\n\r\n        },\r\n        templateUrl: 'app/layout/tabPane.html'\r\n    };\r\n\r\n\r\n});","  angular.module(\"neograph.models.node\",[\"neograph.models.predicate\"])\r\n  .factory(\"nodeFactory\",function(predicateFactory){\r\n      \r\n    function Node(data){\r\n        \r\n        this.labels=[];\r\n         \r\n        Object.assign(this,data);\r\n\r\n        //instead i think i should call the service to get the reverse\r\n        for (var relKey in this.relationships) {\r\n            var rel = this.relationships[relKey];\r\n            rel.predicate = predicateFactory.create(rel.predicate);\r\n        }\r\n                        \r\n        \r\n    }\r\n        \r\n    Node.prototype.isPicture = function(){\r\n        \r\n        return this.labels.indexOf(\"Picture\") > -1;\r\n\r\n    };\r\n    \r\n    Node.prototype.isCustomField = function(key){\r\n    \r\n            return key != 'lookup' \r\n            && key != 'class' \r\n            && key != 'label' \r\n            && key != 'description' \r\n            && key != 'text' && \r\n            key != 'name' && \r\n            key != 'systemInfo' &&\r\n            key != 'labels' &&\r\n            key != 'id' &&\r\n            key != 'created' &&\r\n            key != 'image' &&\r\n            key != 'relationships' &&\r\n            key != 'labelled';\r\n  \r\n    }\r\n    \r\n\r\n    return {\r\n        create:function(data){\r\n            return new Node(data);\r\n        }\r\n    }\r\n        \r\n      \r\n  });\r\n  \r\n  \r\n  ","  angular.module(\"neograph.models.predicate\",[])\r\n  .factory(\"predicateFactory\",function(){\r\n      \r\n      function Predicate(data){\r\n          \r\n        Object.assign(this,data);\r\n        \r\n    }\r\n        \r\n    Predicate.prototype.setDirection = function(direction){\r\n        this.direction = direction;\r\n        return this;\r\n    };\r\n \r\n    Predicate.prototype.toString = function(){\r\n        if (this.direction===\"in\" && !this.symmetrical){\r\n             if (this.reverse){//use reverse if present\r\n                return this.reverse.replace(/_/g, ' ').toLowerCase();\r\n            }\r\n            else{\r\n                var lookup = this.lookup.toUpperCase();\r\n                if (lookup === \"CREATED\" || lookup===\"CREATES\")\r\n                    return \"created by\";\r\n                else if (lookup === \"INFLUENCES\")\r\n                    return \"influenced by\";\r\n                else if (lookup === \"INSPIRES\")\r\n                    return \"inspired by\";\r\n                else if (lookup === \"ANTICIPATES\")\r\n                    return \"anticipated by\";\r\n                else if (lookup === \"DEVELOPS\")\r\n                    return \"developed by\";\r\n                else if (lookup === \"DEPICTS\")\r\n                    return \"depicted by\";\r\n                else if (lookup === \"TYPE_OF\")\r\n                    return \"type(s)\";\r\n                else\r\n                    return \"(\" + this.lookup.replace(/_/g, ' ').toLowerCase() + \")\";\r\n            }\r\n        }\r\n        \r\n       // if (!this.isDirectional || !this.direction || this.direction === \"out\") {\r\n       return this.lookup.replace(/_/g, ' ').toLowerCase();\r\n       \r\n        \r\n    };\r\n    \r\n    Predicate.prototype.flip = function () {\r\n    \r\n        if (!this.isDirectional) {\r\n            return;\r\n        }\r\n        if (this.direction === \"in\") {\r\n            this.setDirection(\"out\");\r\n        }\r\n        else {\r\n            this.setDirection(\"in\");\r\n        }\r\n        return this;\r\n\r\n    };\r\n\r\n    return {\r\n        create:function(data){\r\n            return new Predicate(data);\r\n        }\r\n    }\r\n        \r\n      \r\n  });\r\n  \r\n  \r\n  ","angular.module('neograph.neo.client',['ngResource','neograph.settings'])\r\n.factory(\"neoClient\", ['$resource','settings', function ($resource,settings) {\r\n    //return $resource('http://localhost:1337/node/match', {txt:'@txt',restrict:'@restrict'}, {\r\n    //    matchNodes: {\r\n    //        method: 'POST',\r\n    //        isArray:true\r\n    //    }\r\n    //});\r\n\r\n    //return $resource(null,null, {\r\n    //    matchNodes: {\r\n    //        url: 'http://localhost:1337/node/match',\r\n    // //       params: {txt:'',restrict:''},\r\n    //        method: 'POST',\r\n    //        isArray: true\r\n    //    }\r\n    //});\r\n\r\n    var root = settings.apiRoot;\r\n\r\n    return {\r\n\r\n        node:$resource(null,null, {\r\n            search: {\r\n                url: root+'/search',\r\n            \r\n                method: 'POST',\r\n                isArray: true\r\n            }\r\n            ,\r\n            get: {\r\n                url: root+'/node/get/:id',\r\n                method: 'GET',\r\n            }\r\n            ,\r\n            getWithRels: {\r\n                url: root + '/node/getWithRels/:id',\r\n                method: 'GET',\r\n            }\r\n                   ,\r\n            getRelationships: {\r\n                url: root + '/node/relationships/:id',\r\n                method: 'GET',\r\n            }\r\n            ,\r\n            getOne: {\r\n                url: root + '/node/single',\r\n                method: 'POST',\r\n            }\r\n            ,\r\n            getList: {\r\n                url: root + '/node/list',\r\n                method: 'POST',\r\n                isArray:true\r\n            }\r\n            ,\r\n            save: {\r\n                url: root + '/node/save',\r\n        \r\n                method: 'POST'\r\n            },\r\n            saveProps: {\r\n                url: root + '/node/saveProps',\r\n          \r\n                method: 'POST'\r\n            },\r\n            saveRels: {\r\n                url: root + '/node/saveRels',\r\n        \r\n                method: 'POST'\r\n            },\r\n            saveWikipagename: {\r\n                url: root + '/node/saveWikipagename',\r\n        \r\n                method:'POST'\r\n            }\r\n            ,\r\n            saveMultiple: {\r\n                url: root + '/node/saveMultiple',\r\n           \r\n                method: 'POST'\r\n            }\r\n            ,\r\n            del: {\r\n                url: root + '/node/delete',\r\n          \r\n                method: 'POST'\r\n            }\r\n            ,\r\n            destroy: {\r\n                url: root + '/node/destroy',\r\n          \r\n                method: 'POST'\r\n            },\r\n            restore: {\r\n                url: root + '/node/restore',\r\n\r\n                method: 'POST'\r\n            }\r\n            ,\r\n            getProps: {\r\n                url: root + '/node/getProps',\r\n\r\n                method: 'POST'\r\n\r\n            }\r\n               ,\r\n            getImages: {\r\n                url: root + '/node/getImages',\r\n                isArray:true,\r\n                method: 'POST'\r\n\r\n            }\r\n                \r\n\r\n\r\n        }),\r\n        edge: $resource(null, null, {\r\n            save: {\r\n                url: root + '/edge/save',\r\n                method: 'POST'\r\n            }\r\n            ,\r\n            del: {\r\n                url: root + '/edge/delete',\r\n                method: 'POST'\r\n\r\n            }\r\n            ,\r\n            getImageRelationships: {\r\n                url: root + '/edge/imagerelationships',\r\n                method: 'POST'\r\n            }\r\n        })\r\n        ,\r\n        user:$resource(null, null, {\r\n            saveFavourite: {\r\n                url: root + '/user/saveFavourite',\r\n        \r\n                method: 'POST'\r\n              \r\n            },\r\n            get: {\r\n                url: root + '/user/:user',\r\n                method: 'GET'\r\n            }\r\n        })\r\n        ,\r\n        graph: $resource(null, null, {\r\n            get: {\r\n                url: root + '/graph',\r\n     \r\n                method: 'POST'\r\n            }\r\n        })\r\n            ,\r\n        type: $resource(null, null, {\r\n            getAll: {\r\n                url: root + '/types',\r\n                method: 'GET'\r\n            }\r\n        })\r\n        ,\r\n       predicate: $resource(null, null, {\r\n            getAll: {\r\n                url: root + '/predicates',\r\n                method: 'GET'\r\n            }\r\n        })\r\n        ,\r\n        utils:$resource(null, null, {\r\n            getDistinctLabels: {\r\n                url: root + '/utils/distinctLabels',\r\n                isArray:true,\r\n                method: 'POST'\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n}])\r\n","angular.module(\"neograph.neo\",[\"neograph.utils\",\"neograph.neo.client\"])\r\n.factory(\"neo\", [\"neoClient\",  \"utils\",function (neoClient, utils) {\r\n\r\n\r\n    var that = {\r\n \r\n        getGraph: function (q,returnArray) {\r\n\r\n            return neoClient.graph.get({ q: q, returnArray: returnArray }).$promise.then(function (data) {\r\n\r\n                var out = data.toJSON();\r\n                console.dir(out);\r\n                return out;\r\n\r\n            });\r\n        }\r\n       ,\r\n        //returns all relationships between supplied nodes, which can be vis.Dataset or graph data object\r\n        getAllRelationships: function (nodes) {\r\n            var nodeIds = \"\";\r\n\r\n            if (nodes.getIds) //if vis.DataSet\r\n            {\r\n                nodeIds = nodes.getIds({ returnType: 'Array' }).join(\",\");\r\n            }\r\n            else { //otherwise data object\r\n\r\n                for (var key in nodes) {\r\n                    if (nodeIds.length) {\r\n                        nodeIds += \",\";\r\n                    }\r\n                    nodeIds += key;\r\n                }\r\n            }\r\n\r\n            var q = \"MATCH a -[r]- b WHERE id(a) IN[\" + nodeIds + \"] and id(b) IN[\" + nodeIds + \"] and not (a-[:TYPE_OF]-b) return r\";\r\n\r\n            return that.getGraph(q);\r\n\r\n        }\r\n  \r\n             ,\r\n        getRelationships: function (id) {\r\n\r\n                return neoClient.node.getRelationships({ id: id }).$promise.then(function (data) {\r\n                    return data.toJSON();\r\n                });\r\n            \r\n\r\n        }\r\n\r\n        ,\r\n        saveMultiple: function (multiple) {\r\n\r\n        \r\n            return neoClient.node.saveMultiple({ multiple: multiple }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n\r\n        }\r\n           ,\r\n        //saves edge to neo (update/create)\r\n        //TODO: according to certain rules labels will need to be maintained when relationships are created. (update not required as we always delete and recreate when changing start/end nodes)\r\n        //tag a with label b where:\r\n        // a=person and b=provenance (eg painter from france)\r\n        // a=person and n=group, period (eg painter part of les fauves / roccocco)\r\n        // a=picture and b=non-person (eg picture by corot / of tree) - although typically this will be managed through labels directly (which will then in turn has to keep relationships up to date)\r\n        saveEdge: function (e) {//startNode and endNode provide the full node objects for the edge\r\n\r\n            return neoClient.edge.save({ edge: e }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n        }\r\n        ,\r\n        saveFavourite: function (node, user) {\r\n\r\n           \r\n            return neoClient.user.saveFavourite({ user: user, node: node }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n\r\n        }\r\n\r\n        ,\r\n        deleteEdge: function (edge) {\r\n\r\n            if (edge && edge.id) {\r\n\r\n                return neoClient.edge.delete({ edge: edge }).$promise.then(function (data) {\r\n                    return data.toJSON();\r\n                });\r\n            \r\n\r\n            }\r\n\r\n        }\r\n        ,\r\n        getUser: function (userLookup) {\r\n          \r\n            return neoClient.user.get({ user: userLookup }).$promise.then(function (data) {\r\n        \r\n                return data.toJSON();\r\n            });\r\n\r\n        }\r\n        ,\r\n\r\n        getOne: function (q) {//q must be a match return a single entity n\r\n\r\n          \r\n\r\n            return neoClient.node.getOne({ q: q }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n        }\r\n\r\n     ,\r\n        getImageRelationships: function (edge) { //loks up id/label first then call get by label\r\n\r\n            return neoClient.edge.getImageRelationships({ edge: edge }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n        }\r\n\r\n        ,\r\n        //Alternatively i could query the actual labels and merge them into a distinct array\r\n        getDistinctLabels: function (labels) {\r\n\r\n          \r\n            return neoClient.utils.getDistinctLabels({ labels: labels }).$promise;//returns array\r\n            \r\n\r\n\r\n        }\r\n        ,\r\n        getDistinctLabelsQuery: function (q) {\r\n\r\n            return neoClient.utils.getDistinctLabels({ q: q }).$promise;//returns array\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return that;\r\n\r\n}]);\r\n","angular.module('neograph.session',['neograph.neo'])\r\n    .factory('session', ['neo', '$q', function (neo, $q) {\r\n\r\n    var anonUser = {\r\n        Lookup: 'Anonymous',\r\n        roles: { \"Public\": {}}\r\n    }\r\n\r\n\r\n    var session = {\r\n\r\n        init: function () {\r\n\r\n            neo.getUser(\"Julian\").then(function (user) {\r\n\r\n                session.user = user;\r\n                session.signedIn = true;\r\n            });\r\n\r\n            return session;\r\n\r\n        }\r\n        ,\r\n        signingIn: false\r\n        ,\r\n        signedIn: false\r\n        ,\r\n        user: anonUser\r\n        ,\r\n        signIn: function (username, password) {\r\n\r\n            return neo.authenticate(username, password).then(function (user) {\r\n\r\n                session.user = user;\r\n\r\n\r\n                console.log(session.user)\r\n             //   session.apps = service.getApps(session.user.roles);\r\n\r\n\r\n                localStorage.username = session.user.username;\r\n\r\n\r\n                session.signedIn = true;\r\n\r\n                if (user.roles.PreReg) {\r\n                    $('body').addClass('prereg');\r\n                }\r\n                else {\r\n                    $('body').removeClass('prereg');\r\n                }\r\n\r\n\r\n\r\n            }, function (failMessage) {\r\n                console.log(failMessage);\r\n                return $q.reject(failMessage);\r\n            });\r\n\r\n        }\r\n        ,\r\n        signOut: function () {\r\n\r\n            session.user = anonUser;\r\n            localStorage.username = \"\";// = JSON.stringify(session.user);\r\n            session.signedIn = false;\r\n          //  session.apps = service.getApps(session.user.roles);\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    if (localStorage.username) {\r\n        session.user = neo.getUser(localStorage.username);\r\n    }\r\n\r\n    if (session.user.name != 'Anonymous') {\r\n        session.signedIn = true;\r\n    }\r\n\r\n //   session.apps = service.getApps(session.user.roles);\r\n\r\n    return session.init();\r\n\r\n\r\n}])","angular.module(\"neograph.utils\",[\"neograph.neo.client\",\"neograph.query.presets\"])\r\n    .factory(\"utils\", [\"neoClient\",\"queryPresets\", function (neoClient,presets) {\r\n\r\n\r\n    Array.prototype.diff = function (a) {\r\n        return this.filter(function (i) { return a.indexOf(i) < 0; });\r\n    };\r\n\r\n    Array.prototype.ids = function () {\r\n        return this.map(function (e) { return e.id });\r\n    }\r\n\r\n    Array.prototype.hasAny = function (a) {\r\n        return this.filter(function (i) { return a.indexOf(i) > -1; }).length > 0;\r\n    };\r\n\r\n    Array.prototype.unique = function () {\r\n        var a = [];\r\n        for (i = 0; i < this.length; i++) {\r\n            var current = this[i];\r\n            if (a.indexOf(current) < 0) a.push(current);\r\n        }\r\n        return a;\r\n    }\r\n\r\n    var Predicate = function (lookup, direction) {\r\n        this.Lookup = lookup;\r\n\r\n        this.IsDirectional = this.Lookup != \"ASSOCIATED_WITH\";\r\n\r\n        this.Direction = direction;\r\n\r\n        this.Type = 'Predicate';\r\n\r\n        this.Key = function () {\r\n\r\n            if (!this.IsDirectional || !this.Direction) {\r\n                return this.Lookup\r\n            }\r\n            else if (this.Direction == \"out\") {\r\n                return this.Lookup + \" ->\";\r\n            }\r\n            else {\r\n                return this.Lookup + \" <-\";\r\n            }\r\n        }\r\n\r\n        this.ToString = function () {\r\n\r\n            if (!this.IsDirectional || !this.Direction || this.Direction == \"out\") {\r\n                return this.Lookup.replace(/_/g, ' ').toLowerCase();\r\n            }\r\n            else {\r\n\r\n                if (this.Lookup == \"CREATED\")\r\n                    return \"created by\"\r\n                else if (this.Lookup == \"INFLUENCES\")\r\n                    return \"influenced by\"\r\n                else if (this.Lookup == \"INSPIRES\")\r\n                    return \"inspired by\"\r\n                else if (this.Lookup == \"ANTICIPATES\")\r\n                    return \"anticipated by\"\r\n                else if (this.Lookup == \"DEVELOPS\")\r\n                    return \"developed by\"\r\n                else if (this.Lookup == \"DEPICTS\")\r\n                    return \"depicted by\"\r\n                else if (this.Lookup == \"TYPE_OF\")\r\n                    return \"type(s)\"\r\n                else\r\n                    return \"(\" + this.Lookup.replace(/_/g, ' ').toLowerCase() + \")\";\r\n\r\n            }\r\n\r\n        }\r\n\r\n        this.Reverse = function () {\r\n\r\n            if (!this.IsDirectional) {\r\n                return;\r\n            }\r\n\r\n            if (this.Direction === \"in\") {\r\n                this.Direction = \"out\";\r\n            }\r\n            else {\r\n                this.Direction = \"in\";\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    var View = function (key, type) {\r\n\r\n\r\n\r\n        this.key = key;\r\n        this.name = key;\r\n        this.type = type;\r\n\r\n        this.data = {\r\n            nodes: {},\r\n            edges: {}\r\n        }\r\n\r\n\r\n        if (type == \"Graph\") {\r\n            this.queryPresets = presets;\r\n            this.queryGenerators = {};\r\n            this.queryGenerators.nodeGraph = {\r\n                type: \"nodeGraph\",\r\n                options: {}\r\n            }\r\n        }\r\n\r\n        if (type == \"Grid\") {\r\n            this.queryPresets = presets;\r\n            this.queryGenerators = {};\r\n\r\n            this.queryGenerators.nodeFilter = {\r\n                type: \"nodeFilter\",\r\n                options: {}\r\n            }\r\n\r\n            this.queryGenerators.favouritesFilter = {\r\n                type: \"favouritesFilter\",\r\n                options: {}\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n \r\n    var graphNodeFromNeoNode = function (neoNode) {\r\n\r\n        var type = neoNode.Type;\r\n        var yf = parseInt(neoNode.YearFrom);\r\n        var yt = parseInt(neoNode.YearTo);\r\n\r\n        var y = yt;\r\n\r\n        if (yf && yt) {\r\n            y = yt - ((yt - yf) / 2);\r\n        }\r\n\r\n        var level = 0;\r\n\r\n        var startYear = 1400;\r\n        var endYear = 2000;\r\n        var step = 5;\r\n        var cnt = 1;\r\n        for (var i = startYear; i < endYear; i += step) {\r\n            if (y >= i && y < i + step) {\r\n                level = cnt;\r\n            }\r\n\r\n            cnt += 1;\r\n        }\r\n\r\n        if (y > endYear) {\r\n            level = cnt;\r\n        }\r\n\r\n        var person = utils.isPerson(type);\r\n\r\n\r\n        var node = {\r\n            id: neoNode.id,\r\n            label: neoNode.Lookup,\r\n            size: neoNode.Status / 10,\r\n            group: neoNode.Type,\r\n            // color: ==='Group' ? 'orange': 'pink',\r\n            mass: type == 'Group' ? 0.5 : 1,\r\n            radius: person ? neoNode.Status : 1,\r\n            //    title: neoNode.FB_blurb,//neoNode.Lookup + \" - \" + type + \" - \" + neoNode.Status,\r\n            level: level //for hiearchichal layout\r\n        }\r\n\r\n        var image = (type === 'Painting' || type === 'Picture') ? neoNode.temp.thumbUrl : null;\r\n\r\n        if (image) {\r\n            node.image = image;\r\n            node.shape = 'image';\r\n        }\r\n        else if (type == \"Provenance\") {\r\n            node.fontSize = 50;\r\n            node.fontColor = 'lightgray';\r\n            node.color = 'transparent';\r\n        }\r\n        else if (type == \"Iconography\" || type == \"Place\") {\r\n            node.shape = 'ellipse';\r\n        }\r\n        else if (type == \"Quotation\") {\r\n\r\n            node.shape = 'box';\r\n            node.color = 'transparent';\r\n            node.label = neoNode.Text;\r\n        }\r\n        else if (type == \"User\") {\r\n            node.shape = 'star';\r\n            node.size = 20;\r\n        }\r\n        else if (type == \"Link\") {\r\n            node.label = neoNode.Name;\r\n            node.shape = 'box';\r\n            node.color = 'transparent';\r\n        }\r\n        else {\r\n            node.shape = person ? 'dot' : 'box';\r\n        }\r\n\r\n        return node;\r\n\r\n    };\r\n\r\n    var graphEdgeFromNeoEdge = function (neoEdge) {\r\n        //id, from, to, type, properties\r\n\r\n        var type = neoEdge.type;\r\n\r\n        var directional =\r\n                   type == \"INFLUENCES\" ||\r\n                   type == \"INSPIRES\" ||\r\n                   type == \"ANTICIPATES\" ||\r\n                   type == \"DISCOVERS\" ||\r\n                   type == \"TEACHES\" ||\r\n                   type == \"ADMIRES\" ||\r\n                   type == \"ENCOURAGES\" ||\r\n                    type == \"PRECURSOR_OF\" ||\r\n                    type == \"INVENTS\";\r\n\r\n        var hideEdgeLabel =\r\n            type == \"BY\" || \"INFLUENCES\" ||\r\n              type == \"INSPIRES\" ||\r\n              type == \"DEALS_WITH\" ||\r\n            type == \"PART_OF\" ||\r\n            type == \"MEMBER_OF\" ||\r\n            type == \"ASSOCIATED_WITH\" ||\r\n            type == \"ACTIVE_DURING\" ||\r\n            type == \"FROM\" ||\r\n            type == \"DEVELOPS\" ||\r\n            type == \"LEADS\" ||\r\n            type == \"FOUNDS\" ||\r\n            type == \"DEPICTS\" ||\r\n            type == \"WORKS_IN\" ||\r\n            type == \"STUDIES\" || type == \"STUDIES_AT\" ||\r\n            type == \"TEACHES\" || type == \"TEACHES_AT\"; //displayed in light green\r\n\r\n        var hideEdge = type == \"FROM\";\r\n\r\n        var edge = {\r\n            id: neoEdge.id,\r\n            from: neoEdge.startNode,\r\n            to: neoEdge.endNode,\r\n            label: hideEdgeLabel ? null : type.toLowerCase(),\r\n            fontColor: 'lightblue',\r\n            //  width: neoEdge.Weight/2 ,\r\n            color: type == \"FROM\" ? \"#EEEEEE\"\r\n                : type == \"INFLUENCES\" ? 'pink'\r\n                : (type == \"TEACHES\" || type == \"TEACHES_AT\") ? 'lightgreen'\r\n                : 'lightblue',\r\n            opacity: hideEdge ? 0 : 1,//type == \"INFLUENCES\" ? 1 : 0.7,\r\n            style: directional ? 'arrow-center' : 'dash-line',\r\n            type: ['curved'],\r\n            labelAlignment: 'line-center'\r\n\r\n        }\r\n\r\n        return edge;\r\n\r\n    }\r\n\r\n\r\n    var utils = {\r\n\r\n        init: function () {\r\n\r\n            utils.refreshTypes();\r\n            utils.refreshPredicates();\r\n            return utils;\r\n\r\n\r\n        }\r\n        ,\r\n        newView : function (key, type) {\r\n            var view = new View(key, type);\r\n            return view;\r\n        }\r\n        ,\r\n        types: {}\r\n        ,\r\n        Predicate: Predicate\r\n        ,\r\n        predicates: {}\r\n        ,\r\n        isType: function (label) {\r\n            return utils.types[label] != undefined;\r\n        }\r\n        ,\r\n        refreshTypes: function () {\r\n\r\n            return neoClient.type.getAll().$promise.then(function (types) {\r\n                utils.types = types;\r\n                return types;\r\n            });\r\n        }\r\n    ,\r\n        refreshPredicates: function () {//consider creating lookup nodes for relationship types so that i can store properties for them\r\n\r\n            return neoClient.predicate.getAll().$promise.then(function (predicates) {\r\n                utils.predicates = predicates.toJSON();\r\n               // console.log(utils.predicates);\r\n                return utils.predicates;\r\n            });\r\n\r\n  \r\n\r\n\r\n        }\r\n        ,\r\n        defaultEdgeType : function (fromType, toType) {\r\n            if (toType == \"Provenance\") {\r\n                return \"FROM\";\r\n            }\r\n            else if (toType == \"Painter\") {\r\n                return \"INFLUENCES\";\r\n            }\r\n\r\n            return \"ASSOCIATED_WITH\";\r\n\r\n        }\r\n        ,\r\n        isSystemInfo: function (label) {\r\n\r\n            return label == \"Global\" || label == \"Type\" || label == \"Label\" || label == \"SystemInfo\";\r\n\r\n        },\r\n        getLabelClass: function (node, label) {\r\n\r\n\r\n\r\n\r\n\r\n            if (node && label === node.Type) {\r\n                return 'label-warning';\r\n            }\r\n\r\n            if (utils.isSystemInfo(label)) {\r\n                return 'label-system';\r\n            }\r\n\r\n            if (utils.isType(label)) {\r\n                return 'label-inverse pointer';\r\n            }\r\n\r\n\r\n            return 'label-info';\r\n\r\n        }\r\n\r\n        ,\r\n        personTypes: ['Painter',\r\n                'Illustrator',\r\n                'Philosopher',\r\n                'Poet',\r\n                'FilmMaker',\r\n               'Sculptor',\r\n                'Writer',\r\n               'Patron',\r\n                 'Leader',\r\n                 'Explorer',\r\n                 'Composer',\r\n                'Scientist',\r\n                'Caricaturist',\r\n                 'Mathematician']\r\n        ,\r\n        pictureTypes: ['Painting', 'Illustration', 'Drawing', 'Print']\r\n        ,\r\n        isPerson: function (type) {\r\n\r\n            return type == 'Painter' ||\r\n                type == 'Illustrator' ||\r\n                type == 'Philosopher' ||\r\n                type == 'Poet' ||\r\n                type == 'FilmMaker' ||\r\n                type == 'Sculptor' ||\r\n                type == 'Writer' ||\r\n                type == 'Patron' ||\r\n                type == 'Leader' ||\r\n                type == 'Explorer' ||\r\n                type == 'Composer' ||\r\n                type == 'Scientist' ||\r\n                type == 'Caricaturist' ||\r\n                type == 'Mathematician';\r\n\r\n        }\r\n        ,\r\n        graphOptions:   {\r\n            //  configurePhysics:true,\r\n            edges: { widthSelectionMultiplier: 4 }\r\n                ,\r\n            hierarchicalLayout: {\r\n                enabled: false,\r\n                levelSeparation: 10,//make this inversely proportional to number of nodes\r\n                nodeSpacing: 200,\r\n                direction: \"UD\",//LR\r\n                //    layout: \"hubsize\"\r\n            }\r\n                ,\r\n            dataManipulation: {\r\n                enabled: true,\r\n                initiallyVisible: true\r\n            }\r\n    ,\r\n            //stabilize: true,\r\n            //stabilizationIterations: 1000,\r\n            physics: {\r\n                barnesHut: {\r\n                    enabled: true,\r\n                    gravitationalConstant: -6000,\r\n                    centralGravity: 1,\r\n                    springLength: 20,\r\n                    springConstant: 0.04,\r\n                    damping: 0.09\r\n                },\r\n                repulsion: {\r\n                    centralGravity: 0.1,\r\n                    springLength: 0.5,\r\n                    springConstant: 0.05,\r\n                    nodeDistance: 100,\r\n                    damping: 0.09\r\n                }\r\n                ,\r\n                hierarchicalRepulsion: {\r\n                    enabled: false,\r\n                    centralGravity: 0,\r\n                    springLength: 270,\r\n                    springConstant: 0.01,\r\n                    nodeDistance: 300,\r\n                    damping: 0.09\r\n                }\r\n            }\r\n             \r\n                ,\r\n            onDelete: function (data, callback) {\r\n                //   $scope.publish(\"deleting\");\r\n            }\r\n        }\r\n            ,\r\n            //transforms neo graph data object into object containing array of nodes and array of edges renderable by vis network\r\n             toGraphData : function (g) {\r\n                var graphData = {\r\n                    nodes: [],\r\n                    edges: []\r\n                }\r\n                for (var n in g.nodes) {\r\n                    var node = graphNodeFromNeoNode(g.nodes[n])\r\n                    graphData.nodes.push(node);\r\n                }\r\n\r\n                for (var r in g.edges) {\r\n                    var edge = graphEdgeFromNeoEdge(g.edges[r]);\r\n                    graphData.edges.push(edge);\r\n                }\r\n                return graphData;\r\n            }\r\n            //mopve to 'state' object\r\n            ,\r\n            tabSettings: {}\r\n            ,\r\n            selectedTab:\"Properties\"\r\n \r\n      \r\n\r\n\r\n    }\r\n    return utils.init();\r\n\r\n}]);\r\n","angular.module('neograph.node',[\r\n    'neograph.node.graphpanel',\r\n    'neograph.node.favourites',\r\n    'neograph.node.freebase',\r\n    'neograph.node.graphpanel',\r\n    'neograph.node.images',\r\n    'neograph.node.wikipedia',\r\n    'neograph.node.multiple',\r\n    'neograph.node.service',\r\n    'neograph.node.properties',\r\n    'neograph.node.relationships',\r\n    'ui.router'\r\n    \r\n])\r\n.config(function($stateProvider){\r\n    $stateProvider\r\n        .state('admin.main.node',{\r\n            url:'/node/:node',\r\n            //abstract:true,\r\n            views:{\r\n                    'nodeHeader@admin':{\r\n                        controller:'NodeHeaderCtrl',\r\n                        templateUrl:'app/node/node.header.html'\r\n                    }\r\n                     ,\r\n                      'node@admin':{\r\n                        controller:'NodeCtrl',\r\n                        templateUrl:'app/node/node.html'\r\n                    }\r\n             \r\n            }\r\n            \r\n        })\r\n        .state('admin.main.node.view',{\r\n            url:'/view',\r\n            views:{\r\n                     'properties@admin.main.node':{\r\n                        templateUrl:'app/node/properties/node.properties.html',\r\n                        controller:function ($scope,$stateParams,nodeService) {\r\n                            if ($stateParams.node){\r\n                                nodeService.get($stateParams.node,true).then(function(node){\r\n                                        $scope.node = node;\r\n                                    }); \r\n                            }\r\n                        }\r\n                    }\r\n                    ,\r\n                     'relationships@admin.main.node':{\r\n                        templateUrl:'app/node/relationships/node.relationships.html',\r\n                        controller:function ($scope,$stateParams,nodeService) {\r\n                            if ($stateParams.node){\r\n                                nodeService.get($stateParams.node,true).then(function(node){\r\n                                        $scope.node = node;\r\n                                        console.log(node);\r\n                                    }); \r\n                            }\r\n                        }\r\n                    }\r\n            }\r\n            \r\n        })\r\n        .state('admin.main.node.edit',{\r\n            url:'/edit',\r\n            views:{\r\n          \r\n                    'editproperties@admin.main.node':{\r\n                       templateUrl:'app/node/properties/node.properties.edit.html',\r\n                       controller:'EditPropertiesCtrl'\r\n                    },\r\n                       'editrelationships@admin.main.node':{\r\n                       templateUrl:'app/node/relationships/node.relationships.edit.html',\r\n                       controller:'EditRelationshipsCtrl'\r\n                    }\r\n                    \r\n            }\r\n            \r\n        });\r\n})\r\n.controller('NodeSearchCtrl',function($scope,$state,nodeService){\r\n        \r\n    $scope.selection = {\r\n        selectedNode: null,\r\n        selectedEdge: null,\r\n        hoverNode: null\r\n    }\r\n        \r\n     $scope.$watch('nodeLookup', function (n) {\r\n\r\n        if (n && n.id) {\r\n             nodeService.get(n.label,true).then(function(node){\r\n                 $scope.selection.selectedNode = node;\r\n                 $state.go('admin.main.node.view',{node:n.label});\r\n             })    \r\n          \r\n        }\r\n    });\r\n    \r\n    $scope.newNode = function () {\r\n\r\n        var newNode = {\r\n            id: -1,\r\n            labels: [],\r\n            Type: \"\",\r\n            temp: {\r\n                tabs: [\"Properties\"]\r\n            }\r\n        }\r\n\r\n        if ($scope.nodeLookupText && (!$scope.selection.selectedNode || $scope.nodeLookupText != $scope.selection.selectedNode.Lookup)) {\r\n            newNode.Lookup = $scope.nodeLookupText;\r\n        }\r\n\r\n        $scope.selection.selectedNode = newNode;\r\n        $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n\r\n        $scope.selectedTab = 'Properties';\r\n\r\n\r\n    }\r\n    \r\n    $scope.addNodeToGraph = function (node) {\r\n        console.log('add node to graph');\r\n        //check node is not already in graph\r\n        if (!$scope.views.Graph.data.nodes[node.id]) {\r\n            console.log('get relationships');\r\n            //pull in relationships\r\n            neo.getRelationships(node.id).then(function (g) {\r\n                console.log('got relationships');\r\n                console.dir(g);\r\n\r\n                var newData = {\r\n                    edges: g.edges,\r\n                    nodes: {}\r\n                }\r\n                newData.nodes[node.id] = node;\r\n\r\n\r\n                $scope.publish(\"dataUpdate\", newData);\r\n\r\n\r\n                if (node.id === $scope.selection.selectedNode.id) {\r\n                    $scope.publish(\"selected\", { selection: { nodes: [node.id] } });\r\n                    $scope.publish(\"focus\", node.id)\r\n                }\r\n\r\n            });\r\n\r\n            $scope.activeView = graphView;\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n        \r\n})\r\n.controller('NodeHeaderCtrl',function($scope,$stateParams,nodeService){\r\n        \r\n    $scope.selection = {\r\n        selectedNode: null,\r\n        selectedEdge: null,\r\n        hoverNode: null\r\n    }\r\n\r\n     if ($stateParams.node){\r\n          \r\n           nodeService.get($stateParams.node,true).then(function(node){\r\n                 $scope.selection.selectedNode = node;\r\n            });\r\n                \r\n      }\r\n   \r\n\r\n        \r\n})\r\n.controller('NodeCtrl',function($scope,$stateParams,nodeService){\r\n\r\n       $scope.selection = {\r\n            selectedNode: null,\r\n            selectedEdge: null,\r\n            hoverNode: null\r\n        }\r\n        \r\n      \r\n      if ($stateParams.node){\r\n          \r\n           nodeService.get($stateParams.node,true).then(function(node){\r\n                 $scope.selection.selectedNode = node;\r\n            });\r\n                \r\n      }\r\n      \r\n\r\n  \r\n\r\n/*\r\n    //respond to published event from other component\r\n     $scope.subscribe(\"selected\", function (params) {//params is object containing array of nodes and array of edges\r\n\r\n\r\n        //avoid feedback loop by checking that sender is not self\r\n        if (params.sender != \"Controller\") {\r\n\r\n            if (params.selection.nodes.length == 1) {\r\n\r\n                if (params.selection.nodes[0].id) {\r\n\r\n                 \r\n                    neo.getNode(params.selection.nodes[0].id, true)\r\n                   .then(function (loadedNode) {\r\n                 \r\n                       $scope.selection.selectedNode = loadedNode;\r\n                       $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                    \r\n\r\n                   \r\n                   });\r\n                }\r\n                else if (params.selection.nodes[0].Label) {\r\n\r\n                    neo.getNodeByLabel(params.selection.nodes[0].Label, true)\r\n                   .then(function (loadedNode) {\r\n                      \r\n                       $scope.selection.selectedNode = loadedNode;\r\n                       $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n                       \r\n                   });\r\n                }\r\n\r\n            }\r\n            else if (params.selection.nodes.length > 1)//multiple node selection\r\n            {\r\n                $scope.selection.multiple = params.selection.nodes;\r\n                $scope.selection.selectedNode = undefined;\r\n                $scope.selection.selectedEdge = undefined;\r\n                $scope.tabs = [\"Properties\"];\r\n                $scope.selectedTab = $scope.tabs[0];\r\n\r\n            }\r\n            else if (params.selection.edges.length == 1) {\r\n                $scope.selection.selectedNode = undefined;\r\n                $scope.selection.selectedEdge = params.selection.edges[0];\r\n                $scope.tabs = [\"Properties\", \"Images\"];\r\n                $scope.selectedTab = $scope.tabs[0];\r\n\r\n            }\r\n        }\r\n    });\r\n    */\r\n\r\n    $scope.tabs = [\"Properties\",\"Relationships\"];\r\n    $scope.selectedTab = \"Properties\";\r\n    $scope.selectTab = function (tab) {\r\n        $scope.selectedTab = tab;\r\n    }\r\n\r\n\r\n   \r\n\r\n \r\n\r\n\r\n    \r\n    \r\n    \r\n}) ","angular.module('neograph.node.service',['neograph.utils','neograph.neo.client','neograph.models.node'])\r\n.factory('nodeService', ['neoClient',  'utils','$q','nodeFactory',function (neoClient, utils,$q,nodeFactory) {\r\n\r\n    var lastLoadedNode = {};\r\n    \r\n\r\n    var that = {\r\n        setPropsAndTabsFromLabels: function (node) {\r\n            return neoClient.node.setPropsAndTabs({ node:node}).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n        }\r\n        ,\r\n        get: function (label, addrelprops) {\r\n\r\n        \r\n            \r\n            if (addrelprops) {\r\n                \r\n                if (lastLoadedNode && (label===lastLoadedNode.Label || label ===lastLoadedNode.id)){\r\n                    return $q.when(lastLoadedNode);\r\n                }\r\n                else{\r\n                \r\n                    return neoClient.node.getWithRels({ id: label }).$promise.then(function (node) {\r\n                        \r\n                     \r\n                        lastLoadedNode = nodeFactory.create(node.toJSON());\r\n                        console.log(lastLoadedNode);\r\n                        return lastLoadedNode;\r\n                    });\r\n                }\r\n\r\n               \r\n            }\r\n            else {\r\n                return neoClient.node.get({ id: label }).$promise.then(function (node) {\r\n                    return node.toJSON();\r\n                });\r\n            }\r\n\r\n        }\r\n        ,\r\n        getList: function (q, limit) {//q = match (n) & where only (without return)\r\n\r\n            return neoClient.node.getList({ q: q, limit: limit }).$promise;//returns array\r\n        }\r\n          ,\r\n        saveWikipagename: function (n)//short version for freebase prop saving\r\n        {\r\n            return neoClient.node.saveWikipagename({ \r\n                id: n.id, \r\n                name: n.Wikipagename \r\n            }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n        }\r\n        ,\r\n        getImages:function(node){\r\n        \r\n            return neoClient.node.getImages({\r\n                id: node.id,\r\n                isPicture: node.temp.isPicture,\r\n                isGroup: node.temp.isGroup\r\n            }).$promise;//returns array\r\n        }\r\n        ,\r\n        saveProps: function (n)//short version for freebase prop saving\r\n        {\r\n            return neoClient.node.saveProps({ node: n, user: user }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n        \r\n        }\r\n        ,\r\n        getProps: function (labels) {\r\n\r\n            return neoClient.node.getProps({ labels: labels }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n        }\r\n        ,\r\n        save: function (n, user) {\r\n            if (n.temp.trimmed) {\r\n                throw ('Node is trimmed - cannot save');\r\n            }\r\n            return neoClient.node.save({ node: n, user: user }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n        }\r\n        ,\r\n        saveRels: function (n) {\r\n            return neoClient.node.saveRels({ node: n }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n        }\r\n        ,\r\n        //deletes node and relationships forever\r\n        destroy: function (node) {\r\n\r\n            return neoClient.node.destroy({ node: node }).$promise.then(function (data) {\r\n                return data.toJSON();\r\n            });\r\n\r\n        }\r\n        ,\r\n       //only supports 1 node at the mo\r\n        delete: function (node) {\r\n\r\n             var deferred = $q.deferred();\r\n                \r\n            if (node && node.id) {\r\n                \r\n                return neoClient.node.delete({ node: node }).$promise.then(function (data) {\r\n                   deferred.resolve(data.toJSON());\r\n                });\r\n            }\r\n            else { \r\n                deferred.resolve({});\r\n            }\r\n        }\r\n        ,\r\n           //only supports 1 node at the mo\r\n        restore: function (node) {\r\n\r\n            var deferred = $q.deferred();\r\n            \r\n            if (node && node.id) {\r\n                neoClient.node.restore({ node: node }).$promise.then(function (data) {\r\n                    deferred.resolve(data.toJSON());\r\n                });\r\n            }\r\n            else { \r\n                deferred.resolve({});\r\n                \r\n            }\r\n\r\n            return deferred.promise;\r\n\r\n        }\r\n        ,\r\n        search: function (txt, restrict) { //restrict = labels to restrict matches to\r\n\r\nconsole.log(txt);\r\n            if (txt) {\r\n                return neoClient.node.search({ txt: txt, restrict: restrict }).$promise;//returns array\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return that;\r\n\r\n}]);\r\n","angular.module('neograph.query',['neograph.utils','neograph.queryDirective'])\r\n    .factory('viewService',function(utils){\r\n        \r\n        var views = {};\r\n\r\n        var newView = function (key, type) {\r\n            var view = utils.newView(key, type);\r\n            view.key = key;\r\n            views[key] = view;\r\n            return view;\r\n        }\r\n\r\n        var graphView = newView('Graph', 'Graph');\r\n        var defaultImageView = newView('Grid', 'Grid');\r\n        \r\n        var activeView = defaultImageView;\r\n        \r\n        var cloneView = function () {\r\n            views[$scope.views[activeView].queryGenerators.nodeFilter.options.node.Lookup] = angular.copy(views[activeView]);\r\n        }\r\n        \r\n        var listeners = [];\r\n        \r\n        \r\n        function publishViewChange(){\r\n            \r\n            for (var i =0;i<listeners.length;i++){\r\n                listeners[i](activeView);\r\n            }\r\n        }\r\n        \r\n        \r\n        return {\r\n            views:views,\r\n            activeView:activeView,\r\n            updateView:function(key){\r\n                activeView = views[key];\r\n                publishViewChange();\r\n            }\r\n            ,\r\n            subscribe:function(callback){\r\n                listeners.push(callback);\r\n            }\r\n        }\r\n        \r\n    })\r\n    .controller('QueryCtrl',function($scope,viewService,$stateParams){\r\n        \r\n        console.log($stateParams);\r\n        \r\n        //todo - should be per view\r\n        if ($stateParams.querypreset){\r\n            $scope.defaultpreset = $stateParams.querypreset;\r\n        }\r\n        \r\n        viewService.subscribe(function(activeView){\r\n            $scope.activeView = activeView;\r\n        })\r\n        \r\n        $scope.views = viewService.views;\r\n        $scope.activeView = viewService.activeView;\r\n\r\n        \r\n    })\r\n    .controller('QueryResultsCtrl',function($scope,viewService){\r\n        \r\n        viewService.subscribe(function(activeView){\r\n            $scope.activeView = activeView;\r\n        })\r\n        \r\n        $scope.views = viewService.views;\r\n        $scope.activeView = viewService.activeView;\r\n        \r\n        $scope.selectedTab = $scope.activeView.key;\r\n\r\n        $scope.$watch('selectedTab',function(key){\r\n            viewService.updateView(key);\r\n        });\r\n        \r\n       \r\n/*\r\n        $scope.$watch('activeView', function (view) {\r\n            $scope.activeViewKey = view.key;\r\n       //     shouldEnabledAddToGraph();\r\n        });\r\n\r\n        $scope.$watch('activeViewKey', function (key) {\r\n            $scope.activeView = $scope.views[key];\r\n        });\r\n        \r\n        */\r\n        /*\r\n        $scope.subscribe(\"query\", function (query) {\r\n\r\n            if (query && (query.q || query.queryGenerator)) {\r\n\r\n                if (!query.view) {\r\n                    query.view = query.type;\r\n                }\r\n\r\n                var view = $scope.views[query.view];\r\n\r\n                if (view) {\r\n                    //reset name incase it changed due to node filter\r\n                    view.name = query.view;\r\n                }\r\n                else {\r\n\r\n                    view = newView(query.view, query.type);//view = view key, type = \"Graph\" or \"Grid\"\r\n                }\r\n\r\n                if (query.queryGenerator) {\r\n                    var qg = view.queryGenerators[query.queryGenerator.id];\r\n                    qg.options = query.queryGenerator.options;\r\n                    view.queryGenerator = qg;\r\n\r\n                }\r\n                else {\r\n                    view.query = query;\r\n                }\r\n\r\n                $scope.activeView = view;\r\n\r\n            }\r\n\r\n        });\r\n\r\n*/\r\n        \r\n        \r\n    });\r\n    ","angular.module('neograph.query.presets',[])\r\n.factory(\"queryPresets\", function () {\r\n\r\n    return {\r\n        \"AddedRecently\": {\r\n\r\n            q: \"match (n:Global) where n.created is not null return n order by n.created desc limit 100\"\r\n\r\n        },  \"AddedRecentlyPictures\": {\r\n            //MATCH (p:Label) - [:ASSOCIATED_WITH|:PART_OF|:FOUNDS|:LEADS|:MEMBER_OF|:REPRESENTS] - (g:Group), (p) -- (i:Picture) where ID(g) = \" + n.id + \" return p.Name,collect(i)[0..5],count(*) as count order by p.Name\r\n            q: \"MATCH  (p:Label) -- (i:Picture) where p.created is not null return p.created,collect(i)[0..5],count(*) as count  order by p.created desc limit 500\"\r\n\r\n        },\r\n        \"Overview\": {\r\n            q: \"match (n) - [r] - (m) where (n:Global and m:Global) and (n.Status is null or n.Status > 6) and (m.Status is null or m.Status > 6) and not (n-[:TYPE_OF]-m) RETURN r\"\r\n        }\r\n        ,\r\n        \"OverViewDense\": {\r\n            q: \"match (n) - [r] - (m) where (n:Global and m:Global) and (n.Status is null or n.Status > 3) and (m.Status is null or m.Status > 3) and not (n-[:TYPE_OF]-m) RETURN r\"\r\n        }\r\n        ,\r\n        \"British Influence\": {\r\n            q: \"MATCH (c:Global)-[r]-(d:Global) where (c:English or c:Scottish) and not (c-[:TYPE_OF]-d) and not d.Lookup='English' and not c.Lookup='English'  return c,d,r\"\r\n        },\r\n        \"British Only\": {\r\n            q: \"MATCH (c:Global)-[r]-(d:Global) where (c:English or c:Scottish) and  (d:English or d:Scottish) and not (c-[:TYPE_OF]-d) and not d.Lookup='English' and not c.Lookup='English'  return c,d,r\"\r\n            ,\r\n            connectAll: true\r\n        }\r\n           ,\r\n        \"French Only\": {\r\n            q: \"MATCH (c:Global:French)-[r]-(d:Global:French) where  not (c-[:TYPE_OF]-d) and not d.Lookup='French' and not c.Lookup='French'  return c,d,r\"\r\n             ,\r\n            connectAll: true\r\n        }\r\n        ,\r\n        \"French Painter influence\": {\r\n            q: \"MATCH (c:Global:French:Painter)-[r]-(d:Painter) where not (c-[:TYPE_OF]-d) and not d.Lookup='French' and not c.Lookup='French'  return c,d,r\"\r\n                    ,\r\n            connectAll: true\r\n        }\r\n        ,\r\n        \"Cezanne 3 gen\": {\r\n            q: \"MATCH (c {Lookup:'Cezanne'})-[r]-(d:Painter)  -[s]-(e:Painter)  -[t]-(f:Painter) return c,d,e,f,r,s,t\"\r\n            ,\r\n            connectAll: true\r\n        }\r\n            ,\r\n        \"Cezanne 3 gen outbound\": {\r\n            q: \"MATCH (c {Lookup:'Cezanne'})-[r]->(d:Painter)  -[s]->(e:Painter)  -[t]->(f:Painter) return c,d,e,f,r,s,t\"\r\n            ,\r\n            connectAll: true\r\n        }\r\n            ,\r\n        \"Cezanne 3 gen inbound\": {\r\n            q: \"MATCH (c {Lookup:'Cezanne'})<-[r]-(d:Painter)  <-[s]-(e:Painter)  <-[t]-(f:Painter) return c,d,e,f,r,s,t\"\r\n                    ,\r\n            connectAll: true\r\n        }\r\n               ,\r\n        \"French-English Painters\": {\r\n            q: \"MATCH (c:Global:French:Painter)-[r]-(d:Global:English:Painter) where  not (c-[:TYPE_OF]-d) and not d.Lookup='French' and not c.Lookup='French'  return c,d,r\"\r\n             ,\r\n            connectAll: true\r\n        }\r\n                 ,\r\n        \"German\": {\r\n            q: \"MATCH (c:Global:German)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='German' and not c.Lookup='German'  return c,d,r\"\r\n        }\r\n                  ,\r\n        \"NorthernEurope\": {\r\n            q: \"MATCH (c:Global)-[r]-(d:Global) where (c:NorthernEurope or c:German or c:Dutch or c:English or c:Scottish) and  (d:NorthernEurope or d:German or d:Dutch or d:English or d:Scottish) and not c:Provenance and not d:Provenance and not (c-[:TYPE_OF]-d)   return c,d,r\"\r\n        }\r\n                 ,\r\n        \"Italian\": {\r\n            q: \"MATCH (c:Global:Italian)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='Italian' and not c.Lookup='Italian'  return c,d,r\"\r\n        }\r\n                 ,\r\n        \"Spanish\": {\r\n            q: \"MATCH (c:Global:Spanish)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='Spanish' and not c.Lookup='Spanish'  return c,d,r\"\r\n        }\r\n                  ,\r\n        \"American\": {\r\n            q: \"MATCH (c:Global:American)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='American' and not c.Lookup='American'  return c,d,r\"\r\n        }\r\n                 ,\r\n        \"Pop\": {\r\n            q: \"match (n {Lookup:'Pop'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) and not m:Provenance and not p:Provenance return n,r,m,s,p\"\r\n        }\r\n               ,\r\n        \"Impressionism\": {\r\n            q: \"match (n {Lookup:'Impressionist'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) and not m:Provenance and not p:Provenance return n,r,m,s,p\"\r\n            ,\r\n            connectAll: true\r\n        }\r\n               ,\r\n        \"Landscape\": {\r\n            q: \"MATCH (c:Global:Landscape)-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  and not d.Lookup='Landscape' and (d:Landscape or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r\"\r\n        }\r\n               ,\r\n        \"Modern\": {\r\n            q: \"MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and c.YearTo > 1870  and d.YearTo > 1870 return c,d,r\"\r\n        }\r\n                  ,\r\n        \"Rennaissance\": {\r\n            q: \"MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and c.YearTo > 1400 and c.YearTo<1700 and d.YearTo > 1400 and d.YearTo<1700 return c,d,r\"\r\n        }\r\n\r\n\r\n        // $scope.query =;\r\n\r\n        // $scope.query = \"match (n) - [r:INFLUENCES|:PART_OF|:MEMBER_OF|:ASSOCIATED_WITH|:INSPIRES|:ADMIRES|:FROM|:DEVELOPS|:ANTICIPATES|:FOUNDS|:LEADS|:WORKS_IN] - (m) where (n:Global and m:Global) and (n:Greatest or n:Group or n:Theme or n:School or n:Iconography or n:Provenance) and (m:Greatest or m:Group  or m:Theme or m:School or m:Iconography or m:Provenance) RETURN r\";//\"match (n) - [r:INFLUENCES|:PART_OF|:MEMBER_OF] - (m) where (n:Greatest or n:Group) and (m:Greatest or m:Group) RETURN r\";\r\n\r\n        //BRITSH\r\n        // $scope.query = ;\r\n\r\n        //IMPRESSIONISM\r\n        // MATCH (c:Global:Impressionist)-[r]-(d:Global:Impressionist) where  not (c-[:TYPE_OF]-d)   return c,d,r\r\n        //need to use connect all:\r\n        //  match (n {Lookup:'Impressionism'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) return n,r,m,s,p\r\n        //match (n {Lookup:'Impressionism'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) and not m:Provenance and not p:Provenance return n,r,m,s,p\r\n        //only follow links to next gen for above given weight ?\r\n\r\n        //LANDSCAPE\r\n        //\"MATCH (c:Global:Landscape)-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  and not d.Lookup='Landscape' and (d:Landscape or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r\"\r\n\r\n        //DATE FILTER\r\n        //   $scope.query =\r\n\r\n        //  var initQueryText = \"match (n:Greatest) - [r:INFLUENCES] - (m:Greatest) RETURN r\";//\"match (n:Painter) return n.Name\"\r\n\r\n        //   $scope.query = \"match (n) - [r:INFLUENCES|:PART_OF|:MEMBER_OF|:ASSOCIATED_WITH|:INSPIRES|:ADMIRES|:FROM|:DEVELOPS|:ANTICIPATES|:FOUNDS|:LEADS|:WORKS_IN] - (m) where (n:Global and m:Global and n.YearTo is not null and m.YearTo is not null) and (n:Great or n:Group or n:School  or n:Period) and (m:Great or m:Group  or m:School or m:Period) RETURN r\";\r\n\r\n        // $scope.query = \"match (n) - [r:INFLUENCES|:PART_OF|:MEMBER_OF|:ASSOCIATED_WITH|:INSPIRES|:ADMIRES|:FROM|:DEVELOPS|:ANTICIPATES|:FOUNDS|:LEADS|:WORKS_IN] - (m) where (n:Global and m:Global and n.YearTo is not null and m.YearTo is not null) and (n:Greatest or n:Group or n:Theme or n:School or n:Iconography or n:Provenance) and (m:Greatest or m:Group  or m:Theme or m:School or m:Iconography or m:Provenance) RETURN r\";\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n})","angular.module('neograph.queryDirective',['neograph.neo', 'neograph.query.presets','neograph.query.generator'])\r\n.directive('query', ['neo', 'queryPresets',function (neo,presets) {\r\n        return {\r\n            replace: true,\r\n            restrict: 'E',\r\n            templateUrl: 'app/query/queryDirective.html',\r\n            scope: {\r\n                view: '=',\r\n                editable: '=?',\r\n                defaultpreset: '=?'\r\n\r\n            },\r\n            link: function ($scope, $element, $attrs) {\r\n                \r\n          \r\n                   \r\n                $scope.$watch('preset', function (preset) {\r\n                    console.log('p')\r\n                    if (preset) {\r\n                        console.log('preset change')\r\n                        $scope.view.query = preset;\r\n                    }\r\n                })\r\n                \r\n                if ($scope.defaultpreset)\r\n                {\r\n                    $scope.preset=presets[$scope.defaultpreset];\r\n                }\r\n\r\n                $scope.$watch('view.query', function (query) {\r\n                    if (query && query.q) {\r\n                        console.log('query Change');\r\n                        $scope.getData();\r\n                    }\r\n\r\n                });\r\n                \r\n                $scope.generatedQuery = {};\r\n                $scope.$watch('generatedQuery.q', function (q) {\r\n                    \r\n                    if (q) {\r\n                        $scope.view.query = { q: q }\r\n                    }\r\n                });\r\n                \r\n                $scope.nodeChanged = function (node) {\r\n                    if (node) {\r\n                        \r\n                        \r\n                        $scope.view.name = node.Label || node.Lookup;\r\n                \r\n                    }\r\n                }\r\n                \r\n                $scope.connectAll = function () {\r\n                    neo.getAllRelationships($scope.view.data.nodes)\r\n                    .then(function (g) {\r\n                        $.extend($scope.view.data.edges, g.edges);//add to cached data\r\n                        $scope.publish(\"dataUpdate\", g)\r\n                    });\r\n                }\r\n                \r\n                $scope.getData = function () {\r\n                    \r\n                    var query = $scope.view.query;\r\n                    \r\n                    if (query && query.q) {\r\n                        console.log('get data')\r\n                        \r\n                        //if grid query then return results as array to preserve sort order\r\n                        var returnArray = $scope.view.type === 'Grid' ? true : false;\r\n                        \r\n                        neo.getGraph(query.q, returnArray)\r\n                        .then(function (g) {\r\n                            \r\n                            if (query.connectAll) {\r\n                                \r\n                                neo.getAllRelationships(g.nodes)\r\n                                    .then(function (g2) {\r\n                                    \r\n                                    $.extend(g.edges, g2.edges);\r\n                                    $scope.view.data = g;\r\n\r\n                                });\r\n                            }\r\n                            else {\r\n                                $scope.view.data = g;\r\n                                console.log(g);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }])","angular.module('neograph.node.favourites',[])\r\n    .directive('favourites', function () {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/favourites/node.favourites.html',\r\n        scope: {\r\n            node: '=',\r\n            query: '='\r\n        }\r\n        ,\r\n        link: function ($scope) {\r\n\r\n\r\n        \r\n\r\n            $scope.$watch('node', function (node) {\r\n\r\n                var querys = [];\r\n\r\n                if (node) {\r\n\r\n                    querys.push(\r\n                         {\r\n                             name: \"Pictures\",\r\n                             view: node.Lookup + \" favourites\",\r\n                             type:\"Grid\",\r\n                             queryGenerator: { id: \"favouritesFilter\", options: { user: node } }\r\n                         })\r\n\r\n\r\n                    querys.push(\r\n                      {\r\n                          name: \"People\",\r\n                          q: \"MATCH (c:\" + node.Lookup + \":Favourite)-[]->(d) - [] - (n:Person)    return n\", // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                          connectAll: true,\r\n                          view: \"Graph\"\r\n                      });\r\n\r\n                    querys.push(\r\n                              {\r\n                                  name: \"People + 1\",\r\n                                  q: \"MATCH (c:\" + node.Lookup + \":Favourite)-[]->(d) - [] - (n:Person) -[]-(m:Person)   return n,m\", // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                                  connectAll: true,\r\n                                  view: \"Graph\"\r\n                              });\r\n\r\n                    querys.push(\r\n                   {\r\n                       name: \"People and groups\",\r\n                       q: \"MATCH (c:\" + node.Lookup + \":Favourite)-[]->(d) - [] - (n) where (n:Person or n:Period or n:Group or n:Provenance)   return n\", // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                       connectAll: true,\r\n                       view: \"Graph\"\r\n                   });\r\n\r\n                    querys.push(\r\n                       {\r\n                           name: \"People and groups + 1 \",\r\n                           q: \"MATCH (c:\" + node.Lookup + \":Favourite)-[]->(d) - [] - (n) - [] - (m) where (n:Person or n:Period or n:Group or n:Provenance) and  (m:Person or m:Period or m:Group or m:Provenance)  return n,m\", // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                           connectAll: true,\r\n                           view: \"Graph\"\r\n                       });\r\n\r\n\r\n\r\n                    querys.push(\r\n                       {\r\n                           name: \"Everything\",\r\n                           q: \"MATCH (c:\" + node.Lookup + \":Favourite)-[]->(d) - [] - (n:Global)  return n\", // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                           connectAll: true,\r\n                           view: \"Graph\"\r\n                       });\r\n\r\n\r\n                    querys.push(\r\n                       {\r\n                           name: \"Everything + 1\",\r\n                           q: \"MATCH (c:\" + node.Lookup + \":Favourite)-[]->(d) - [] - (n:Global) - [] - (m:Global)   return n,m\", // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                           connectAll: true,\r\n                           view: \"Graph\"\r\n                       });\r\n\r\n\r\n\r\n                }\r\n\r\n                console.log(querys);\r\n\r\n                $scope.querys = querys;\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n})","angular.module('neograph.node.freebase',['neograph.neo'])\r\n    .factory('freebase.service',\r\n    function(){\r\n        \r\n        \r\n    var creationQueries = [];\r\n\r\n    //creationQueries.push({\r\n    //    name: \"Description\",\r\n    //    propname: \"description\",\r\n    //    query: {\r\n    //        \"type\": \"/common/topic\",\r\n    //        \"description\": [{ \"mid\": null, \"name\": null }]\r\n    //    }\r\n    //});\r\n    //creationQueries.push({\r\n    //    name: \"Image\",\r\n    //    propname: \"image\",\r\n    //    query: {\r\n    //        \"type\": \"/common/topic\",\r\n    //        \"image\": [{ \"mid\": null, \"name\": null }]\r\n    //    }\r\n    //});\r\n    creationQueries.push({\r\n        name: \"About\",\r\n        propname: [\"type\", \"art_genre\", \"\", \"art_subject\", \"period_or_movement\", \"locations\", \"date_begun\", \"date_completed\"],\r\n        query: {\r\n            \"type\": \"/visual_art/artwork\",\r\n            \"art_genre\": [{ \"mid\": null, \"name\": null }],\r\n            \"art_subject\": [{ \"mid\": null, \"name\": null }],\r\n            \"period_or_movement\": [{ \"mid\": null, \"name\": null }],\r\n            \"locations\": [{ \"mid\": null, \"name\": null }],\r\n            \"date_begun\": null,\r\n            \"date_completed\": null\r\n        }\r\n    });\r\n\r\n    //creationQueries.push({\r\n    //    name: \"About\",\r\n    //    propname: [\"type\",\"art_genre\",\"\",\"art_subject\",\"period_or_movement\",\"locations\",\"date_begun\",\"date_completed\"],\r\n    //    query: {\r\n    //        \"type\": \"/visual_art/artwork\",\r\n    //        \"art_genre\": [{ \"mid\": null, \"name\": null }],\r\n    //        \"art_subject\": [{ \"mid\": null, \"name\": null }],\r\n    //        \"period_or_movement\": [{ \"mid\": null, \"name\": null }],\r\n    //        \"locations\": [{ \"mid\": null, \"name\": null }],\r\n    //        \"date_begun\": null,\r\n    //        \"date_completed\":null\r\n    //    }\r\n    //});\r\n\r\n    ///visual_art/artwork/art_genre\r\n    ///visual_art/artwork/art_subject\r\n    ///visual_art/artwork/period_or_movement\r\n    ///visual_art/artwork/dimensions_meters\r\n    ///visual_art/artwork/locations\r\n    //visual_art/artwork/date_begun\r\n    //visual_art/artwork/date_completed\r\n\r\n\r\n\r\n\r\n\r\n    //queries that return lists\r\n    var queries = [];\r\n\r\n    //queries.push({\r\n    //    name: \"Description\",\r\n    //    propname: \"description\",\r\n    //    query: {\r\n    //        \"type\": \"/common/topic/description\",\r\n    //        \"description\": [{ \"mid\": null, \"name\": null }]\r\n    //    }\r\n    //});\r\n    //queries.push({\r\n    //    name: \"Image\",\r\n    //    propname: \"image\",\r\n    //    query: {\r\n    //        \"type\": \"/common/topic/image\",\r\n    //        \"image\": [{ \"mid\": null, \"name\": null }]\r\n    //    }\r\n    //});\r\n\r\n\r\n\r\n    queries.push({\r\n        name: \"Artworks\",\r\n        propname: \"artworks\",\r\n        query: {\r\n            \"type\": \"/visual_art/visual_artist\",\r\n            \"artworks\": [{ \"mid\": null, \"name\": null }]\r\n        }\r\n    });\r\n\r\n\r\n    queries.push({\r\n        name: \"Quotations\",\r\n        propname: \"quotations\",\r\n        query: {\r\n            \"type\": \"/people/person\",\r\n            \"quotations\": [{ \"mid\": null, \"name\": null }]\r\n        }\r\n    });\r\n\r\n    queries.push({\r\n        name: \"Influence\",\r\n        propname: \"influenced\",\r\n        query: {\r\n            \"type\": \"/influence/influence_node\",\r\n            \"influenced\": [{ \"mid\": null, \"name\": null }]\r\n        }\r\n    });\r\n\r\n    queries.push({\r\n        name: \"Influenced by\",\r\n        propname: \"influenced_by\",\r\n        query: {\r\n            \"type\": \"/influence/influence_node\",\r\n            \"influenced_by\": [{ \"mid\": null, \"name\": null }]\r\n        }\r\n    });\r\n    queries.push({\r\n        name: \"Periods or Movements\",\r\n        propname: \"associated_periods_or_movements\",\r\n        query: {\r\n            \"type\": \"/visual_art/visual_artist\",\r\n            \"associated_periods_or_movements\": [{ \"mid\": null, \"name\": null }]\r\n        }\r\n    });\r\n    queries.push({\r\n        name: \"Peers\",\r\n        propname: \"peers\",\r\n        query: {\r\n            \"type\": \"/influence/influence_node\",\r\n            \"peers\": [{ \"mid\": null, \"name\": null }]\r\n        }\r\n    });\r\n\r\n\r\n\r\n    //queries for single-value results\r\n    queries.push({\r\n        name: \"Date of Birth\",\r\n        propname: \"date_of_birth\",\r\n        query: {\r\n            \"type\": \"/people/person\",\r\n            \"date_of_birth\": null\r\n        }\r\n    });\r\n\r\n    queries.push({\r\n        name: \"Date of Death\",\r\n        propname: \"date_of_death\",\r\n        query: {\r\n            \"type\": \"/people/deceased_person\",\r\n            \"date_of_death\": null\r\n        }\r\n    });\r\n\r\n\r\n    var getTopic = function (freebaseId, filter, callback) {\r\n\r\n        var service_url = 'https://www.googleapis.com/freebase/v1/topic';\r\n        var params = {\r\n            'key': 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE',\r\n            'filter': filter\r\n            //  , 'filter': 'suggest'\r\n        }\r\n\r\n        $.getJSON(service_url + freebaseId + '?callback=?', params, function (response) {\r\n\r\n            callback(response);\r\n\r\n\r\n\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    var runQuery = function (q, callback) {\r\n\r\n        var API_KEY = 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE';\r\n        var service_url = 'https://www.googleapis.com/freebase/v1/mqlread';\r\n\r\n\r\n        var params = {\r\n            'key': API_KEY,\r\n            'query': JSON.stringify(q)\r\n        };\r\n        // console.log(params);\r\n\r\n        $.getJSON(service_url + '?callback=?', params, function (response) {\r\n\r\n            //var out = { results: [], error: undefined };\r\n            //if (response.result && response.result[q.propname]) {\r\n            //    out.result = response.result[q.propname];\r\n            //}\r\n\r\n            callback(response.result);\r\n        });\r\n\r\n    }\r\n\r\n    var getPersonData = function (freebaseId, callback) {\r\n\r\n        var filters = [];\r\n\r\n        filters.push(\r\n            {\r\n                filter: \"/visual_art/visual_artist\",\r\n                props: [\r\n                    \"associated_periods_or_movements\"\r\n                ]\r\n            }\r\n            )\r\n\r\n        filters.push({\r\n            filter: \"/influence/influence_node\",\r\n            props: [\"influenced\",\r\n                \"peers,/influence/peer_relationship/peers\",\r\n                \"influenced_by\"\r\n            ]\r\n\r\n        })\r\n\r\n        filters.push({\r\n            filter: \"/people/person\",\r\n            props: [\"date_of_birth\",\r\n                \"gender\",\r\n                \"nationality\",\r\n             //   \"parents\",\r\n                \"place_of_birth\",\r\n                \"places_lived,/people/place_lived/location\",\r\n            //    \"profession\",\r\n             //   \"religion\",\r\n             //   \"sibling_s,/people/sibling_relationship/sibling\",\r\n                \"quotations\"\r\n            ]\r\n\r\n        })\r\n\r\n        filters.push({\r\n            filter: \"/people/deceased_person\",\r\n            props: [\"date_of_death\"\r\n                , \"place_of_death\"]\r\n\r\n        })\r\n\r\n\r\n\r\n        var results = {};\r\n        var cnt = 0;\r\n   \r\n\r\n        var out = {};\r\n\r\n        angular.forEach(filters, function (f) {\r\n\r\n            getTopic(freebaseId, f.filter, function (result) {\r\n\r\n                angular.forEach(f.props, function (p) {\r\n\r\n                    arr = p.split(',');\r\n\r\n                    var propname = f.filter + \"/\" + arr[0];\r\n\r\n                \r\n                    if (!result || !result.property || !result.property[propname])\r\n                    { console.log('property not available: ' + propname); }\r\n                    else {\r\n                           var val = result.property[propname];\r\n\r\n                        if (val.valuetype == \"compound\") {\r\n                            vals = [];\r\n                            angular.forEach(val.values, function (v) {\r\n                                vals.push(v.property[arr[1]].values[0].text);\r\n                            });\r\n\r\n                            out[\"FB_\" + arr[0]] = vals;\r\n                        }\r\n                        else {\r\n\r\n                            vals = [];\r\n                            angular.forEach(val.values, function (v) {\r\n                                vals.push(v.text);\r\n                            });\r\n                            out[\"FB_\" + arr[0]] = vals;\r\n                        }\r\n\r\n                        if (arr[0] == \"date_of_death\" || arr[0] == \"place_of_death\" || arr[0] == \"place_of_birth\" || arr[0] == \"date_of_birth\" || arr[0] == \"gender\" || arr[0] == \"nationality\") {\r\n                            out[\"FB_\" + arr[0]] = out[\"FB_\" + arr[0]][0];\r\n                        }\r\n\r\n                      \r\n\r\n                    }\r\n\r\n                });\r\n\r\n                cnt += 1;\r\n        \r\n                if (cnt == filters.length) {\r\n                   \r\n                    callback(out);\r\n                }\r\n\r\n\r\n            });\r\n        });\r\n\r\n\r\n    }\r\n\r\n \r\n\r\n\r\n    return {\r\n\r\n       \r\n        getImage: function (freebaseId, width, height, callback) {\r\n\r\n            //first get image ids\r\n\r\n            getTopic(freebaseId, \"/common/topic/image\", function (prop) {\r\n                console.log(prop);\r\n                var imageId = prop.values[0].id;\r\n\r\n                var service_url = \"https://usercontent.googleapis.com/freebase/v1/image\";\r\n\r\n                var params = {\r\n                    'key': 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE'\r\n                    //maxwidth=225&maxheight=225&mode=fillcropmid\r\n                }\r\n                width = width || 225;\r\n                height = height || 400;\r\n\r\n                callback(service_url + imageId + \"?mode=fillcropmid&maxwidth=\" + width + \"&maxheight=\" + height);\r\n\r\n                //$.getJSON(service_url + imageId + '?callback=?', params, function (response) {\r\n\r\n                //    console.log(response);\r\n                //    callback(response);\r\n                //});\r\n\r\n\r\n            });\r\n\r\n        }\r\n        ,\r\n        getText: function (node, callback) {\r\n\r\n            var prop = '/common/topic/description';\r\n\r\n            var service_url = 'https://www.googleapis.com/freebase/v1/topic';\r\n            var params = {\r\n                'key': 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE',\r\n                'filter': prop\r\n                //  , 'filter': 'suggest'\r\n            }\r\n\r\n            $.getJSON(service_url + node.FB_ID + '?callback=?', params, function (response) {\r\n                //var out = { results: [], error: undefined };\r\n                //if (response.result && response.result[q.propname]) {\r\n                //    out.result = response.result[q.propname];\r\n                //}\r\n                // console.log(response);\r\n\r\n                if (!response[\"property\"])\r\n                {\r\n                    console.log('no blurb found for ' + node.Name)\r\n                    callback({});\r\n                }\r\n                else{\r\n\r\n                    console.log(response);\r\n\r\n                var blurb = response[\"property\"][prop].values[0].value;\r\n\r\n                var allowedLength = 20;\r\n\r\n                var indIs = blurb.indexOf(' is ');\r\n                var indWas = blurb.indexOf(' was ');\r\n                if (indIs > -1 && (indIs < indWas || indWas == -1)) { indWas = indIs; }\r\n                if (indWas === -1) { indWas = 0; };\r\n\r\n                if ($.inArray(\"Person\", node.labels) == -1) {\r\n                    indWas = 0;\r\n                }\r\n\r\n\r\n                var stopSpc = blurb.substring(allowedLength + indWas, blurb.length).indexOf('. ') + 1;\r\n                var stopCr = blurb.substring(allowedLength + indWas, blurb.length).indexOf('.\\n') + 1;\r\n\r\n                var stop = (stopCr>0 &&stopCr < stopSpc )? stopCr : stopSpc;\r\n\r\n                //console.log(blurb);\r\n                //console.log(indIs);\r\n                //console.log(indWas);\r\n                //console.log(stop);\r\n\r\n                var until = stop > 0 ? allowedLength + indWas + stop : blurb.length;\r\n\r\n\r\n                var shortname = node.Lookup;\r\n\r\n                if (shortname.replace(/ /g, '').toLowerCase() == node.Name.toLowerCase()) {\r\n                    shortname = node.name\r\n                }\r\n                else {\r\n                    shortname=shortname.replace(/([A-Z])/g, ' $1').replace(/^./, function (str) { return str.toUpperCase(); });\r\n                }\r\n\r\n                  \r\n\r\n\r\n\r\n                var short = (indWas > 0 ? (shortname) : \"\") + blurb.substring(indWas, until);\r\n                var full = blurb.substring(until, blurb.length);\r\n\r\n                if (short != full)\r\n                {\r\n                    callback(\r\n                    {\r\n                        \"FB_blurb\": short.trim(),\r\n                        \"FB_blurb_full\": full.trim()\r\n                   \r\n                    });\r\n                }\r\n                else{\r\n                    callback(\r\n                      {\r\n                          \"FB_blurb\": short.trim(),\r\n                          \"FB_blurb_full\": null\r\n                    })\r\n                }\r\n\r\n    \r\n            }\r\n\r\n            });\r\n\r\n        }\r\n        ,\r\n        getTopic: function (freebaseId, callback) {\r\n\r\n            getTopic(freebaseId, callback);\r\n\r\n        }\r\n        ,\r\n        getPersonData: function (freebaseId, callback) {\r\n\r\n\r\n            getPersonData(freebaseId, callback);\r\n\r\n        }\r\n         ,\r\n        getCreationData: function (freebaseId, callback) {\r\n\r\n            getData(freebaseId, creationQueries, callback);\r\n\r\n\r\n\r\n        }\r\n        ,\r\n        getId: function (node, callback) {\r\n\r\n      \r\n            var API_KEY = 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE';\r\n            var service_url = 'https://www.googleapis.com/freebase/v1/search';\r\n\r\n            var ispicture = $.inArray('Picture', node.labels) ;\r\n\r\n            var params = {\r\n                'key': API_KEY,\r\n                'query': ispicture ? node.Title || node.Name : node.Lookup,\r\n               \r\n                'limit': 100\r\n            };\r\n\r\n            if ($.inArray(\"Person\", node.labels) > -1) {\r\n                params.filter = \"(any type:/people/person type:/people/deceased_person type:/book/author type:/visual_art/visual_artist )\";\r\n\r\n                //if ($.inArray(\"Painter\", node.labels) > -1) {\r\n                //    params.domain = \"/visual_art\";\r\n                //}\r\n\r\n            }\r\n            else if ($.inArray(\"Group\", node.labels) > -1 || $.inArray(\"Period\", node.labels) > -1 ) {\r\n\r\n                params.filter = \"(any type:/visual_art/art_period_movement type:/architecture/architectural_style  type:/time/event   type:/book/book_subject)\";\r\n     \r\n            }\r\n            else if ($.inArray(\"Provenance\", node.labels) > -1) {\r\n\r\n            \r\n                params.filter = \"(any type:/people/ethnicity type:/location/country )\";\r\n              //  params.query = node.Name + \" people\";\r\n            }\r\n            else if ( ispicture)\r\n            {\r\n                params.domain = \"/visual_art\";\r\n            }\r\n\r\n            var out = { id: undefined, error: undefined };\r\n\r\n            $.getJSON(service_url + '?callback=?', params, function (response) {\r\n\r\n                $(response.result).each(function (i, e) {\r\n\r\n\r\n                    if (e.name === node.Name || e.name == node.Wikipagename || e.name.indexOf(node.Name) > -1 || e.name.indexOf(node.Lookup) > -1)\r\n                        {\r\n                        out = e;\r\n                        return false;\r\n                    }\r\n                    //if (e.notable && (e.notable.name === type || e.notable.name.indexOf('Art') > -1)) {\r\n                    //    out = e.mid;\r\n                    //    return false;\r\n                    //}\r\n                });\r\n\r\n     \r\n                out.response = response.result;\r\n\r\n                callback(out);\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n    \r\n        \r\n    })\r\n    .directive('freebase', ['freebase.service', 'neo', function (service, neo) {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/freebase/node.freebase.html',\r\n        scope: {\r\n            node: '=',\r\n            active:'='\r\n        },\r\n        link: function ($scope) {\r\n\r\n            var getPersonData = function (node, callback) {\r\n\r\n                service.getPersonData(node.FB_ID, function (data) {\r\n\r\n                    $.extend(node, data);\r\n                    if (node.FB_date_of_birth && !node.YearFrom) {\r\n                        node.YearFrom = parseInt(node.FB_date_of_birth.split('-')[0]);\r\n                    }\r\n                    if (node.FB_date_of_death && !node.YearTo) {\r\n                        node.YearTo = parseInt(node.FB_date_of_death.split('-')[0]);\r\n                    }\r\n                    callback(node);\r\n\r\n                });\r\n\r\n            }\r\n\r\n            var getBlurb = function (node, callback) {\r\n\r\n\r\n                service.getText(node, function (blurb) {\r\n\r\n                    $scope.$apply(function () {\r\n                        $.extend(node, blurb);\r\n                        if (node.FB_blurb && !node.Description) {\r\n                            node.Description = node.FB_blurb;\r\n                        }\r\n                        if (node.FB_blurb_full && !node.Text) {\r\n                            node.Text = node.FB_blurb_full;\r\n                        }\r\n                    });\r\n\r\n                    callback(node);\r\n\r\n                });\r\n\r\n            }\r\n\r\n\r\n            var getData = function (node, blurbOnly) {\r\n\r\n                getBlurb(node, function (updated) {\r\n\r\n                    if ($.inArray(\"Person\", updated.labels) > -1 && !blurbOnly) {\r\n\r\n                        getPersonData(updated, function (updatedPerson) {\r\n\r\n                            console.dir(updatedPerson);\r\n                            neo.saveProps(updatedPerson)\r\n                             .then(function (nid) {\r\n                                 console.log(nid + \" saved\");\r\n                             });\r\n                        });\r\n                    }\r\n                    else {\r\n\r\n                        neo.saveProps(updated)\r\n                         .then(function (nid) {\r\n                             console.log(nid + \" saved\");\r\n                         });\r\n                    }\r\n\r\n                })\r\n\r\n            }\r\n\r\n            $scope.reselect = function (node, mid, name) {\r\n\r\n                $scope.clear(node);\r\n\r\n                node.FB_ID = mid;\r\n                node.FB_name = name;\r\n                getData(node);\r\n\r\n\r\n            }\r\n\r\n            $scope.clear = function (node) {\r\n\r\n                node.FB_ID = null;\r\n\r\n                if (node.Text === node.FB_blurb_full) {\r\n                    delete node.Text;\r\n                }\r\n\r\n                if (node.Description === node.FB_blurb) {\r\n                    delete node.Description\r\n                }\r\n\r\n                if (node.FB_date_of_birth && node.YearFrom == parseInt(node.FB_date_of_birth.split('-')[0])) {\r\n                    delete node.YearFrom;\r\n                }\r\n\r\n                if (node.FB_date_of_death && node.YearTo == parseInt(node.FB_date_of_death.split('-')[0])) {\r\n                    delete node.YearTo;\r\n                }\r\n\r\n                for (var prop in node) {\r\n                    if (prop.indexOf('FB_') == 0) {\r\n                        delete node[prop];\r\n                    }\r\n                }\r\n\r\n                neo.saveProps(node)\r\n                           .then(function (nid) {\r\n                               console.log(nid + \" saved\");\r\n                           });\r\n\r\n            }\r\n          \r\n            var loaded = false;\r\n\r\n            var getFreebase = function () {\r\n\r\n                service.getId($scope.node, function (result) {\r\n                   \r\n                    $scope.$apply(function () {\r\n                        $scope.disambiguation = result.response;\r\n                        loaded = true;\r\n                    })\r\n\r\n                });\r\n                \r\n\r\n            }\r\n\r\n            $scope.$watch('node', function (node) {\r\n\r\n                if (node) {\r\n\r\n                    loaded = false;\r\n\r\n                    if ($scope.active) {\r\n                        getFreebase();\r\n                    }\r\n                  \r\n                }\r\n            });\r\n\r\n            $scope.$watch('active', function (active) {\r\n\r\n                if (active && $scope.node && !loaded) {\r\n\r\n                    getFreebase();\r\n                }\r\n\r\n\r\n            })\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.node.graphpanel',['neograph.neo', 'neograph.utils'])\r\n    .directive('nodegraphpanel', ['neo', 'utils', function (neo, utils) {\r\n        return {\r\n            replace: true,\r\n            restrict: 'E',\r\n            templateUrl: 'app/node/graphpanel/node.graphpanel.html',\r\n            scope: {\r\n                node: '='\r\n                , active: '='\r\n                ,window: '=?'\r\n                ,width: '=?'\r\n                ,height: '=?'\r\n            },\r\n            link: function ($scope, $element, $attrs) {\r\n                \r\n                \r\n                \r\n                \r\n                var network;\r\n                \r\n                var graph = {\r\n                    nodes: new vis.DataSet(),\r\n                    edges: new vis.DataSet()\r\n                };\r\n                \r\n                $scope.view = utils.newView('NodeGraph', 'NodeGraph');\r\n                \r\n                $scope.view.queryGenerator = {\r\n                    type: \"nodeGraph\",\r\n                    options: { node: $scope.node }\r\n                }\r\n                \r\n                $scope.$watch('node', function (n) {\r\n                    $scope.view.queryGenerator.options = { node: n };\r\n                })\r\n                \r\n                $scope.w = 200;\r\n                $scope.h = 200;\r\n                \r\n                $scope.$watch('active', function (active) {\r\n                    if (active && !network) {\r\n                        \r\n                    \r\n                        if ($scope.width && $scope.height) {\r\n                              $scope.w = $scope.width;\r\n                            $scope.h = $scope.height;\r\n                            \r\n\r\n                        }\r\n                        else if ($scope.window) {\r\n                          $scope.w = $scope.window.width;\r\n                            $scope.h = $scope.window.height - 170;\r\n                        }\r\n                        \r\n                        \r\n                        network = new vis.Network($element.find('.graphContainer')[0], graph, utils.graphOptions);\r\n                        network.setSize(($scope.w) + \"px\", ($scope.h) + \"px\");\r\n                        //fit to screen on resize\r\n                        network.on('resize', function (params) {\r\n                            network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n                        });\r\n                        \r\n                 \r\n                    //network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n                    }\r\n                });\r\n                \r\n                \r\n                \r\n                \r\n                $scope.$watch('view.data', function (data) {\r\n                    if ($scope.active) {\r\n                        console.log('drawing new graph');\r\n                        graph.nodes.clear();\r\n                        graph.edges.clear();\r\n                        var gArr = utils.toGraphData(data);\r\n                        graph.nodes.add(gArr.nodes);\r\n                        graph.edges.add(gArr.edges);\r\n                    }\r\n\r\n                });\r\n                \r\n                \r\n                $scope.$watch('window', function (w) {\r\n                    \r\n                    if (network && w) {\r\n                        network.setSize(($scope.window.width) + \"px\", ($scope.window.height - 170) + \"px\");\r\n                        network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n                    }\r\n              \r\n             \r\n                });\r\n                \r\n                \r\n                $scope.$watch('width', function () {\r\n                    \r\n                    if (network) {\r\n                        network.setSize(($scope.width) + \"px\", ($scope.height - 170) + \"px\");\r\n                        network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n                    }\r\n              \r\n             \r\n                });\r\n                $scope.$watch('height', function () {\r\n                    \r\n                    if (network) {\r\n                        network.setSize(($scope.width) + \"px\", ($scope.height - 170) + \"px\");\r\n                        network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n                    }\r\n              \r\n             \r\n                });\r\n   \r\n\r\n\r\n            }\r\n        }\r\n    }])","angular.module('node.graphTypes',['neograph.neo'])\r\n.directive('graphTypes', function () {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/graphtypes/node.graphTypes.html',\r\n        scope: {\r\n            node: '=',\r\n            window: '='\r\n        }\r\n        ,\r\n        link: function ($scope) {\r\n\r\n\r\n\r\n\r\n            $scope.$watch('node', function (node) {\r\n\r\n\r\n                if (node) {\r\n\r\n                    var querys = [];\r\n\r\n                    var Lookup = node.Lookup;\r\n\r\n\r\n                    //if ($.inArray('User', node.labels) > -1 || $.inArray('Picture', node.labels) > -1 || $.inArray('Favourite', node.labels) > -1) {\r\n                    //    querys.push(\r\n                    //                          {\r\n                    //                              name: \"All immediate relationships\",\r\n                    //                              q: \"MATCH (c)-[r]-(d) where ID(c) = \" + node.id + \" return c,d,r\"\r\n                    //                          })\r\n                    //}\r\n                    //else {\r\n\r\n                    //    querys.push(\r\n                    //                          {\r\n                    //                              name: \"All immediate relationships\",\r\n                    //                              q: \"MATCH (c)-[r]-(d:Global) where ID(c) = \" + node.id + \" return c,d,r\"\r\n                    //                          })\r\n\r\n                    //}\r\n\r\n\r\n                    if ($.inArray(\"Provenance\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Provenance\",\r\n                                q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n                            })\r\n                    }\r\n\r\n                    if ($.inArray(\"Period\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Period\",\r\n                                q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n                            })\r\n                    }\r\n\r\n                    if ($.inArray(\"Theme\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Theme\",\r\n                                q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n                            })\r\n                    }\r\n\r\n                    if ($.inArray(\"Person\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Outbound Influence\",\r\n                              //  q: \"MATCH (c {Lookup:'\" + Lookup + \"'})-[r]->(d:Painter)  -[s]->(e:Painter)  -[t]->(f:Painter) return c,d,e,f,r,s,t\",\r\n                                q:\"MATCH (c {Lookup:'\" + Lookup + \"'})-[r]->(d:Painter) with c,d,r optional  match(d) -[s]->(e:Painter) return c,d,r,s,e \",\r\n                                connectAll: true\r\n                            })\r\n\r\n                        querys.push(\r\n                          {\r\n                              name: \"Inbound Influence\",\r\n                          //    q: \"MATCH (c {Lookup:'\" + Lookup + \"'})<-[r]-(d:Painter)  <-[s]-(e:Painter)  <-[t]-(f:Painter) return c,d,e,f,r,s,t\",\r\n                              q: \"MATCH (c {Lookup:'\" + Lookup + \"'})<-[r]-(d:Painter) with c,d,r optional  match(d) <-[s]-(e:Painter) return c,d,r,s,e \",\r\n                              connectAll: true\r\n                          })\r\n\r\n                    }\r\n\r\n                    if ($.inArray(\"Group\", node.labels) > -1) {\r\n\r\n                        querys.push({\r\n                            name: 'Group',\r\n                            q: \"match (n {Lookup:'\" + Lookup + \"'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) and not m:Provenance and not p:Provenance return n,r,m,s,p\"\r\n    ,\r\n                            connectAll: true\r\n                        });\r\n\r\n                    }\r\n\r\n\r\n                    if ($.inArray(\"Iconography\", node.labels) > -1) {\r\n\r\n\r\n                        querys.push({\r\n                            name: 'Iconography',\r\n                            q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  and not d.Lookup='\" + Lookup + \"' and (d:\" + Lookup + \" or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r\"\r\n                          ,\r\n                            connectAll: true\r\n                        });\r\n\r\n                    }\r\n\r\n                    if (!node.temp.isPicture && node.YearFrom && node.YearTo) {\r\n\r\n                        var yq = \"MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and \";\r\n                        yq += \"((c.YearTo >= \" + node.YearFrom + \" and c.YearTo<= \" + node.YearTo + \") or (c.YearFrom >= \" + node.YearFrom + \" and c.YearFrom<= \" + node.YearTo + \"))\";\r\n                        yq += \"and ((d.YearTo >= \" + node.YearFrom + \" and d.YearTo<= \" + node.YearTo + \") or (d.YearFrom >= \" + node.YearFrom + \" and d.YearFrom<= \" + node.YearTo + \"))\";\r\n                        yq += \" return c,d,r\";\r\n                        querys.push({\r\n                            name: 'YearFromYearTo',\r\n                            q: yq\r\n\r\n                         ,\r\n                            connectAll: true\r\n                        });\r\n\r\n                    }\r\n\r\n                    angular.forEach(querys, function (query) {\r\n\r\n                        query.view = node.Lookup + \" - \" + query.name;\r\n                        query.type = \"Graph\";\r\n\r\n                    })\r\n\r\n\r\n                    $scope.querys = querys;\r\n\r\n\r\n                }\r\n                else {\r\n\r\n                    $scope.querys = [];\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n})","angular.module('node.imageRelationships',['neograph.neo'])\r\n    .directive('imageRelationships', ['neo', function (neo) {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: '/app/node/imageRelationships/node.imageRelationships.html',\r\n        scope: {\r\n            node: '=',\r\n            query: '=',\r\n            window:'='\r\n        }\r\n        ,\r\n        link: function ($scope) {\r\n\r\n         \r\n\r\n\r\n            $scope.$watch('node', function (node) {\r\n\r\n\r\n                if (node) {\r\n\r\n\r\n\r\n                    var querys = [];\r\n\r\n                    querys.push(\r\n                         {\r\n                             name: \"Linked pictures\",\r\n                             q: \"MATCH (c)-[r]-(d:Picture) where ID(c) = \" + node.id + \" return d\"\r\n                         })\r\n\r\n\r\n                    if ( node.YearFrom || node.YearTo) {\r\n                        var yq;\r\n\r\n                        if (node.YearFrom && node.YearTo) {\r\n                            yq = {\r\n                                q: \"MATCH (c:Picture) where  (c.YearTo >= \" + node.YearTo + \" and c.YearTo<= \" + node.YearTo + \") or (c.YearFrom >= \" + node.YearFrom + \" and c.YearFrom<= \" + node.YearFrom + \") return c\"\r\n                            }\r\n                        }\r\n                        else if (node.YearTo) {\r\n                            yq = {\r\n                                q: \"MATCH (c:Picture) where  (c.YearTo = \" + node.YearTo + \" ) or (c.YearFrom = \" + node.YearTo + \" ) return c\"\r\n                            };\r\n                        }\r\n                        else if (node.YearFrom) {\r\n                            yq = {\r\n                                q: \"MATCH (c:Picture) where  (c.YearTo = \" + node.YearFrom + \") or (c.YearFrom = \" + node.YearFrom + \" ) return c\"\r\n                            };\r\n                        }\r\n                        yq.name = \"Contemporaneous\";\r\n                        yq.type = \"Grid\";\r\n\r\n\r\n                        yq.preview = yq.q + \" limit 3\";\r\n                        querys.push(yq);\r\n\r\n                    }\r\n\r\n\r\n                    angular.forEach(node.labels, function (label) {\r\n\r\n                        if (label != \"Picture\" && label != \"Painting\") {\r\n                            querys.push(\r\n                          {\r\n                              isLabel:true,\r\n                              name:  label,\r\n                              q: \"MATCH (c:Picture:\" + label + \") return c\",\r\n                              preview: \"MATCH (c:Picture:\" + label + \")  where ID(c)<>\" + node.id + \"  return c limit 3\",\r\n                              view: label,\r\n                              type:\"Grid\",\r\n                              queryGenerator: { id: \"nodeFilter\", options: { node: { Lookup: label } } }\r\n                          })\r\n\r\n                        }\r\n\r\n                    })\r\n\r\n                  \r\n                    //if (node.YearFrom && node.YearTo) {\r\n\r\n                    //    var yq = \"MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and \";\r\n                    //    yq += \"((c.YearTo >= \" + node.YearFrom + \" and c.YearTo<= \" + node.YearTo + \") or (c.YearFrom >= \" + node.YearFrom + \" and c.YearFrom<= \" + node.YearTo + \"))\";\r\n                    //    yq += \"and ((d.YearTo >= \" + node.YearFrom + \" and d.YearTo<= \" + node.YearTo + \") or (d.YearFrom >= \" + node.YearFrom + \" and d.YearFrom<= \" + node.YearTo + \"))\";\r\n                    //    yq += \" return c,d,r\";\r\n                    //    querys.push({\r\n                    //        name: 'YearFromYearTo',\r\n                    //        q: yq\r\n\r\n                    //     ,\r\n                    //        connectAll: true\r\n                    //    });\r\n\r\n                    //}\r\n\r\n\r\n\r\n                    $scope.querys = querys;\r\n\r\n                    angular.forEach(querys,function(query){\r\n                    \r\n                        neo.getGraph(query.preview || query.q)\r\n                       .then(function (g) {\r\n                                \r\n                           query.hasData = !$.isEmptyObject(g.nodes);\r\n                        \r\n\r\n                           query.data = g;\r\n                       });\r\n                    });\r\n\r\n\r\n                    //   console.log(querys);\r\n\r\n                }\r\n                else {\r\n\r\n                    $scope.querys = [];\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n}])","angular.module('neograph.node.images',['neograph.neo'])\r\n    .directive('nodeimages', ['neo', function (neo) {\r\n    return {\r\n        replace: true,\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/images/node.images.html',\r\n        scope: {\r\n            node: '='\r\n            , active: '='\r\n            , updatemasonry:'=' //required to pass on to images. if defined then masonry not used\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n            $scope.images = [];\r\n\r\n            var loaded = false;\r\n\r\n            //load images on active change or on node change if active\r\n            $scope.$watch('active', function (active) {\r\n\r\n                if ($scope.node && active && !loaded) {\r\n                    getImages();\r\n                }\r\n            });\r\n\r\n            $scope.$watch('node', function (node) {\r\n                loaded = false;\r\n                if (!$scope.active) {\r\n                    $scope.images = [];\r\n                }\r\n                if (node && $scope.active) {\r\n                    getImages();\r\n                }\r\n            });\r\n\r\n            var getImages = function () {\r\n\r\n                neo.getImages($scope.node).then(function (images) {\r\n                    $scope.images = images;\r\n                    loaded = true;\r\n                })\r\n\r\n            }\r\n\r\n            $scope.openGridTab = function (node) {\r\n\r\n                $scope.publish(\"query\", {\r\n                    view: node.Lookup,\r\n                    type: \"Grid\",\r\n                    queryGenerator: { id: \"nodeFilter\", options: { node: node } }\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.node.multiple',['neograph.neo', 'neograph.utils'])\r\n    .directive('multiple', ['neo', 'utils', function (neo, utils) {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/multiple/node.multiple.html',\r\n        scope: {\r\n            nodes: '='\r\n        },\r\n        link: function ($scope) {\r\n\r\n            $scope.$watch('nodes', function (nodes) {\r\n\r\n                if (nodes) {\r\n                    var allLabels = nodes.map(function (node) {\r\n                        return node.labels;\r\n                    });\r\n\r\n                    $scope.labels = allLabels.shift().filter(function (v) {\r\n                        return allLabels.every(function (a) {\r\n                            return a.indexOf(v) !== -1;\r\n                        });\r\n                    });\r\n\r\n                    $scope.originalLabels = angular.copy($scope.labels);//store for saving so we know what to change\r\n\r\n                }\r\n\r\n            });\r\n\r\n            $scope.addLabel = function (item) {\r\n\r\n                if ($scope.labels.indexOf(item.Label) === -1) {\r\n                    $scope.labels.push(item.Label);\r\n                }\r\n            }\r\n            $scope.removeLabel = function (label) {\r\n\r\n                var ind = $scope.labels.indexOf(label);\r\n                if (ind > -1) {\r\n                    $scope.labels.splice(ind, 1);\r\n                }\r\n\r\n            }\r\n\r\n            $scope.save = function () {\r\n                neo.saveMultiple({\r\n                    nodes: $scope.nodes,\r\n                    labels: $scope.labels,\r\n                    originalLabels: $scope.originalLabels\r\n                });\r\n            }\r\n\r\n            $scope.restore = function () {\r\n                var restored = [];\r\n                angular.forEach($scope.nodes, function (node) {\r\n                    neo.restoreNode(node).then(function () {\r\n                        restored.push(node);\r\n                        if (restored.length === $scope.nodes.length) {\r\n                            $scope.publish(\"restored\", { selection: { nodes: restored } });\r\n                            $scope.selection.multiple = undefined;\r\n                            $scope.tabs = [];\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            $scope.delete = function () {\r\n                var deleted = [];\r\n                angular.forEach($scope.nodes, function (node) {\r\n                    neo.deleteNode(node).then(function () {\r\n                        deleted.push(node);\r\n                        if (deleted.length === $scope.nodes.length) {\r\n                            $scope.publish(\"deleted\", { selection: { nodes: deleted } });\r\n                            $scope.selection.multiple = undefined;\r\n                            $scope.tabs = [];\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            $scope.destroy = function () {\r\n                var deleted = [];\r\n                angular.forEach($scope.nodes, function (node) {\r\n                    neo.destroyNode(node).then(function () {\r\n                        deleted.push(node);\r\n                        if (deleted.length === $scope.nodes.length) {\r\n                            $scope.publish(\"deleted\", { selection: { nodes: deleted } });\r\n                            $scope.selection.multiple = undefined;\r\n                            $scope.tabs = [];\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n          \r\n\r\n            //$scope.selection.multiple = new (function (nodes, labels) {\r\n            //    var self = this;\r\n            //    this.nodes = nodes;\r\n            //    this.labels = labels;\r\n             \r\n\r\n             \r\n\r\n\r\n            //})(params.selection.nodes, labels);\r\n\r\n        }\r\n    }\r\n}]);","angular.module('neograph.node.properties',['neograph.node.service', 'neograph.session', 'neograph.utils'])\r\n    .controller('EditPropertiesCtrl',  function (nodeService, session, utils,$scope,$stateParams) {\r\n       \r\n                if ($stateParams.node){\r\n                    nodeService.get($stateParams.node,true).then(function(node){\r\n                            $scope.node = node;\r\n                        }); \r\n                }\r\n                \r\n                $scope.deleteNode = function (n) {\r\n                    \r\n                    nodeService.delete(n)\r\n                    .then(function (deleted) {\r\n                        \r\n                        $scope.selection.selectedNode = deleted;\r\n                        //this assumes that the current view is not of deleted items, otherwise this would be inconsistent\r\n                        //let view handle its own data ?\r\n                        delete $scope.activeView.data.nodes[n.id];\r\n                        $scope.publish(\"deleted\", { selection: { nodes: [n] } });\r\n\r\n                    });\r\n                }\r\n                \r\n                \r\n                $scope.destroyNode = function (n) {\r\n                    \r\n                    nodeService.destroy(n)\r\n                    .then(function (deleted) {\r\n                        \r\n                        $scope.selection.selectedNode = undefined;\r\n                        \r\n                        //this assumes that the current view is not of deleted items, otherwise this would be inconsistent\r\n                        //let view handle its own data ?\r\n                        delete $scope.activeView.data.nodes[n.id];\r\n                        \r\n                        $scope.publish(\"deleted\", { selection: { nodes: [n] } });\r\n\r\n                    });\r\n\r\n                }\r\n                \r\n                $scope.saveNode = function (n) {\r\n        \r\n                    nodeService.save(n, session.user)\r\n                    .then(function (node) {\r\n                        \r\n                        $scope.node = node;\r\n                        \r\n                        var newData = {};\r\n                        newData[node.id] = node;\r\n                        $scope.publish(\"dataUpdate\", newData)\r\n                        //if type, refresh types\r\n                        if (node.class == \"Type\") {\r\n                            utils.refreshTypes();\r\n                        }\r\n                        \r\n                        $(node.temp.links).each(function (i, e) { e.editing = undefined; })\r\n\r\n                    });\r\n                }\r\n                \r\n                \r\n                $scope.restoreNode = function (n) {\r\n                    nodeService.restore(n).then(function (node) {\r\n                        $scope.node = node;\r\n                        var newData = {};\r\n                        newData[node.id] = node;\r\n                        $scope.publish(\"dataUpdate\", newData)\r\n                    });\r\n                }\r\n                \r\n                \r\n                $scope.$watch(\"node\", function (node) {\r\n                    if (node) {\r\n                        \r\n                        node.labelled = node.labelled || [];\r\n                        \r\n                        $(\".labelEdit input\").val('');\r\n                        \r\n                        $scope.deleted = node.labels.indexOf('Deleted') > -1;\r\n                    }\r\n\r\n                });\r\n                \r\n                \r\n                \r\n                \r\n                //tie label value to lookup if empty or the same already\r\n                $scope.$watch(\"node.lookup\", function (lookup, beforechange) {\r\n                    if (lookup) {\r\n                        \r\n                        if ($scope.node.label != undefined && $scope.node.label.trim() == \"\" || $scope.node.label == beforechange) {\r\n                            $scope.node.label = lookup;\r\n\r\n                        }\r\n                 \r\n\r\n                    }\r\n\r\n                });\r\n\r\n              \r\n                \r\n                \r\n                $scope.nodeTypes = [];\r\n                \r\n                \r\n    //update tabs & properties if labels change\r\n    var settingPropsAndTabs = false;\r\n \r\n /*\r\n    //how can i stop this firing for newly loaded nodes ?\r\n    $scope.$watchCollection('selection.selectedNode.labels', function (labels) {\r\n     \r\n        if (labels && labels.length && !settingPropsAndTabs ) {\r\n\r\n            settingPropsAndTabs = true;\r\n\r\n            nodeService.getProps(labels).then(function (out) {\r\n\r\n                console.dir($scope.selection.selectedNode);\r\n                $scope.selection.selectedNode = $.extend(null,out.properties, $scope.selection.selectedNode);\r\n                $scope.selection.selectedNode.temp.tabs = out.tabs;\r\n                $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n          \r\n                settingPropsAndTabs = false;\r\n            })\r\n        }\r\n    });\r\n    */\r\n                \r\n                $scope.$watchCollection(\"node.labels\", function (labels) {\r\n                    console.log('labels changed')\r\n                    console.log(labels);\r\n                    if (labels) {\r\n                        \r\n                        var selectedTypes = [];\r\n                        angular.forEach($scope.node.labels, function (l) {\r\n                            if (utils.types[l]) {\r\n                                selectedTypes.push({ lookup: l, class: 'Type' });\r\n                            }\r\n                        });\r\n                        \r\n                        $scope.nodeTypes = selectedTypes;\r\n                        \r\n                        //     console.log(selectedTypes);\r\n                        \r\n                        //set type if not yet set and one label added that is a type\r\n                        if (!$scope.node.class && $scope.nodeTypes.length === 1) {\r\n                            \r\n                            $scope.node.class = $scope.nodeTypes[0].lookup; //for types the lookup will always be the label\r\n\r\n                        }\r\n\r\n                    //get properties relating to chosen labels and extend node to enable them\r\n                    //nodeService.getProps(labels).then(function (out) {\r\n                    //    console.log('extending node');\r\n                    //    console.log(out);\r\n                    //    console.log(out.props);\r\n                    //    $scope.node = $.extend(out.props,$scope.node);\r\n                    //    console.log($scope.node);\r\n                    //});\r\n\r\n\r\n                    }\r\n\r\n                });\r\n                \r\n                //can be called from clicking label, in which case item is text value, or from the typeahead in which case it is an object with Lookup property\r\n                $scope.setType = function (item) {\r\n                    //   var itemtext = item.Label ||item.Lookup\r\n                    console.log(item);\r\n                    if (utils.isType(item.label)) {\r\n                        $scope.node.class = item.label;\r\n                    }\r\n                }\r\n                \r\n      \r\n                \r\n                $scope.$watch('newPredicate', function (v) {\r\n                    \r\n                    if (v) {\r\n                        $scope.addRelationship({ lookup: v.toUpperCase().replace(/ /g, \"_\") });\r\n                    }\r\n                });\r\n                \r\n                \r\n                \r\n                \r\n                $scope.addRelationship = function (item) {\r\n                    \r\n                    \r\n                    var p = predicateFactory.create({lookup:item.lookup,direction: \"out\"});//currently no way to select 'in' relationships\r\n                    \r\n              \r\n                    $scope.node.relationships = $scope.node.relationships || {};\r\n                    if (!$scope.node.relationships[p.toString()]) {\r\n                        $scope.node.relationships[p.toString()] = { predicate: p, items: [] };\r\n                    }\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n           \r\n\r\n\r\n            });","angular.module('neograph.node.relationships',['neograph.node.service', 'neograph.session', 'neograph.utils'])\r\n    .controller('EditRelationshipsCtrl',  function (nodeService, session, utils,$scope,$stateParams) {\r\n       \r\n                if ($stateParams.node){\r\n                    nodeService.get($stateParams.node,true).then(function(node){\r\n                            $scope.node = node;\r\n                        }); \r\n                }\r\n\r\n                $scope.$watch(\"node\", function (node) {\r\n                    if (node) {\r\n                        \r\n                        node.labelled = node.labelled || [];\r\n                        \r\n                        $(\".labelEdit input\").val('');\r\n                        \r\n                        $scope.deleted = node.labels.indexOf('Deleted') > -1;\r\n                    }\r\n\r\n                });\r\n                \r\n                \r\n                \r\n                \r\n             \r\n\r\n          \r\n                \r\n                \r\n                $scope.nodeTypes = [];\r\n                \r\n                \r\n    //update tabs & properties if labels change\r\n    var settingPropsAndTabs = false;\r\n \r\n /*\r\n    //how can i stop this firing for newly loaded nodes ?\r\n    $scope.$watchCollection('selection.selectedNode.labels', function (labels) {\r\n     \r\n        if (labels && labels.length && !settingPropsAndTabs ) {\r\n\r\n            settingPropsAndTabs = true;\r\n\r\n            nodeService.getProps(labels).then(function (out) {\r\n\r\n                console.dir($scope.selection.selectedNode);\r\n                $scope.selection.selectedNode = $.extend(null,out.properties, $scope.selection.selectedNode);\r\n                $scope.selection.selectedNode.temp.tabs = out.tabs;\r\n                $scope.tabs = $scope.selection.selectedNode.temp.tabs;\r\n          \r\n                settingPropsAndTabs = false;\r\n            })\r\n        }\r\n    });\r\n    */\r\n                \r\n             \r\n           \r\n      \r\n                \r\n                $scope.$watch('newPredicate', function (v) {\r\n                    \r\n                    if (v) {\r\n                        $scope.addRelationship({ lookup: v.toUpperCase().replace(/ /g, \"_\") });\r\n                    }\r\n                });\r\n                \r\n                \r\n                \r\n                \r\n                $scope.addRelationship = function (item) {\r\n                    \r\n                    \r\n                    var p = predicateFactory.create({lookup:item.lookup,direction: \"out\"});//currently no way to select 'in' relationships\r\n                    \r\n              \r\n                    $scope.node.relationships = $scope.node.relationships || {};\r\n                    if (!$scope.node.relationships[p.toString()]) {\r\n                        $scope.node.relationships[p.toString()] = { predicate: p, items: [] };\r\n                    }\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n           \r\n\r\n\r\n            });","angular.module('neograph.node.wikipedia',['neograph.neo'])\r\n    .factory('wikiservice',function(){\r\n       \r\n       var wikiTabs = function (data,page) {\r\n\r\n        var tabs = [];\r\n\r\n        if (data.parse) {\r\n\r\n       //     console.log(data.parse.text[\"*\"]);\r\n            var $wikiDOM = $(\"<document>\" + data.parse.text[\"*\"] + \"</document>\");\r\n\r\n            // handle redirects\r\n            if ($wikiDOM.find('ul.redirectText').length > 0) {\r\n              \r\n                tabs = { redirect: $wikiDOM.find(\"ul.redirectText li a\").attr(\"title\") };\r\n\r\n                //$wikiDOM.find('li:contains(\"REDIRECT\") a').css(\"cursor\", \"pointer\");\r\n                //$wikiDOM.find('li:contains(\"REDIRECT\") a').each(function () {\r\n\r\n                //    $(this).replaceWith($(this).text());\r\n\r\n                //});\r\n\r\n                //if ($wikiDOM.find('li:contains(\"REDIRECT\")').length == 1) {\r\n                //    // self.getItem().wikiPageName = ;\r\n                //    var redirectTo = $wikiDOM.find('li:contains(\"REDIRECT\")').text().replace('REDIRECT', '').trim();\r\n\r\n                //    service.getWiki(redirectTo).done(function (data) {\r\n                //        self.populateWiki(data);\r\n                //    });\r\n\r\n\r\n                //}\r\n                //else {\r\n\r\n                //    self.wiki($wikiDOM);\r\n                //    self.loaded(true);\r\n                //    self.loading(false);\r\n\r\n\r\n                //}\r\n\r\n            }\r\n            else {\r\n\r\n                var images = $(\"<div></div>\");\r\n\r\n\r\n                $wikiDOM.find(\".image\").each(function (i, e) {\r\n\r\n                    $(e).attr(\"href\", $(e).attr(\"href\").replace(\"/wiki/\", \"https://en.wikipedia.org/wiki/\" + page.replace(\" \", \"_\") + \"#/media/\"))\r\n                    .attr(\"target\", \"_blank\").css({\"padding-right\": \"5px\",\"padding-bottom\": \"5px\"});\r\n\r\n                });\r\n\r\n\r\n                $wikiDOM.find(\".image\").appendTo(images);\r\n\r\n               \r\n\r\n                $wikiDOM.find(\"p\").css({ \"margin-bottom\": \"4px\", \"clear\": \"left\" });\r\n\r\n\r\n                //$wikiDOM.find(\"p,.thumb,.thumbinner\").css({ \"width\": \"340px\" });\r\n                $wikiDOM.find(\"p,.thumb,.thumbinner\").css({ \"width\": \"100%\" });\r\n\r\n                // $wikiDOM.find(\".gallery.p,.gallery.thumb,.gallery.thumbinner\").css({ \"width\": \"\" });\r\n\r\n                // $wikiDOM.find(\"h2,h3\").css({ \"margin-top\": \"4px\", \"float\": \"left\", \"clear\": \"left\" });\r\n                //$wikiDOM.find(\"h2,h3,h4\").css({ \"margin-top\": \"4px\", \"margin-bottom\": \"2px\", \"float\": \"left\", \"clear\": \"left\", \"width\": \"340px\", \"overflow\": \"hidden\" });\r\n                $wikiDOM.find(\"h2,h3,h4\").css({ \"margin-top\": \"4px\", \"margin-bottom\": \"2px\", \"float\": \"left\", \"clear\": \"left\", \"width\": \"100%\", \"overflow\": \"hidden\" });\r\n                $wikiDOM.find(\"#toc\").remove();\r\n                $wikiDOM.find(\".editsection\").remove();\r\n                $wikiDOM.find(\".magnify\").remove();\r\n                $wikiDOM.find(\".reflist\").remove();\r\n                $wikiDOM.find(\"img\").css({ \"display\": \"block\", \"float\": \"left\", \"margin-right\": \"3px\", \"margin-bottom\": \"3px\" });\r\n                $wikiDOM.find(\".thumb,.thumbinner\").css({ \"float\": \"left\", \"margin-right\": \"3px\", \"margin-bottom\": \"3px\" });\r\n                $wikiDOM.find(\".thumbcaption\").css({ \"font-size\": \"11px\" });\r\n                $wikiDOM.find(\".plainlinks\").remove();\r\n                $wikiDOM.find(\"#navbox\").remove();\r\n                $wikiDOM.find(\".rellink\").remove();\r\n                $wikiDOM.find(\".references\").remove();\r\n                $wikiDOM.find(\".IPA\").remove();\r\n                $wikiDOM.find(\"sup\").remove();\r\n                //$wikiDOM.find(\"dd,blockquote\").css({ \"margin\": \"10px\", \"width\": \"340px\", \"font-size\": \"11px\" });\r\n                $wikiDOM.find(\"dd,blockquote\").css({ \"margin\": \"0px\", \"width\": \"\", \"font-size\": \"11px\", \"margin-bottom\": \"10px\", \"margin-top\": \"7px\" });\r\n                $wikiDOM.find(\"blockquote p\").css({ \"font-size\": \"11px\" });\r\n                $wikiDOM.find(\".navbox, .vertical-navbox\").remove(); //nb this has interesting stuff in it\r\n                $wikiDOM.find(\"#persondata\").remove();\r\n                $wikiDOM.find(\"#Footnotes\").parent().remove();\r\n                $wikiDOM.find(\"#References\").parent().remove();\r\n                $wikiDOM.find(\"#Bibliography\").parent().remove();\r\n                $wikiDOM.find(\".refbegin\").remove();\r\n                $wikiDOM.find(\".dablink\").remove();\r\n                $wikiDOM.find(\"small\").remove(); //a bit too radical?\r\n                $wikiDOM.find(\"img[alt='Wikisource-logo.svg'], img[alt='About this sound'], img[alt='Listen']\").remove();\r\n                $wikiDOM.find(\".mediaContainer\").remove();\r\n                //remove links - todo:leave external links ?\r\n                $wikiDOM.find(\"a\").each(function () { $(this).replaceWith($(this).html()); })\r\n\r\n                $wikiDOM.find(\".gallery\").find(\"p\").css({ \"width\": \"\", \"font-size\": \"11px\", \"float\": \"left\", \"clear\": \"left\" });\r\n                $wikiDOM.find(\".gallery\").find(\".thumb\").css({ \"width\": \"\" });\r\n                $wikiDOM.find(\".gallerybox\").css(\"height\", \"220px\");\r\n                $wikiDOM.find(\".gallerybox\").css(\"float\", \"left\");\r\n\r\n                $wikiDOM.find(\"table\").css({ \"background\": \"none\", \"width\": \"\", \"max-width\": \"\", \"color\": \"\" });\r\n\r\n                $wikiDOM.find(\".gallery\").remove();\r\n                $wikiDOM.find(\"#gallery\").parent().remove();\r\n                $wikiDOM.find(\"#notes\").parent().remove();\r\n                $wikiDOM.find(\"#sources\").parent().remove();\r\n\r\n                //radical - remoces all tables\r\n                $wikiDOM.find(\"table\").remove();\r\n\r\n\r\n                $wikiDOM.find(\"h1,h2,h3,h4\").next().css({ \"clear\": \"left\" });\r\n\r\n                //remove description lists\r\n                $wikiDOM.find(\"dl\").remove();\r\n                //removes images\r\n                $wikiDOM.find(\".thumb\").remove();\r\n\r\n\r\n                $wikiDOM.find(\"ul,.cquote\").css({ \"float\": \"left\", \"clear\": \"left\" });\r\n\r\n\r\n\r\n                $wikiDOM.find(\".infobox, .vcard\").remove();\r\n                $wikiDOM.find(\".thumbimage\").css({ \"max-width\": \"150px\", \"height\": \"auto\" });\r\n\r\n                $wikiDOM.find(\".mw-editsection\").remove();\r\n\r\n\r\n                $wikiDOM.html($wikiDOM.html().replace('()', ''));\r\n                $wikiDOM.html($wikiDOM.html().replace('(; ', '('));\r\n\r\n\r\n\r\n                //    $wikiDOM.prepend(\"<h2>\" + self.query() + \"</h2>\");\r\n\r\n\r\n                $wikiDOM.find(\"h2\").css({ \"cursor\": \"pointer\", \"color\": \"rgba(0,85,128,1)\", \"font-size\": \"20px\" });\r\n                $wikiDOM.find(\"h3\").css({ \"font-size\": \"18px\" });\r\n                $wikiDOM.find('#Gallery').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#See_also').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Notes').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#External_links').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Selected_works').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Sources').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Other_reading').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Further_reading').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Resources').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Further_reading_and_sources').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#List_of_paintings').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Self-portraits').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Selected_paintings').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#References_and_sources').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Partial_list_of_works').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('#Notes_and_references').parent().nextUntil(\"h2\").andSelf().remove();\r\n\r\n                $wikiDOM.find('[id^=Selected_works]').parent().nextUntil(\"h2\").andSelf().remove();\r\n                $wikiDOM.find('[id^=Books]').parent().nextUntil(\"h2\").andSelf().remove();\r\n                //    $wikiDOM.find('#Books/Essays').parent().nextUntil(\"h2\").andSelf().remove();\r\n\r\n\r\n\r\n                //var $menu = $tabs.find(\"#tabmenu\");\r\n                //var $content = $tabs.find(\"#tabcontent\");\r\n\r\n                var $introTab = $(\"<div></div>\");\r\n                $wikiDOM.find(\"p:first\").nextUntil(\"h2\").andSelf().appendTo($introTab);\r\n                if ($introTab.text().indexOf(\"Redirect\") === -1 && $introTab.text().indexOf(\"may refer to\") === -1) {\r\n                    $introTab.find('ul').remove();\r\n                }\r\n                if ($introTab.html()) {\r\n                    tabs.push({\r\n                        header: \"Summary\",\r\n                        content: $introTab.html().replace('/; /g', '')\r\n                    });\r\n                }\r\n\r\n\r\n                $wikiDOM.find(\"h2\").each(function (i, e) {\r\n\r\n                    let $tab = $(\"<div></div>\");\r\n                    $(e).nextUntil(\"h2\").appendTo($tab);\r\n                    if ($tab.html()) {\r\n\r\n                        tabs.push({\r\n                            header: $(e).text(),\r\n                            content: $tab.html()\r\n                        });\r\n                    }\r\n\r\n                });\r\n\r\n                if (images.html()) {\r\n\r\n                    images.find(\"img\").css({ \"width\": \"250px\", \"marginBottom\": \"5px\" });\r\n\r\n                    tabs.push({\r\n                        header: \"Images\",\r\n                        content: images.html()\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return tabs;\r\n\r\n    }\r\n        \r\n        \r\n       var getWiki = function (page, callback) {\r\n\r\n            $.getJSON('http://en.wikipedia.org/w/api.php?action=parse&format=json&callback=?',\r\n                  {\r\n                      page: page,\r\n                      prop: 'text',\r\n                      //prop: 'wikitext',\r\n                      uselang: 'en'\r\n                  },\r\n                  function (data) {\r\n                      console.log(data);\r\n                      var tabs = wikiTabs(data, page);\r\n\r\n                      if (tabs.redirect) {\r\n\r\n                          getWiki(tabs.redirect, callback);\r\n\r\n                      }\r\n                      else {\r\n                          callback(tabs);\r\n                      }\r\n\r\n\r\n                  });\r\n       } \r\n                 \r\n                 \r\n        return {\r\n\r\n            getPage: function (page, callback) {\r\n\r\n                getWiki(page, callback);\r\n\r\n            }\r\n        }\r\n        \r\n        \r\n    })\r\n    .directive('wikipedia', ['wikiservice', 'neo',function (wikiservice,neo) {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/wikipedia/node.wikipedia.html',\r\n        scope: {\r\n            node: '=',\r\n            window: '=',\r\n            active:'='\r\n        },\r\n        link: function ($scope,$element) {\r\n\r\n            $scope.tabs = [];\r\n\r\n            $scope.setActiveTab = function (tab) {\r\n                $scope.activeTab = tab;\r\n            }\r\n       \r\n            var loaded = false;\r\n            $scope.$watch('node', function (node) {\r\n                if (node) {\r\n                    loaded = false;\r\n                    $scope.page = node.Wikipagename || node.Name || node.Title;\r\n                }\r\n\r\n            });\r\n\r\n            $scope.savePage = function () {\r\n\r\n                $scope.node.Wikipagename = $scope.page;\r\n                neo.saveWikipagename($scope.node).then(function (node) {\r\n                    $scope.page = node.Wikipagename;\r\n                });\r\n\r\n            }\r\n\r\n            var getPage = function () {\r\n\r\n                wikiservice.getPage($scope.page, function (tabs) {\r\n\r\n                    $scope.tabs = tabs;\r\n                    $scope.activeTab = $scope.tabs[0];\r\n                    $scope.$digest();\r\n                    $($element).find('.wikidropdown').dropdown();\r\n                    loaded = true;\r\n                });\r\n            }\r\n\r\n            $scope.$watch('page', function (page) {\r\n\r\n                if (page && $scope.active) {\r\n\r\n                    getPage();\r\n                }\r\n                else {\r\n                    $scope.tabs = [];\r\n                }\r\n\r\n            });\r\n\r\n            $scope.$watch('active', function (active) {\r\n\r\n                if ($scope.page && active && !loaded) {\r\n\r\n                    getPage();\r\n\r\n                }\r\n\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.query.generator.favouritesFilter',['neograph.neo'])\r\n.directive('favouritesFilter', ['neo', function (neo) {\r\n\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/query/generator/favouritesFilter.html',\r\n        scope: {\r\n            options: '='\r\n            ,\r\n            generated: '='\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n\r\n            $scope.filters = [];\r\n            $scope.node = {};\r\n            var labels = [];\r\n            $scope.$watch('options', function (options) {\r\n                if (options) {\r\n                    $scope.node = options.user;\r\n                }\r\n            });\r\n\r\n            $scope.$watch('node', function (user) {\r\n                load();\r\n            });\r\n\r\n            var load = function () {\r\n                if ($scope.node) {\r\n                    labels = [$scope.node.Lookup, 'Favourite'];\r\n                    getFilters();\r\n                    $scope.enabledFilters = [];\r\n                    $scope.process();\r\n                }\r\n\r\n            }\r\n\r\n            var getFilters = function () {\r\n                if (labels && labels.length) {\r\n\r\n                    var labelQuery = \"match (a:\" + labels.join(':') + \") - [] -> (b) return distinct(LABELS(b))\";\r\n\r\n                    neo.getDistinctLabelsQuery(labelQuery)\r\n                    .then(function (l) {\r\n\r\n                        //remove filter for this node as it is duplicating\r\n                        angular.forEach(labels, function (lab) {\r\n                            l.splice($.inArray(lab, l), 1);\r\n                        });\r\n                        $scope.filters = l;\r\n\r\n                    });\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n            $scope.process = function (labs) {\r\n\r\n                if ($scope.node) {\r\n\r\n                    labs = labs || [];\r\n\r\n                    var b = \"b\";\r\n                    if (labs.length) {\r\n                        b += \":\" + labs.join(\":\");\r\n                    }\r\n\r\n                    var q = \"match (a:\" + labels.join(':') + \") - [] -> (\" + b + \")\";\r\n\r\n                    \r\n                     \r\n                    $scope.generated = q + \" return b\";\r\n                 \r\n\r\n\r\n\r\n                    if (labs.length) {\r\n                        neo.getDistinctLabelsQuery(q + \" return distinct(LABELS(b))\")\r\n                          .then(function (l) {\r\n                              $scope.enabledFilters = l;\r\n\r\n                          });\r\n                    }\r\n                    else {\r\n                        $scope.enabledFilters = [];\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.query.generator.nodeFilter',['neograph.neo'])\r\n    .directive('nodeFilter', ['neo', function (neo) {\r\n\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/query/generator/nodeFilter.html',\r\n        scope: {\r\n            options: '='\r\n            ,\r\n            generated: '='\r\n            ,\r\n            nodechanged: '&?'\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n\r\n            $scope.filters = [];\r\n            $scope.node = {};\r\n            var labels = [];\r\n\r\n            $scope.$watch('options', function (options) {\r\n\r\n                console.log('node filter options changed')\r\n                $scope.node = options.node;\r\n\r\n            });\r\n        \r\n\r\n            //$scope.$watch('options.node', function (node) {\r\n             \r\n            //    console.log('node filter options.node changed')\r\n                 \r\n              \r\n            //});\r\n\r\n            $scope.$watch('node', function (node) {\r\n                if ($scope.nodechanged) {\r\n                    $scope.nodechanged({ node: node });\r\n                }\r\n                load();\r\n            });\r\n        \r\n            $scope.openNode = function () {\r\n\r\n                if ($scope.node) {\r\n                    $scope.publish('selected',{selection:{nodes:[$scope.node]}})\r\n                }\r\n            }\r\n\r\n            var load = function () {\r\n                if ($scope.node) {\r\n                    labels = [$scope.node.Label, 'Picture'];\r\n                    getFilters();\r\n                    $scope.enabledFilters = [];\r\n                    $scope.process();\r\n                }\r\n            }\r\n\r\n            var getFilters = function () {\r\n                console.log('node filter - get filters')\r\n                console.log(labels);\r\n                if (labels && labels.length) {\r\n                    neo.getDistinctLabels(labels)\r\n                    .then(function (l) {\r\n\r\n                        //remove filter for this node as it is duplicating\r\n                        angular.forEach(labels, function (lab) {\r\n                            l.splice($.inArray(lab, l), 1);\r\n                        });\r\n\r\n                        $scope.filters = l;\r\n                        console.log($scope.filters )\r\n                    });\r\n                }\r\n            }\r\n\r\n\r\n            $scope.process = function (labs) {\r\n\r\n                if ($scope.node) {\r\n\r\n                    if (!labs || !labs.length) {\r\n                        labs = labels;\r\n                    }\r\n                    else {\r\n                        labs = labs.concat(labels);\r\n                    }\r\n\r\n                    $scope.generated = \"match (a:\" + labs.join(':') + \" ) return a order by a.Status desc limit 500\";\r\n\r\n                    if (labs != labels) {\r\n                        neo.getDistinctLabels(labs)\r\n                          .then(function (l) {\r\n                              $scope.enabledFilters = l;\r\n\r\n                          });\r\n                    }\r\n                    else {\r\n                        $scope.enabledFilters =[];\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.query.generator.nodeGraph',['neograph.neo'])\r\n    .directive('nodeGraph', ['neo', function (neo) {\r\n\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/query/generator/nodeGraph.html',\r\n        scope: {\r\n            options: '='\r\n            ,\r\n            generated: '='\r\n            ,\r\n            nodechanged: '&?'\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n            $scope.querys = [];\r\n            $scope.selected = \"\";\r\n            $scope.node = {};\r\n\r\n            $scope.$watch('options', function (options) {\r\n                console.log('node filter options changed')\r\n                $scope.node = options.node;\r\n\r\n            });\r\n\r\n            $scope.$watch('selected', function (sel) {\r\n                console.log(sel);\r\n                if (sel && sel.q) {\r\n                    $scope.generated = sel.q;\r\n                }\r\n            });\r\n\r\n            $scope.$watch('node', function (node) {\r\n\r\n                if (node && node.id) {\r\n                    if ($scope.nodechanged) {\r\n                        $scope.nodechanged({ node: node });\r\n                    }\r\n                    neo.getNode(node.id, false)\r\n                .then(function (loaded) {\r\n                    getQuerys(loaded);\r\n                });\r\n                }\r\n\r\n            });\r\n\r\n            $scope.openNode = function () {\r\n\r\n                if ($scope.node) {\r\n                    $scope.publish('selected', { selection: { nodes: [$scope.node] } })\r\n                }\r\n            }\r\n\r\n            var getQuerys = function (node) {\r\n\r\n                if (node) {\r\n\r\n                    var querys = [];\r\n                    var Lookup = node.Lookup;\r\n\r\n\r\n                                          \r\n\r\n                    querys.push(\r\n                       {\r\n                           name: \"All immediate relationships\",\r\n                           q: \"MATCH (c)-[r]-(d:Global) where ID(c) = \" + node.id + \" return c,d,r\"\r\n                       });\r\n\r\n                    querys.push(\r\n                          {\r\n                              name: \"Self\",\r\n                              q: \"MATCH (c:\" + node.Label + \")-[r]-(d:\" + node.Label + \")   return c,d,r\"\r\n                          });\r\n\r\n                    if ($.inArray(\"Provenance\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Provenance\",\r\n                                q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n                            })\r\n                    }\r\n\r\n                    if ($.inArray(\"Period\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Period\",\r\n                                q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n                            })\r\n                    }\r\n\r\n                    if ($.inArray(\"Theme\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Theme\",\r\n                                q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n                            })\r\n                    }\r\n\r\n                    if ($.inArray(\"Person\", node.labels) > -1) {\r\n\r\n                        querys.push(\r\n                            {\r\n                                name: \"Outbound Influence\",\r\n                                //  q: \"MATCH (c {Lookup:'\" + Lookup + \"'})-[r]->(d:Painter)  -[s]->(e:Painter)  -[t]->(f:Painter) return c,d,e,f,r,s,t\",\r\n                                q: \"MATCH (c {Lookup:'\" + Lookup + \"'})-[r]->(d:Painter) with c,d,r optional  match(d) -[s]->(e:Painter) return c,d,r,s,e \",\r\n                                connectAll: true\r\n                            })\r\n\r\n                        querys.push(\r\n                          {\r\n                              name: \"Inbound Influence\",\r\n                              //    q: \"MATCH (c {Lookup:'\" + Lookup + \"'})<-[r]-(d:Painter)  <-[s]-(e:Painter)  <-[t]-(f:Painter) return c,d,e,f,r,s,t\",\r\n                              q: \"MATCH (c {Lookup:'\" + Lookup + \"'})<-[r]-(d:Painter) with c,d,r optional  match(d) <-[s]-(e:Painter) return c,d,r,s,e \",\r\n                              connectAll: true\r\n                          })\r\n\r\n                    }\r\n\r\n                    if ($.inArray(\"Group\", node.labels) > -1) {\r\n\r\n                        querys.push({\r\n                            name: 'Group',\r\n                            q: \"match (n {Lookup:'\" + Lookup + \"'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) and not m:Provenance and not p:Provenance return n,r,m,s,p\"\r\n    ,\r\n                            connectAll: true\r\n                        });\r\n\r\n                    }\r\n\r\n\r\n                    if ($.inArray(\"Iconography\", node.labels) > -1) {\r\n\r\n\r\n                        querys.push({\r\n                            name: 'Iconography',\r\n                            q: \"MATCH (c:Global:\" + Lookup + \")-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  and not d.Lookup='\" + Lookup + \"' and (d:\" + Lookup + \" or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r\"\r\n                          ,\r\n                            connectAll: true\r\n                        });\r\n\r\n                    }\r\n\r\n                    if (node.YearFrom && node.YearTo) {\r\n\r\n                        var yq = \"MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and \";\r\n                        yq += \"((c.YearTo >= \" + node.YearFrom + \" and c.YearTo<= \" + node.YearTo + \") or (c.YearFrom >= \" + node.YearFrom + \" and c.YearFrom<= \" + node.YearTo + \"))\";\r\n                        yq += \"and ((d.YearTo >= \" + node.YearFrom + \" and d.YearTo<= \" + node.YearTo + \") or (d.YearFrom >= \" + node.YearFrom + \" and d.YearFrom<= \" + node.YearTo + \"))\";\r\n                        yq += \" return c,d,r\";\r\n                        querys.push({\r\n                            name: 'YearFromYearTo',\r\n                            q: yq\r\n\r\n                         ,\r\n                            connectAll: true\r\n                        });\r\n\r\n                    }\r\n\r\n                    var prevselection = $scope.selected.name;\r\n\r\n                    $scope.querys = querys;\r\n\r\n                    $($scope.querys).each(function (i, e) {\r\n\r\n                        if (e.name === prevselection)\r\n                        {\r\n                            $scope.selected = e;\r\n                        }\r\n                    });\r\n\r\n\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n}])","angular.module('neograph.query.generator',[\r\n    'neograph.query.generator.favouritesFilter',\r\n    'neograph.query.generator.nodeFilter',\r\n    'neograph.query.generator.nodeGraph',\r\n]);"],"sourceRoot":"/source/"}