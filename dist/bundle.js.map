{"version":3,"sources":["app.js","publishSubscribe.js","settings.js","common/common.js","common/filter.js","common/filters.js","common/images.js","common/labels.js","common/network.js","common/nodeArray.js","common/typeahead.js","common/typeaheadSimple.js","edge/edge.js","interaction/draggable.js","interaction/interaction.js","interaction/resizable.js","interaction/selectable.js","layout/layout.js","models/node.js","models/predicate.js","neo/neo.client.js","neo/neo.js","neo/session.js","neo/utils.js","node/node.controller.js","node/node.module.js","node/node.routes.js","node/node.service.js","bundle.js","query/graph.js","query/query.js","query/query.presets.js","query/queryInput.js","node/favourites/node.favourites.js","node/freebase/node.freebase.js","node/graphpanel/node.graphpanel.js","node/graphtypes/node.graphTypes.js","node/imageRelationships/node.imageRelationships.js","node/images/node.images.js","node/multiple/node.multiple.js","node/properties/node.properties.edit.js","node/relationships/node.relationships.edit.js","node/search/search.controller.js","node/wikipedia/node.wikipedia.js","query/generator/favouritesFilter.js","query/generator/nodeFilter.js","query/generator/nodeGraph.js","query/generator/query.generator.js"],"names":["angular","module","app","config","$stateProvider","$urlRouterProvider","state","url","views","@","templateUrl","search@admin","controller","query@admin","otherwise","$scope","neo","queryPresets","utils","session","subscribe","node","selection","hoverNode","$watch","edge","selectedNode","undefined","multiple","images","saveFavourite","user","newEdge","$apply","selectedEdge","tabs","selectedTab","run","$rootScope","PubSubService","init","service","scope","publishEventMap","constructor","prototype","publish","_this","this","args","slice","call","arguments","evnt","splice","forEach","handlerMap","handler","apply","_this2","handlers","push","$id","$on","i","l","length","factory","apiRoot","directive","replace","restrict","enabled","process","link","$element","$attrs","filters","labels","f","getFilterClass","value","toggleFilter","label","$","inArray","filter","input","editing","nodes","active","updatemasonry","$ul","find","items","removeClass","applyMasonry","hasClass","masonry","setTimeout","nodeselector","addClass","navigate","name","view","type","queryGenerator","id","options","Label","selectAll","selected","map","e","params","removeItems","sel","console","log","remove","refreshContent","filterBy","selectedNodes","sender","makeFavourite","navpath","highlight","x","getClass","getLabelClass","template","graph","network","width","height","vis","Network","setSize","onselected","directbinding","directBinding","lookup","on","focus","clickable","nodeClicked","item","indexOf","ind","each","addNode","removeNode","nodeService","choice","watchvalue","text","autosize","element","attrs","getSource","source","key","types","JSON","stringify","predicates","nodeSource","placeholderDefault","$input","attr","n","val","css","typeahead","matcher","obj","parse","toLowerCase","query","sorter","aItem","beginswith","caseSensitive","caseInsensitive","shift","concat","highlighter","out","Predicate","ToString","RegExp","$1","match","updater","itemSelected","keyCode","isArray","d","search","then","data","ngModel","edgeHeader@admin","$stateParams","edge@admin","selectTab","tab","properties@admin.main.edge","editproperties@admin.main.edge","predicateType","Lookup","deleteEdge","activeView","startNode","endNode","edges","saveEdge","g","initLeft","position","left","draggable","axis","drag","change","window","tabsWidth","$window","w","getWindowDimensions","tabsWidthInner","graphWidth","graphHeight","topBarHeight","tabsHeight","newValue","oldValue","bind","selectable","stop","event","ui","parseInt","cancel","transclude","panes","self","select","pane","add","p","require","title","visible","tabsCtrl","stopPropagation","predicateFactory","Node","Object","assign","relKey","relationships","rel","predicate","create","isPicture","isPerson","isProperty","isCustomField","setDirection","direction","toString","symmetrical","reverse","toUpperCase","flip","isDirectional","$resource","settings","root","method","get","getWithRels","getRelationships","getOne","getList","save","saveProps","saveRels","saveWikipagename","saveMultiple","del","destroy","restore","getProps","getImages","getImageRelationships","getAll","getDistinctLabels","neoClient","that","getGraph","q","returnArray","$promise","toJSON","dir","getAllRelationships","nodeIds","getIds","returnType","join","getUser","userLookup","getDistinctLabelsQuery","$q","anonUser","roles","Public","signedIn","signingIn","signIn","username","password","authenticate","localStorage","PreReg","failMessage","reject","signOut","presets","Array","diff","a","ids","hasAny","unique","current","refreshTypes","refreshPredicates","isType","isSystemInfo","Type","personTypes","pictureTypes","tabSettings","activate","vm","panel@admin","properties@admin.node","relationships@admin.node","images@admin.node","nodeFactory","lastLoadedNode","api","setPropsAndTabsFromLabels","setPropsAndTabs","addrelprops","when","limit","Wikipagename","temp","isGroup","trimmed","delete","deferred","resolve","promise","txt","$inject","graphNodeFromNeoNode","neoNode","yf","yearFrom","yt","yearTo","y","level","startYear","endYear","step","cnt","size","status","group","mass","radius","borderWidth","image","thumbUrl","shape","fontSize","fontColor","color","background","border","graphEdgeFromNeoEdge","neoEdge","colour","hideEdge","from","to","opacity","style","labelAlignment","defaultEdgeType","fromType","toType","widthSelectionMultiplier","hierarchicalLayout","levelSeparation","nodeSpacing","dataManipulation","initiallyVisible","physics","barnesHut","gravitationalConstant","centralGravity","springLength","springConstant","damping","repulsion","nodeDistance","hierarchicalRepulsion","onDelete","callback","toGraphData","keys","graphService","$state","DataSet","onConnect","start","end","properties","Weight","getSelectedNodeId","getSelectedNodes","selectNodes","focusOnNode","scale","animation","duration","easingFunction","zoomExtent","hide","go","nodeids","edgeids","nodeid","_getNodeAt","pageX","pageY","dataNode","freezeSimulation","clear","gArr","update","Query","render","body","connectAll","generators","nodeGraph","nodeFilter","favouritesFilter","queryFactory","queries","listeners","publishChange","queryService","Schema","AddedRecently","AddedRecentlyPictures","Overview","OverViewDense","BritishInfluence","BritishOnly","FrenchOnly","FrenchPainterInfluence","Cezanne3gen","Cezanne3genOutbound","Cezanne3genInbound","FrenchEnglishPainters","German","NorthernEurope","Italian","Spanish","American","Pop","Impressionism","Landscape","Modern","Rennaissance","editable","defaultpreset","preset","getData","generated","nodeChanged","g2","querys","creationQueries","propname","art_genre","mid","art_subject","period_or_movement","locations","date_begun","date_completed","artworks","quotations","influenced","influenced_by","associated_periods_or_movements","peers","date_of_birth","date_of_death","_getTopic","freebaseId","service_url","getJSON","response","_getPersonData","props","result","arr","split","property","valuetype","vals","values","v","getImage","prop","imageId","getText","FB_ID","blurb","allowedLength","indIs","indWas","stopSpc","substring","stopCr","until","shortname","Name","str","short","full","FB_blurb","trim","FB_blurb_full","getTopic","getPersonData","getCreationData","getId","API_KEY","ispicture","Title","domain","error","extend","FB_date_of_birth","YearFrom","FB_date_of_death","YearTo","getBlurb","Description","Text","blurbOnly","updated","updatedPerson","nid","reselect","FB_name","loaded","getFreebase","disambiguation","newView","h","graphOptions","yq","preview","isLabel","hasData","isEmptyObject","openGridTab","allLabels","every","originalLabels","copy","addLabel","removeLabel","restored","restoreNode","deleted","deleteNode","destroyNode","saveNode","newData","links","beforechange","nodeTypes","$watchCollection","selectedTypes","class","setType","addRelationship","labelled","addNodeToGraph","Graph","graphView","newNode","nodeLookupText","wikiTabs","page","$wikiDOM","redirect","padding-right","padding-bottom","appendTo","margin-bottom","margin-top","float","overflow","display","margin-right","font-size","margin","parent","replaceWith","html","max-width","next","cursor","nextUntil","andSelf","$introTab","header","content","$tab","marginBottom","getWiki","uselang","getPage","wikiservice","setActiveTab","activeTab","savePage","$digest","dropdown","load","getFilters","enabledFilters","labelQuery","lab","labs","b","nodechanged","openNode","getQuerys","prevselection","getNode"],"mappings":"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","file":"bundle.js","sourcesContent":["angular.module('templates', []);\r\nvar app = angular\r\n    .module('Neograph',\r\n  [\r\n    'templates',\r\n    'publishSubscribe',\r\n    'ui.router',\r\n    'ngSanitize',\r\n    'neograph.common',\r\n    'neograph.edge',\r\n    'neograph.interaction',\r\n    'neograph.layout',\r\n    'neograph.neo',\r\n    'neograph.node',\r\n    'neograph.query'\r\n  ]).\r\n  config(($stateProvider, $urlRouterProvider) => {\r\n    $stateProvider\r\n        .state('admin', { \r\n          url:'/admin?querypreset',\r\n          views: {\r\n            '@': {\r\n              templateUrl:'app/partials/admin.html'\r\n            }, \r\n            'search@admin':{\r\n              controller:'SearchCtrl as vm',\r\n              templateUrl:'app/node/search/search.html'\r\n            }, \r\n            'query@admin':{\r\n              controller:'QueryCtrl',\r\n              templateUrl:'app/query/query.html'\r\n            }\r\n          }\r\n        })\r\n        .state('search', {\r\n          url:'/search',\r\n          templateUrl:'app/partials/search.html'\r\n        });\r\n\r\n    $urlRouterProvider.otherwise('/admin');\r\n  })\r\n  .controller('AdminController', ($scope, neo, queryPresets, utils, session) => {\r\n    $scope.subscribe('hover', node => {\r\n      $scope.selection.hoverNode = node;\r\n    });\r\n\r\n    function shouldEnabledAddToGraph() {\r\n      $scope.enableAddToGraph = $scope.selection.selectedNode &&\r\n      $scope.selection.selectedNode.id &&\r\n      $scope.activeView.type == 'Graph' &&\r\n      !$scope.activeView.data.nodes[$scope.selection.selectedNode.id];\r\n    }\r\n\r\n    $scope.$watch('selection.selectedEdge', edge => {\r\n      if (edge) {\r\n        $scope.selection.selectedNode = undefined;\r\n        $scope.selection.multiple = undefined;\r\n        $scope.selection.images = [];\r\n      }\r\n    });\r\n\r\n    $scope.subscribe('favourite', node => {\r\n      neo.saveFavourite(node, session.user);\r\n    });\r\n\r\n    $scope.subscribe('newEdge', newEdge => {\r\n      $scope.$apply(() => {\r\n        $scope.selection.selectedEdge = newEdge;\r\n        $scope.tabs = ['Properties'];\r\n        $scope.selectedTab = 'Properties';\r\n      });\r\n    });\r\n\r\n  })\r\n  .run(($rootScope, PubSubService) => {\r\n    PubSubService.init($rootScope);\r\n  });\r\n\r\n\r\n","angular.module('publishSubscribe', [])\r\n.service('PubSubService', () => ({\r\n  init: scope => {\r\n    // Keep a dictionary to store the events and its subscriptions\r\n    const publishEventMap = {};\r\n    // Register publish events\r\n    scope.constructor.prototype.publish = function publish() {\r\n      // Get event and rest of the data\r\n      const args = [].slice.call(arguments);\r\n      const evnt = args.splice(0, 1);\r\n      if (!publishEventMap[evnt]) {\r\n        publishEventMap[evnt] = [];\r\n      }\r\n      // Loop though each handlerMap and invoke the handler\r\n      publishEventMap[evnt].forEach(handlerMap => {\r\n        handlerMap.handler.apply(this, args);\r\n      });\r\n    };\r\n    // Register Subscribe events\r\n    scope.constructor.prototype.subscribe = function subscribe(evnt, handler) {\r\n      const handlers = (publishEventMap[evnt] = publishEventMap[evnt] || []);\r\n      // Just keep the scopeid for reference later for cleanup\r\n      handlers.push({ $id: this.$id, handler });\r\n      // When scope is destroy remove the handlers that it has subscribed.\r\n      this.$on('$destroy', () => {\r\n        for (let i = 0, l = handlers.length; i < l; i++) {\r\n          if (handlers[i].$id === this.$id) {\r\n            handlers.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      });\r\n    };\r\n  }\r\n})\r\n);\r\n","angular.module('neograph.settings', [])\r\n.factory('settings', () => ({ apiRoot: 'http://localhost:1337' }));\r\n\r\n","angular.module('neograph.common', [\r\n  'neograph.common.filter',\r\n  'neograph.common.filters',\r\n  'neograph.common.images',\r\n  'neograph.common.labels',\r\n  'neograph.common.network',\r\n  'neograph.common.nodeArray',\r\n  'neograph.common.typeahead',\r\n  'neograph.common.typeaheadSimple'\r\n]);\n","angular.module('neograph.common.filter', [])\r\n.directive('filter', function () {\r\n  return {\r\n    replace: true,\r\n    restrict: 'E',\r\n    templateUrl: 'app/common/filter.html',\r\n    scope: {\r\n\r\n      init: '='// an array of labels\r\n            ,\r\n      enabled: '='\r\n            ,\r\n      process: '&'\r\n\r\n\r\n\r\n\r\n    },\r\n    link: function ($scope, $element, $attrs) {\r\n\r\n      $scope.filters = {};\r\n\r\n      $scope.$watch('init', function (labels) {\r\n\r\n        var filters = {};\r\n        angular.forEach(labels, function (f) {\r\n          filters[f] = 0;\r\n        });\r\n\r\n        $scope.filters = filters;\r\n\r\n      });\r\n\r\n      $scope.getFilterClass = function (value) {\r\n\r\n        if (value === 1)\r\n          return 'label-success';\r\n        else if (value === 0)\r\n          return 'label-info';\r\n                else return '';\r\n      };\r\n\r\n      $scope.toggleFilter = function (label) {\r\n        if ($scope.filters[label] == 1) {\r\n          $scope.filters[label] = 0;\r\n\r\n        }\r\n        else if ($scope.filters[label] == 0) {\r\n          $scope.filters[label] = 1;\r\n\r\n        }\r\n                else if ($scope.filters[label] == -1) {\r\n                  for (var f in $scope.filters) {\r\n                    $scope.filters[f] = 0;\r\n                  }\r\n                  $scope.filters[label] = 1;\r\n                }\r\n\r\n        var labels = [];\r\n        for (var f in $scope.filters) {\r\n\r\n          if ($scope.filters[f] === 1) {\r\n            labels.push(f);\r\n          }\r\n\r\n        }\r\n\r\n\r\n        $scope.process({ labels: labels });\r\n\r\n\r\n\r\n      };\r\n\r\n\r\n      $scope.$watch('enabled', function (labels) { // labels = selectable labels following filtering\r\n\r\n        if (labels && labels.length) {\r\n          for (var f in $scope.filters) {\r\n\r\n            if ($.inArray(f, labels) == -1) { // disable filter if not in list\r\n              $scope.filters[f] = -1;\r\n            }\r\n            else if ($scope.filters[f] == -1) { // enable filter if in list and previously disabled\r\n              $scope.filters[f] = 0;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n\r\n          for (var f in $scope.filters) {\r\n            $scope.filters[f] = 0;\r\n          }\r\n        }\r\n\r\n      });\r\n\r\n\r\n\r\n\r\n    }\r\n  };\r\n});\n","angular.module('neograph.common.filters', []).filter('checkmark', function () {\r\n  return function (input) {\r\n    return input ? '\\u2713' : '\\u2718';\r\n  };\r\n}).filter('predicate', function () {\r\n  return function (input) {\r\n    return input ? '\\u2713' : '\\u2718';\r\n  };\r\n});\n","angular.module('neograph.common.images', ['neograph.neo', 'neograph.session'])\r\n.directive('images', ['neo', 'session', function (neo) {\r\n  return {\r\n    replace: true,\r\n    restrict: 'E',\r\n    templateUrl: 'app/common/images.html',\r\n    scope: {\r\n      editing: '='\r\n            , nodes: '=' // must be an array to preserve sort order\r\n            , active: '='\r\n            , updatemasonry: '='// required to update masonry on resize\r\n\r\n    },\r\n    link: function ($scope, $element, $attrs) {\r\n\r\n      var $ul = $($element).find('ul');\r\n\r\n      $scope.items = {};\r\n\r\n      $scope.$watch('nodes', function (nodes) {\r\n        $ul.removeClass('masonryLoaded');\r\n        $scope.items = nodes;\r\n        applyMasonry();\r\n\r\n      });\r\n\r\n      $scope.$watch('updatemasonry', function () {\r\n        if ($ul.hasClass('masonry')) {\r\n          $ul.masonry('reload');\r\n        }\r\n      });\r\n\r\n      $scope.$watch('active', applyMasonry);\r\n\r\n      var applyMasonry = function () {\r\n\r\n            //    if ($scope.updatemasonry) {\r\n\r\n        setTimeout(function () {\r\n\r\n          if ($ul.hasClass('masonry')) {\r\n            $ul.masonry('reload');\r\n          }\r\n          else {\r\n            $ul.masonry({\r\n              nodeselector: 'li'\r\n                                // ,\r\n                                // columnWidth: 1,\r\n                                // \"isFitWidth\": true\r\n            });\r\n          }\r\n\r\n          $ul.addClass('masonryLoaded');\r\n\r\n\r\n        }, 100);\r\n             //   }\r\n           //     else {\r\n                 //   $ul.addClass('masonryLoaded');\r\n           // /     }\r\n      };\r\n\r\n      $scope.navigate = function (label) {\r\n        $scope.publish('query', {\r\n          name: label,\r\n          view: label,\r\n          type: 'Grid',\r\n          queryGenerator: { id: 'nodeFilter', options: { node: { Label: label } } }\r\n        });\r\n\r\n      };\r\n\r\n      $scope.selectAll = function () {\r\n\r\n        if ($ul.find('li.ui-selected').length < $ul.find('li').length) {\r\n          $ul.find('li').addClass('ui-selected');\r\n          $scope.selected = $scope.nodes.map(function (e, i) { return i; });\r\n        }\r\n        else {\r\n          $ul.find('li').removeClass('ui-selected');\r\n          $scope.selected = [];\r\n        }\r\n      };\r\n\r\n            // this assumes that we are looking at a view of not deleted items\r\n      $scope.subscribe('deleted', function (params) {\r\n\r\n                // alternatively i could have a deep watch on nodearray and update that\r\n        removeItems(params.selection.nodes);\r\n      });\r\n\r\n            // this assumes that we are looking at a view of deleted items\r\n      $scope.subscribe('restored', function (params) {\r\n\r\n                // alternatively i could have a deep watch on nodearray and update that\r\n        removeItems(params.selection.nodes);\r\n      });\r\n\r\n\r\n      var removeItems = function (items) {\r\n\r\n        if (items && items.length) {\r\n          angular.forEach(items, function (node) {\r\n            var sel = \"li[nodeid='\" + node.id + \"']\";\r\n            console.log(sel);\r\n            $ul.find(sel).remove();\r\n          });\r\n          applyMasonry();\r\n\r\n        }\r\n      };\r\n\r\n\r\n\r\n      $scope.getFilterClass = function (value) {\r\n\r\n        if (value === 1)\r\n          return 'label-success';\r\n        else if (value === 0)\r\n          return 'label-info';\r\n                else return '';\r\n      };\r\n\r\n      $scope.toggleFilter = function (label) {\r\n        if ($scope.filters[label] == 1) {\r\n          $scope.filters[label] = 0;\r\n          refreshContent();\r\n        }\r\n        else if ($scope.filters[label] == 0) {\r\n          $scope.filters[label] = 1;\r\n          refreshContent();\r\n        }\r\n                else if ($scope.filters[label] == -1) {\r\n                  for (var f in $scope.filters) {\r\n                    $scope.filters[f] = 0;\r\n                  }\r\n\r\n                  $scope.filters[label] = 1;\r\n                  refreshContent();\r\n                }\r\n\r\n\r\n      };\r\n\r\n            // triggered by selecting a filter\r\n      $scope.$watch('filterBy', function (label) {\r\n        if (label) {\r\n          $scope.filters[label] = 1;\r\n          $scope.filterBy = undefined;\r\n          refreshContent();\r\n        }\r\n\r\n      });\r\n\r\n\r\n\r\n            // triggered by selecting one or more images\r\n      $scope.$watch('selected', function (selected) { // NB selected is now an array of node indexes\r\n\r\n        if (selected && selected.length) {\r\n\r\n\r\n          var selectedNodes = selected.map(function (i) {\r\n            return $scope.nodes[i];\r\n          });\r\n\r\n            // NB if there are multiple instances of the images directive (as typically) it wont be possible ot know which one the event was sent from\r\n                    // but mainly we need to know that it wasnt sent from the graph or controller, as images currently doesnt substribe to selected event\r\n          $scope.publish('selected', { sender: 'Images', selection: { nodes: selectedNodes } });\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n      });\r\n\r\n      $scope.makeFavourite = function (node) {\r\n        console.log(node);\r\n        $scope.publish('favourite', node);\r\n\r\n      };\r\n\r\n\r\n    }\r\n  };\r\n}]);\n","angular.module('neograph.common.labels', ['neograph.neo', 'neograph.utils'])\r\n.directive('labels', ['neo', 'utils', function (neo, utils) {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'app/common/labels.html',\r\n    scope: {\r\n      node: '=?'\r\n            ,\r\n      labels: '=?'\r\n            ,\r\n      items: '=?'\r\n            ,\r\n      navpath: '@'\r\n            ,\r\n      highlight:'@?'\r\n    },\r\n    link: function ($scope, $element, $attrs) {\r\n\r\n      $scope.$watch('node', function (node) {\r\n        if (node) {\r\n          $scope.labels = $scope.node.labels;\r\n        }\r\n\r\n      });\r\n\r\n      $scope.$watch('items', function (items) {\r\n        if (items) {\r\n          $scope.labels = $scope.items.map(function (x) { return x.label; });\r\n        }\r\n\r\n      });\r\n\r\n\r\n\r\n\r\n      $scope.getClass = function (label) {\r\n        if (label === $attrs['highlight']) {\r\n          return 'label-warning';\r\n        }\r\n        else\r\n                return utils.getLabelClass($scope.node, label);\r\n      };\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n  };\r\n}]);\n","angular.module('neograph.common.network', [])\r\n.directive('network', function () {\r\n  return {\r\n\r\n    restrict:'E',\r\n    template:'<div></div>',\r\n    scope:{\r\n      graph:'=',\r\n      options:'=',\r\n      network:'=',\r\n      width:'@',\r\n      height:'@'\r\n    }\r\n        ,\r\n    link:function ($scope, $element) {\r\n\r\n      $scope.network = new vis.Network($element, $scope.graph, $scope.options);\r\n      $scope.network.setSize($scope.width + 'px', $scope.height + 'px');\r\n    }\r\n\r\n\r\n  };\r\n\r\n});\n","angular.module('neograph.common.nodeArray', ['neograph.utils'])\r\n    .directive('nodeArray', ['utils', function (utils) {\r\n      return {\r\n        replace: true,\r\n        restrict: 'EA',\r\n        templateUrl: 'app/common/nodeArray.html',\r\n        scope: {\r\n\r\n          items: '='// an array of string or  items with label property\r\n            ,\r\n          enabled: '='\r\n            ,\r\n          onselected: '&?'\r\n            ,\r\n          node: '=?'\r\n            ,\r\n          directbinding: '@?'// set this to false if passing in array of strings\r\n            ,\r\n          width: '@?'\r\n\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n          var directBinding = $attrs['directbinding'] == 'false' ? false : true;\r\n\r\n          $scope.nodes = [];\r\n\r\n\r\n\r\n          $scope.$watch('items', function (items) {\r\n\r\n            if (items && items.length) {\r\n              console.log(items);\r\n\r\n\r\n              if (items[0] && (items[0].label || items[0].lookup)) {\r\n\r\n                $scope.nodes = items;\r\n\r\n              }\r\n              else {\r\n                directBinding = false;\r\n                $scope.nodes = items.map(function (e) { return { label: e }; });\r\n\r\n\r\n              }\r\n\r\n              console.log($scope.nodes);\r\n\r\n\r\n            }\r\n            else {\r\n              if (directBinding) {\r\n                $scope.nodes = items;\r\n              }\r\n              else {\r\n                $scope.nodes = [];\r\n              }\r\n\r\n            }\r\n          });\r\n\r\n          $($element).on('click', function () {\r\n            $($element).find('input').focus();\r\n          });\r\n\r\n            // //update items array (needed as items can be array of text items not nodes)\r\n            // $scope.$watch('nodes', function (nodes) {\r\n            //    if (!directBinding) {\r\n            //        mappingNodesToItems = true;\r\n            //        $scope.items = nodes.map(function (n) { return n.Label; })\r\n            //        mappingNodesToItems = false;\r\n            //    }\r\n\r\n            // }, true)\r\n\r\n            // $scope.getWidth = function () {\r\n            //    if ($scope.nodes) {\r\n            //        return $attrs[\"width\"] ? $attrs[\"width\"] : $scope.nodes.length > 5 ? '495px' : '230px'\r\n            //    }\r\n            //    else {\r\n            //        return null;\r\n            //    }\r\n            // }\r\n\r\n          $scope.getClass = function (node) {\r\n            return utils.getLabelClass($scope.node, node.label);\r\n          };\r\n\r\n          $scope.clickable = $attrs['onselected'] != undefined;\r\n\r\n          $scope.nodeClicked = function (node) {\r\n\r\n            if ($attrs['onselected']) {\r\n\r\n              $scope.onselected({ item: node });\r\n\r\n            }\r\n          };\r\n\r\n          var indexOf = function (node) {\r\n\r\n            var ind = -1;\r\n\r\n            $($scope.nodes).each(function (i, e) {\r\n\r\n              if ((node.label && e.label === node.label) || node.lookup && e.lookup == node.lookup) {\r\n                ind = i;\r\n                return;\r\n              }\r\n            });\r\n\r\n            return ind;\r\n\r\n          };\r\n\r\n          $scope.addNode = function (node) {\r\n            console.log(node);\r\n            console.log(directBinding);\r\n            if (indexOf(node) == -1) {\r\n              console.log('node adding');\r\n              $scope.nodes.push(node);\r\n\r\n              if (!directBinding) {\r\n                console.log('item adding');\r\n                $scope.items.push(node.label);\r\n\r\n              }\r\n\r\n            }\r\n\r\n\r\n                // else highlight the node momentarily\r\n\r\n\r\n          };\r\n\r\n          $scope.removeNode = function (node) {\r\n            console.log(node);\r\n            var ind = indexOf(node);\r\n            console.log(ind);\r\n            if (ind > -1) {\r\n              $scope.nodes.splice(ind, 1);\r\n\r\n              if (!directBinding) {\r\n                $scope.items.splice($scope.items.indexOf(node.label || node.lookup), 1);\r\n              }\r\n\r\n            }\r\n\r\n          };\r\n\r\n\r\n        }\r\n      };\r\n    }]);\n","angular.module('neograph.common.typeahead', ['neograph.utils', 'neograph.node.service'])\r\n    .directive('typeahead', ['utils', 'nodeService', function (utils, nodeService) {\r\n      return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n          choice: '=?',   // the choice should be an object for 2 way binding with label property\r\n          watchvalue: '=?',  // watchvalue should be a text string  -just for updating the textbox value when the value changes, not fed back\r\n          text: '=?', // to feed back the text value when it changes (when no item has been selected)\r\n          restrict: '=?', // options to retrict the items that can be selected = Type,Predicate,User,custom object array with label property\r\n          onselected: '&?',\r\n          autosize:'@?'\r\n        },\r\n        template: '<input type=\"text\" class=\"form-control\" />',\r\n        link: function ($scope, element, attrs) {\r\n\r\n          var placeholderDefault = 'Node...';\r\n\r\n          var $input = $(element);// .find('input');\r\n          $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\r\n\r\n          $scope.$watch('choice', function (n) {\r\n            if (n) {\r\n              $input.val(n.Label || n.label);\r\n            }\r\n          });\r\n\r\n          if (!attrs['choice']) {\r\n            $scope.$watch('watchvalue', function (n) {\r\n              $input.val(n);\r\n            });\r\n          }\r\n\r\n          if (attrs['autosize']) {\r\n\r\n            $input.css({ width: '10px' });\r\n            $input.attr('placeholder', '+');\r\n            $input.on('focus', function () {\r\n              $input.css({ width: '100px' });\r\n              $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\r\n              setTimeout(function () {\r\n                $input.css({ width: '100px' });\r\n                $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\r\n              }, 100);\r\n\r\n            });\r\n            $input.on('blur', function () {\r\n              $input.css({ width: '10px' });\r\n              $input.attr('placeholder', '+');\r\n              $input.val('');\r\n            });\r\n\r\n          }\r\n\r\n          $input.typeahead({\r\n            source: getSource(),\r\n            matcher: function (obj) {\r\n              var item = JSON.parse(obj);\r\n              return ~item.label.toLowerCase().indexOf(this.query.toLowerCase());\r\n            },\r\n            sorter: function (items) {\r\n              var beginswith = [], caseSensitive = [], caseInsensitive = [], aItem, item;\r\n              while (aItem = items.shift()) {\r\n                var item = JSON.parse(aItem);\r\n                if (!item.label.toLowerCase().indexOf(this.query.toLowerCase())) {\r\n                  beginswith.push(JSON.stringify(item));\r\n                } else if (~item.label.indexOf(this.query)) {\r\n                  caseSensitive.push(JSON.stringify(item));\r\n                } else { \r\n                  caseInsensitive.push(JSON.stringify(item));\r\n                }\r\n              }\r\n              return beginswith.concat(caseSensitive, caseInsensitive);\r\n            },\r\n            highlighter: function (obj) {\r\n              var item = JSON.parse(obj);\r\n              var query = this.query.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n              var out;\r\n              if (attrs['restrict'] === 'Predicate') {\r\n                out = new utils.Predicate(item.label).ToString().replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\r\n                  return '<strong>' + match + '</strong>';\r\n                });\r\n              } else {\r\n                out = item.label.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\r\n                  return '<strong>' + match + '</strong>';\r\n                }) + \" <div style='float:right;margin-left:8px;color:#ccc'>\" + item.type + '</div>';\r\n              }\r\n              return out;\r\n            },\r\n            updater: function (obj) {\r\n\r\n              itemSelected = true;\r\n\r\n              var item = JSON.parse(obj);\r\n\r\n              $scope.$apply(function () {\r\n\r\n                if (attrs['choice']) {\r\n                  $scope.choice = item;\r\n                }\r\n\r\n                if (attrs['onselected']) {\r\n                  $scope.onselected({ item: item });\r\n                }\r\n\r\n              });\r\n\r\n              if (!attrs['clearonselect']) {\r\n                return item.label;\r\n              }\r\n\r\n            }\r\n          });\r\n\r\n          var itemSelected = false;\r\n\r\n          $input.on('keydown', function (e) {\r\n            itemSelected = false;\r\n            if (e.keyCode == 13) { // enter\r\n\r\n              setTimeout(function () {\r\n\r\n                $scope.$apply(function () {\r\n                  if (!itemSelected) {\r\n                    $scope.text = $input.val();\r\n                    $input.val('');\r\n                  }\r\n                });\r\n              }, 100);\r\n            }\r\n          });\r\n\r\n          function getSource() {\r\n            if (attrs['restrict'] == 'Type') {\r\n              // convert types object to array\r\n              var source = [];\r\n              for (var key in utils.types) {\r\n                source.push(JSON.stringify(utils.types[key]));\r\n              }\r\n              return source;\r\n            } else if (attrs['restrict'] == 'Predicate') {\r\n              // convert predicates object to array\r\n              var source = [];\r\n              for (var key in utils.predicates) {\r\n                source.push(JSON.stringify(utils.predicates[key]));\r\n              }\r\n              return source;\r\n            } else { \r\n              return nodeSource;\r\n            }\r\n          }\r\n\r\n            // Globals & users or one or the other depending on value of restrict\r\n          var nodeSource = function (query, process) {\r\n\r\n            if ($scope.restrict && $.isArray($scope.restrict) && $scope.restrict.length > 0) {\r\n\r\n              if ($scope.restrict[0].label) {\r\n                return $scope.restrict.map(function (d) { return JSON.stringify(d); });\r\n              }\r\n              else {\r\n                return $scope.restrict.map(function (d) { return JSON.stringify({ label: d }); });\r\n              }\r\n            }\r\n            else {\r\n              nodeService.search(query, attrs['restrict']).then(function (nodes) {\r\n                process(nodes.map(function (d) {\r\n                  return JSON.stringify(d);\r\n                }));\r\n              });\r\n            }\r\n\r\n          };\r\n\r\n          $scope.$watch('restrict', function () {\r\n            $input.data('typeahead').source = getSource();\r\n          }, true);\r\n        }\r\n      };\r\n  }]);\r\n","angular.module('neograph.common.typeaheadSimple', [])\r\n.directive('typeaheadSimple', [function () {\r\n  return {\r\n    restrict: 'E',\r\n    replace: true,\r\n    scope: {\r\n      ngModel: '=?',   // the choice should be an object for 2 way binding with Lookup property\r\n      source: '='\r\n    },\r\n    template: '<input type=\"text\" />',\r\n    link: function ($scope, element, attrs) {\r\n\r\n      var placeholderDefault = '';\r\n\r\n      var $input = $(element);// .find('input');\r\n      $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\r\n\r\n\r\n      $input.typeahead({\r\n        source: $scope.source,\r\n        updater: function (item) {\r\n\r\n\r\n          $scope.$apply(function () {\r\n\r\n\r\n            $scope.ngModel = item;\r\n\r\n\r\n          });\r\n\r\n\r\n\r\n          return item;\r\n\r\n\r\n        }\r\n      });\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n  };\r\n}]);\r\n","angular.module('neograph.edge', ['neograph.neo', 'neograph.utils', 'ui.router'])\r\n    .config(function ($stateProvider) {\r\n      $stateProvider.state('admin.main.edge', {\r\n        url:'/edge/:edge',\r\n            // abstract:true,\r\n        views:{\r\n          'edgeHeader@admin':{\r\n            controller:function ($scope, $stateParams) {\r\n              if ($stateParams.edge) {\r\n                $scope.edge = JSON.parse($stateParams.edge);\r\n              }\r\n            },\r\n            templateUrl:'app/edge/edge.header.html'\r\n          }\r\n                    ,\r\n          'edge@admin':{\r\n            controller:function ($scope) {\r\n              $scope.tabs = ['Properties'];\r\n              $scope.selectedTab = 'Properties';\r\n              $scope.selectTab = function (tab) {\r\n                $scope.selectedTab = tab;\r\n              };\r\n            }\r\n                        ,\r\n            templateUrl:'app/edge/edge.html'\r\n          }\r\n        }\r\n\r\n      })\r\n        .state('admin.main.edge.view', {\r\n          url:'/view',\r\n          views:{\r\n            'properties@admin.main.edge':{\r\n              templateUrl:'app/edge/properties.html',\r\n              controller:function ($scope, $stateParams) {\r\n                if ($stateParams.edge) {\r\n                  $scope.edge = JSON.parse($stateParams.edge);\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n        })\r\n        .state('admin.main.edge.edit', {\r\n          url:'/edit',\r\n          views:{\r\n\r\n            'editproperties@admin.main.edge':{\r\n              templateUrl:'app/edge/properties.edit.html',\r\n              controller:'EditEdgeCtrl'\r\n            }\r\n\r\n          }\r\n\r\n        });\r\n\r\n    })\r\n\r\n    .controller('EditEdgeCtrl', function (neo, utils, $stateParams, $scope) {\r\n\r\n\r\n      if ($stateParams.edge) {\r\n        $scope.edge = JSON.parse($stateParams.edge);\r\n        $scope.predicateType = utils.predicates[$scope.edge.type];\r\n      }\r\n\r\n      $scope.$watch('predicateType', function (predicateType) {\r\n        if (predicateType) {\r\n          $scope.edge.type = predicateType.Lookup;\r\n        }\r\n      });\r\n\r\n      $scope.deleteEdge = function (e) {\r\n\r\n        neo.deleteEdge(e,\r\n                           $scope.activeView.data.nodes[e.startNode],\r\n                           $scope.activeView.data.nodes[e.endNode])\r\n                   .then(function () {\r\n\r\n\r\n                       // let view handle its own data ?\r\n                     delete $scope.activeView.data.edges[e.id];\r\n                     if ($scope.selection.selectedEdge && $scope.selection.selectedEdge.id === e.id) {\r\n                       $scope.selection.selectedEdge = null;\r\n                     }\r\n\r\n                     $scope.publish('deleted', { selection: { edges: [e] } });\r\n\r\n                   });\r\n\r\n      };\r\n\r\n      $scope.saveEdge = function (e) {\r\n\r\n        neo.saveEdge(e)\r\n               .then(\r\n                   function (g) {\r\n\r\n                     $scope.publish('dataUpdate', g);\r\n\r\n                       // update cache\r\n                     for (key in g.nodes) {\r\n                       $scope.activeView.data.nodes[key] = g.nodes[key];\r\n                     }\r\n\r\n                     for (key in g.edges) {\r\n                       $scope.activeView.data.edges[key] = g.edges[key];\r\n\r\n                       if ($scope.selection.selectedEdge && (key === $scope.selection.selectedEdge.id || !$scope.selection.selectedEdge.id)) {\r\n                         $scope.selection.selectedEdge = g.edges[key];\r\n                       }\r\n\r\n                     }\r\n                   });\r\n      };\r\n\r\n    });\r\n\r\n","angular.module('neograph.interaction.draggable', [])\r\n    .directive('draggable', function () {\r\n      return {\r\n\r\n        link: function ($scope, element, attrs) {\r\n\r\n          var initLeft = $(element).position().left;\r\n\r\n          $(element).draggable({\r\n            axis: 'x',\r\n            drag: function () {\r\n\r\n              var change = initLeft - $(element).position().left;\r\n\r\n              $scope.$apply(function () {\r\n                $scope.window.tabsWidth = $scope.window.tabsWidth + change;\r\n              });\r\n\r\n\r\n              initLeft = $(element).position().left;\r\n\r\n            }\r\n          });\r\n        }\r\n      };\r\n    });\r\n","angular.module('neograph.interaction', [\r\n  'neograph.interaction.draggable',\r\n  'neograph.interaction.resizable',\r\n  'neograph.interaction.selectable'\r\n]);\n","angular.module('neograph.interaction.resizable', [])\r\n.directive('resizable', function ($window) {\r\n  return {\r\n    scope: {\r\n      window: '='\r\n    },\r\n    controller: function ($scope, $element) {\r\n\r\n      var w = angular.element($window);\r\n      var getWindowDimensions = function () {\r\n        var width = w.width();\r\n        var height = w.height();\r\n        return {\r\n          'height': height,\r\n          'width': width,\r\n          'tabsWidth': $scope.window.tabsWidth,\r\n          'tabsWidthInner': $scope.window.tabsWidth - 10,\r\n          'graphWidth': width - $scope.window.tabsWidth,\r\n          'graphHeight': height - $scope.window.topBarHeight,\r\n          'topBarHeight': $scope.window.topBarHeight,\r\n          'tabsHeight': height - $scope.window.topBarHeight\r\n        };\r\n      };\r\n\r\n      $scope.window = getWindowDimensions();\r\n\r\n      $scope.$watch(getWindowDimensions, function (newValue, oldValue) {\r\n\r\n        $scope.window = newValue;\r\n\r\n      }, true);\r\n\r\n      w.bind('resize', function () {\r\n        $scope.$apply();\r\n      });\r\n\r\n            // w.bind(\"debouncedresize\", function (event) {\r\n            //    $scope.$apply();\r\n\r\n            // });\r\n\r\n    }\r\n  };\r\n});\r\n\r\n","angular.module('neograph.interaction.selectable', [])\r\n.directive('selectable', function () {\r\n  return {\r\n    scope: {\r\n      selected: '='\r\n\r\n    },\r\n    link: function ($scope, element, attrs) {\r\n\r\n      $scope.$watch($(element).find('li.ui-selected').length, function (i) {\r\n\r\n\r\n\r\n\r\n\r\n\r\n        $(element).selectable({\r\n          filter: 'li',\r\n          stop: function (event, ui) {\r\n\r\n\r\n            var selected = [];\r\n\r\n\r\n            $(element).find('li.ui-selected').each(function (i, e) {\r\n              selected.push(parseInt($(e).attr('nodeindex')));\r\n            });\r\n\r\n            $scope.$apply(function () {\r\n\r\n              $scope.selected = selected;\r\n\r\n            });\r\n\r\n          }\r\n                    ,\r\n          cancel: '.badge, .label'\r\n\r\n\r\n\r\n        });\r\n\r\n\r\n      });\r\n\r\n\r\n    }\r\n  };\r\n});\r\n\r\n\r\n\r\n\r\n\r\n","angular.module('neograph.layout', [])\r\n.directive('tabs', function () {\r\n  return {\r\n    restrict: 'E',\r\n    transclude: true,\r\n    scope: {\r\n      tabs:'=', // required to remove panes no longer available\r\n      selected: '=?'\r\n    },\r\n    controller: function ($scope) {\r\n      var panes = $scope.panes = [];\r\n      var self = this;\r\n\r\n      $scope.select = function (pane) {\r\n        angular.forEach(panes, function (pane) {\r\n          pane.selected = false;\r\n        });\r\n        pane.selected = true;\r\n        $scope.selected = pane.key;\r\n      };\r\n\r\n      this.add = function (pane) {\r\n        if (panes.length === 0) {\r\n          $scope.select(pane);\r\n        }\r\n        panes.push(pane);\r\n      };\r\n\r\n      this.remove = function (pane) {\r\n                // console.log('remove')\r\n                // console.log(pane);\r\n        angular.forEach(panes, function (p, i) {\r\n          if (pane.key == p.key) {\r\n            panes.splice(i, 1);\r\n            if (pane.selected) {\r\n              pane.selected = false;\r\n              $scope.select($scope.panes[0]);\r\n            }\r\n\r\n\r\n          }\r\n        });\r\n\r\n      };\r\n\r\n      $scope.$watch('selected', function (key) { // the title of the selected pane\r\n\r\n        if (key) {\r\n          angular.forEach(panes, function (pane) {\r\n\r\n            pane.selected = pane.key === key;\r\n          });\r\n        }\r\n\r\n      });\r\n\r\n\r\n            // remove tabs not in list (child pane only adds them)\r\n      $scope.$watch('tabs', function (tabs) { // the title of the selected pane\r\n\r\n        if (tabs) {\r\n          angular.forEach(panes, function (pane) {\r\n\r\n            if (tabs.indexOf(pane.key) === -1) {\r\n\r\n              self.remove(pane);\r\n            }\r\n          });\r\n        }\r\n\r\n      });\r\n\r\n\r\n    },\r\n    templateUrl: 'app/layout/tabs.html'\r\n  };\r\n})\r\n.directive('tabPane', function () {\r\n  return {\r\n    require: '^tabs',\r\n    restrict: 'E',\r\n    transclude: true,\r\n    scope: {\r\n      key:'@',\r\n      title: '=',\r\n      visible: '=',\r\n      active: '=?',\r\n      window:'='\r\n    },\r\n    link: function ($scope, element, attrs, tabsCtrl) {\r\n\r\n\r\n      tabsCtrl.add($scope);\r\n\r\n\r\n            // $scope.$watch('visible', function (visible) {\r\n\r\n            //    if (visible) {\r\n            //        tabsCtrl.addPane($scope);\r\n            //    }\r\n            //    else {\r\n            //        tabsCtrl.removePane($scope);\r\n\r\n            //    }\r\n\r\n            // });\r\n\r\n\r\n      $scope.$watch('active', function (active) { // the title of the selected pane\r\n\r\n        $scope.selected = active;\r\n\r\n      });\r\n\r\n\r\n    },\r\n    templateUrl: 'app/layout/tabPane.html'\r\n  };\r\n})\r\n.directive('noBubble', function () {\r\n  return {\r\n\r\n    link: function ($scope, element, attrs, tabsCtrl) {\r\n\r\n\r\n\r\n      $(element).on('keydown', function (event) {\r\n\r\n        event.stopPropagation();\r\n      });\r\n\r\n    },\r\n    templateUrl: 'app/layout/tabPane.html'\r\n  };\r\n\r\n\r\n});\n","  angular.module('neograph.models.node', ['neograph.models.predicate'])\r\n  .factory('nodeFactory', function (predicateFactory) {\r\n\r\n    function Node(data) {\r\n\r\n      this.labels = [];\r\n\r\n      Object.assign(this, data);\r\n\r\n        // instead i think i should call the service to get the reverse\r\n      for (var relKey in this.relationships) {\r\n        var rel = this.relationships[relKey];\r\n        rel.predicate = predicateFactory.create(rel.predicate);\r\n      }\r\n\r\n      if (!this.label && this.lookup) {\r\n        this.label = this.lookup;\r\n      }\r\n\r\n\r\n    }\r\n\r\n    Node.prototype.isPicture = function () {\r\n\r\n      return this.labels.indexOf('Picture') > -1;\r\n\r\n    };\r\n\r\n    Node.prototype.isPerson = function () {\r\n\r\n      return this.labels.indexOf('Person') > -1;\r\n\r\n    };\r\n\r\n    Node.prototype.isProperty = function () {\r\n\r\n      return this.labels.indexOf('Property') > -1;\r\n\r\n    };\r\n\r\n\r\n\r\n    Node.prototype.isCustomField = function (key) {\r\n\r\n      return key != 'lookup'\r\n            && key != 'class'\r\n            && key != 'label'\r\n            && key != 'description'\r\n            && key != 'text' &&\r\n            key != 'name' &&\r\n            key != 'systemInfo' &&\r\n            key != 'labels' &&\r\n            key != 'id' &&\r\n            key != 'created' &&\r\n            key != 'image' &&\r\n            key != 'relationships' &&\r\n            key != 'labelled';\r\n\r\n    };\r\n\r\n\r\n    return {\r\n      create:function (data) {\r\n        return new Node(data);\r\n      }\r\n    };\r\n\r\n\r\n  });\r\n\r\n\r\n\n","  angular.module('neograph.models.predicate', [])\r\n  .factory('predicateFactory', function () {\r\n\r\n    function Predicate(data) {\r\n\r\n      Object.assign(this, data);\r\n\r\n    }\r\n\r\n    Predicate.prototype.setDirection = function (direction) {\r\n      this.direction = direction;\r\n      return this;\r\n    };\r\n\r\n    Predicate.prototype.toString = function () {\r\n      if (this.direction === 'in' && !this.symmetrical) {\r\n        if (this.reverse) { // use reverse if present\r\n          return this.reverse.replace(/_/g, ' ').toLowerCase();\r\n        }\r\n        else {\r\n          var lookup = this.lookup.toUpperCase();\r\n          if (lookup === 'CREATED' || lookup === 'CREATES')\r\n            return 'created by';\r\n          else if (lookup === 'INFLUENCES')\r\n            return 'influenced by';\r\n                else if (lookup === 'INSPIRES')\r\n                  return 'inspired by';\r\n                else if (lookup === 'ANTICIPATES')\r\n                  return 'anticipated by';\r\n                else if (lookup === 'DEVELOPS')\r\n                  return 'developed by';\r\n                else if (lookup === 'DEPICTS')\r\n                  return 'depicted by';\r\n                else if (lookup === 'TYPE_OF')\r\n                  return 'type(s)';\r\n                else\r\n                    return '(' + this.lookup.replace(/_/g, ' ').toLowerCase() + ')';\r\n        }\r\n      }\r\n\r\n       // if (!this.isDirectional || !this.direction || this.direction === \"out\") {\r\n      return this.lookup.replace(/_/g, ' ').toLowerCase();\r\n\r\n\r\n    };\r\n\r\n    Predicate.prototype.flip = function () {\r\n\r\n      if (!this.isDirectional) {\r\n        return;\r\n      }\r\n      if (this.direction === 'in') {\r\n        this.setDirection('out');\r\n      }\r\n      else {\r\n        this.setDirection('in');\r\n      }\r\n      return this;\r\n\r\n    };\r\n\r\n    return {\r\n      create:function (data) {\r\n        return new Predicate(data);\r\n      }\r\n    };\r\n\r\n\r\n  });\r\n\r\n\r\n\n","angular.module('neograph.neo.client', ['ngResource', 'neograph.settings'])\r\n.factory('neoClient', ['$resource', 'settings', function ($resource, settings) {\r\n    // return $resource('http://localhost:1337/node/match', {txt:'@txt',restrict:'@restrict'}, {\r\n    //    matchNodes: {\r\n    //        method: 'POST',\r\n    //        isArray:true\r\n    //    }\r\n    // });\r\n\r\n    // return $resource(null,null, {\r\n    //    matchNodes: {\r\n    //        url: 'http://localhost:1337/node/match',\r\n    // //       params: {txt:'',restrict:''},\r\n    //        method: 'POST',\r\n    //        isArray: true\r\n    //    }\r\n    // });\r\n\r\n  var root = settings.apiRoot;\r\n\r\n  return {\r\n\r\n    node:$resource(null, null, {\r\n      search: {\r\n        url: root + '/search',\r\n\r\n        method: 'POST',\r\n        isArray: true\r\n      }\r\n            ,\r\n      get: {\r\n        url: root + '/node/get/:id',\r\n        method: 'GET',\r\n      }\r\n            ,\r\n      getWithRels: {\r\n        url: root + '/node/getWithRels/:id',\r\n        method: 'GET',\r\n      }\r\n                   ,\r\n      getRelationships: {\r\n        url: root + '/node/relationships/:id',\r\n        method: 'GET',\r\n      }\r\n            ,\r\n      getOne: {\r\n        url: root + '/node/single',\r\n        method: 'POST',\r\n      }\r\n            ,\r\n      getList: {\r\n        url: root + '/node/list',\r\n        method: 'POST',\r\n        isArray:true\r\n      }\r\n            ,\r\n      save: {\r\n        url: root + '/node/save',\r\n\r\n        method: 'POST'\r\n      },\r\n      saveProps: {\r\n        url: root + '/node/saveProps',\r\n\r\n        method: 'POST'\r\n      },\r\n      saveRels: {\r\n        url: root + '/node/saveRels',\r\n\r\n        method: 'POST'\r\n      },\r\n      saveWikipagename: {\r\n        url: root + '/node/saveWikipagename',\r\n\r\n        method:'POST'\r\n      }\r\n            ,\r\n      saveMultiple: {\r\n        url: root + '/node/saveMultiple',\r\n\r\n        method: 'POST'\r\n      }\r\n            ,\r\n      del: {\r\n        url: root + '/node/delete',\r\n\r\n        method: 'POST'\r\n      }\r\n            ,\r\n      destroy: {\r\n        url: root + '/node/destroy',\r\n\r\n        method: 'POST'\r\n      },\r\n      restore: {\r\n        url: root + '/node/restore',\r\n\r\n        method: 'POST'\r\n      }\r\n            ,\r\n      getProps: {\r\n        url: root + '/node/getProps',\r\n\r\n        method: 'POST'\r\n\r\n      }\r\n               ,\r\n      getImages: {\r\n        url: root + '/node/getImages',\r\n        isArray:true,\r\n        method: 'POST'\r\n\r\n      }\r\n\r\n\r\n\r\n    }),\r\n    edge: $resource(null, null, {\r\n      save: {\r\n        url: root + '/edge/save',\r\n        method: 'POST'\r\n      }\r\n            ,\r\n      del: {\r\n        url: root + '/edge/delete',\r\n        method: 'POST'\r\n\r\n      }\r\n            ,\r\n      getImageRelationships: {\r\n        url: root + '/edge/imagerelationships',\r\n        method: 'POST'\r\n      }\r\n    })\r\n        ,\r\n    user:$resource(null, null, {\r\n      saveFavourite: {\r\n        url: root + '/user/saveFavourite',\r\n\r\n        method: 'POST'\r\n\r\n      },\r\n      get: {\r\n        url: root + '/user/:user',\r\n        method: 'GET'\r\n      }\r\n    })\r\n        ,\r\n    graph: $resource(null, null, {\r\n      get: {\r\n        url: root + '/graph',\r\n\r\n        method: 'POST'\r\n      }\r\n    })\r\n            ,\r\n    type: $resource(null, null, {\r\n      getAll: {\r\n        url: root + '/types',\r\n        method: 'GET'\r\n      }\r\n    })\r\n        ,\r\n    predicate: $resource(null, null, {\r\n      getAll: {\r\n        url: root + '/predicates',\r\n        method: 'GET'\r\n      }\r\n    })\r\n        ,\r\n    utils:$resource(null, null, {\r\n      getDistinctLabels: {\r\n        url: root + '/utils/distinctLabels',\r\n        isArray:true,\r\n        method: 'POST'\r\n      }\r\n    })\r\n\r\n  };\r\n\r\n}]);\r\n","angular.module('neograph.neo', ['neograph.utils', 'neograph.neo.client'])\r\n.factory('neo', ['neoClient', 'utils', function (neoClient, utils) {\r\n\r\n\r\n  var that = {\r\n\r\n    getGraph: function (q, returnArray) {\r\n\r\n      return neoClient.graph.get({ q: q, returnArray: returnArray }).$promise.then(function (data) {\r\n\r\n        var out = data.toJSON();\r\n        console.dir(out);\r\n        return out;\r\n\r\n      });\r\n    }\r\n       ,\r\n        // returns all relationships between supplied nodes, which can be vis.Dataset or graph data object\r\n    getAllRelationships: function (nodes) {\r\n      var nodeIds = '';\r\n\r\n      if (nodes.getIds) // if vis.DataSet\r\n            {\r\n        nodeIds = nodes.getIds({ returnType: 'Array' }).join(',');\r\n      }\r\n      else { // otherwise data object\r\n\r\n        for (var key in nodes) {\r\n          if (nodeIds.length) {\r\n            nodeIds += ',';\r\n          }\r\n          nodeIds += key;\r\n        }\r\n      }\r\n\r\n      var q = 'MATCH a -[r]- b WHERE id(a) IN[' + nodeIds + '] and id(b) IN[' + nodeIds + '] and not (a-[:TYPE_OF]-b) return r';\r\n\r\n      return that.getGraph(q);\r\n\r\n    }\r\n\r\n             ,\r\n    getRelationships: function (id) {\r\n\r\n      return neoClient.node.getRelationships({ id: id }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n\r\n\r\n    }\r\n\r\n        ,\r\n    saveMultiple: function (multiple) {\r\n\r\n\r\n      return neoClient.node.saveMultiple({ multiple: multiple }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n\r\n\r\n    }\r\n           ,\r\n        // saves edge to neo (update/create)\r\n        // TODO: according to certain rules labels will need to be maintained when relationships are created. (update not required as we always delete and recreate when changing start/end nodes)\r\n        // tag a with label b where:\r\n        // a=person and b=provenance (eg painter from france)\r\n        // a=person and n=group, period (eg painter part of les fauves / roccocco)\r\n        // a=picture and b=non-person (eg picture by corot / of tree) - although typically this will be managed through labels directly (which will then in turn has to keep relationships up to date)\r\n    saveEdge: function (e) { // startNode and endNode provide the full node objects for the edge\r\n\r\n      return neoClient.edge.save({ edge: e }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n    }\r\n        ,\r\n    saveFavourite: function (node, user) {\r\n\r\n\r\n      return neoClient.user.saveFavourite({ user: user, node: node }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n\r\n\r\n    }\r\n\r\n        ,\r\n    deleteEdge: function (edge) {\r\n\r\n      if (edge && edge.id) {\r\n\r\n        return neoClient.edge.delete({ edge: edge }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n\r\n\r\n      }\r\n\r\n    }\r\n        ,\r\n    getUser: function (userLookup) {\r\n\r\n      return neoClient.user.get({ user: userLookup }).$promise.then(function (data) {\r\n\r\n        return data.toJSON();\r\n      });\r\n\r\n    }\r\n        ,\r\n\r\n    getOne: function (q) { // q must be a match return a single entity n\r\n\r\n\r\n\r\n      return neoClient.node.getOne({ q: q }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n\r\n    }\r\n\r\n     ,\r\n    getImageRelationships: function (edge) { // loks up id/label first then call get by label\r\n\r\n      return neoClient.edge.getImageRelationships({ edge: edge }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n\r\n    }\r\n\r\n        ,\r\n        // Alternatively i could query the actual labels and merge them into a distinct array\r\n    getDistinctLabels: function (labels) {\r\n\r\n\r\n      return neoClient.utils.getDistinctLabels({ labels: labels }).$promise;// returns array\r\n\r\n\r\n\r\n    }\r\n        ,\r\n    getDistinctLabelsQuery: function (q) {\r\n\r\n      return neoClient.utils.getDistinctLabels({ q: q }).$promise;// returns array\r\n\r\n    }\r\n\r\n  };\r\n\r\n  return that;\r\n\r\n}]);\r\n","angular.module('neograph.session', ['neograph.neo'])\r\n    .factory('session', ['neo', '$q', function (neo, $q) {\r\n\r\n      var anonUser = {\r\n        Lookup: 'Anonymous',\r\n        roles: { 'Public': {} }\r\n      };\r\n\r\n\r\n      var session = {\r\n\r\n        init: function () {\r\n\r\n          neo.getUser('Julian').then(function (user) {\r\n\r\n            session.user = user;\r\n            session.signedIn = true;\r\n          });\r\n\r\n          return session;\r\n\r\n        }\r\n        ,\r\n        signingIn: false\r\n        ,\r\n        signedIn: false\r\n        ,\r\n        user: anonUser\r\n        ,\r\n        signIn: function (username, password) {\r\n\r\n          return neo.authenticate(username, password).then(function (user) {\r\n\r\n            session.user = user;\r\n\r\n\r\n            console.log(session.user);\r\n             //   session.apps = service.getApps(session.user.roles);\r\n\r\n\r\n            localStorage.username = session.user.username;\r\n\r\n\r\n            session.signedIn = true;\r\n\r\n            if (user.roles.PreReg) {\r\n              $('body').addClass('prereg');\r\n            }\r\n            else {\r\n              $('body').removeClass('prereg');\r\n            }\r\n\r\n\r\n\r\n          }, function (failMessage) {\r\n            console.log(failMessage);\r\n            return $q.reject(failMessage);\r\n          });\r\n\r\n        }\r\n        ,\r\n        signOut: function () {\r\n\r\n          session.user = anonUser;\r\n          localStorage.username = '';// = JSON.stringify(session.user);\r\n          session.signedIn = false;\r\n          //  session.apps = service.getApps(session.user.roles);\r\n\r\n        }\r\n      };\r\n\r\n\r\n\r\n      if (localStorage.username) {\r\n        session.user = neo.getUser(localStorage.username);\r\n      }\r\n\r\n      if (session.user.name != 'Anonymous') {\r\n        session.signedIn = true;\r\n      }\r\n\r\n //   session.apps = service.getApps(session.user.roles);\r\n\r\n      return session.init();\r\n\r\n\r\n    }]);\n","angular.module('neograph.utils', ['neograph.neo.client', 'neograph.query.presets'])\r\n    .factory('utils', ['neoClient', 'queryPresets', function (neoClient, presets) {\r\n\r\n\r\n      Array.prototype.diff = function (a) {\r\n        return this.filter(function (i) { return a.indexOf(i) < 0; });\r\n      };\r\n\r\n      Array.prototype.ids = function () {\r\n        return this.map(function (e) { return e.id; });\r\n      };\r\n\r\n      Array.prototype.hasAny = function (a) {\r\n        return this.filter(function (i) { return a.indexOf(i) > -1; }).length > 0;\r\n      };\r\n\r\n      Array.prototype.unique = function () {\r\n        var a = [];\r\n        for (i = 0; i < this.length; i++) {\r\n          var current = this[i];\r\n          if (a.indexOf(current) < 0) a.push(current);\r\n        }\r\n        return a;\r\n      };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      var utils = {\r\n\r\n        init: function () {\r\n\r\n          utils.refreshTypes();\r\n          utils.refreshPredicates();\r\n          return utils;\r\n\r\n\r\n        }\r\n        ,\r\n        types: {}\r\n\r\n        ,\r\n        predicates: {}\r\n        ,\r\n        isType: function (label) {\r\n          return utils.types[label] != undefined;\r\n        }\r\n        ,\r\n        refreshTypes: function () {\r\n\r\n          return neoClient.type.getAll().$promise.then(function (types) {\r\n            utils.types = types;\r\n            return types;\r\n          });\r\n        }\r\n    ,\r\n        refreshPredicates: function () { // consider creating lookup nodes for relationship types so that i can store properties for them\r\n\r\n          return neoClient.predicate.getAll().$promise.then(function (predicates) {\r\n            utils.predicates = predicates.toJSON();\r\n               // console.log(utils.predicates);\r\n            return utils.predicates;\r\n          });\r\n\r\n\r\n\r\n\r\n        }\r\n     ,\r\n        isSystemInfo: function (label) {\r\n\r\n          return label == 'Global' || label == 'Type' || label == 'Label' || label == 'SystemInfo';\r\n\r\n        },\r\n        getLabelClass: function (node, label) {\r\n\r\n\r\n\r\n\r\n\r\n          if (node && label === node.Type) {\r\n            return 'label-warning';\r\n          }\r\n\r\n          if (utils.isSystemInfo(label)) {\r\n            return 'label-system';\r\n          }\r\n\r\n          if (utils.isType(label)) {\r\n            return 'label-inverse pointer';\r\n          }\r\n\r\n\r\n          return 'label-info';\r\n\r\n        }\r\n\r\n        ,\r\n        personTypes: ['Painter',\r\n                'Illustrator',\r\n                'Philosopher',\r\n                'Poet',\r\n                'FilmMaker',\r\n               'Sculptor',\r\n                'Writer',\r\n               'Patron',\r\n                 'Leader',\r\n                 'Explorer',\r\n                 'Composer',\r\n                'Scientist',\r\n                'Caricaturist',\r\n                 'Mathematician']\r\n        ,\r\n        pictureTypes: ['Painting', 'Illustration', 'Drawing', 'Print']\r\n        ,\r\n        isPerson: function (type) {\r\n\r\n          return type == 'Painter' ||\r\n                type == 'Illustrator' ||\r\n                type == 'Philosopher' ||\r\n                type == 'Poet' ||\r\n                type == 'FilmMaker' ||\r\n                type == 'Sculptor' ||\r\n                type == 'Writer' ||\r\n                type == 'Patron' ||\r\n                type == 'Leader' ||\r\n                type == 'Explorer' ||\r\n                type == 'Composer' ||\r\n                type == 'Scientist' ||\r\n                type == 'Caricaturist' ||\r\n                type == 'Mathematician';\r\n\r\n        }\r\n\r\n\r\n            // mopve to 'state' object\r\n            ,\r\n        tabSettings: {}\r\n            ,\r\n        selectedTab:'Properties'\r\n\r\n\r\n\r\n\r\n      };\r\n      return utils.init();\r\n\r\n    }]);\r\n","angular.module('neograph.node')\r\n  .controller('NodeCtrl', function ($scope, $stateParams, nodeService) {\r\n    var vm = this;\r\n    vm.selection = {\r\n      selectedNode: null,\r\n      selectedEdge: null,\r\n      hoverNode: null\r\n    };\r\n    vm.tabs = ['Properties', 'Relationships', 'Images'];\r\n    vm.selectedTab = 'Properties';\r\n    vm.selectTab = function (tab) {\r\n      vm.selectedTab = tab;\r\n    };\r\n    activate();\r\n    function activate() {\r\n      if ($stateParams.node) {\r\n        nodeService.get($stateParams.node, true).then(function (node) {\r\n          vm.selection.selectedNode = node;\r\n        });\r\n      }\r\n    }\r\n  });\r\n","angular.module('neograph.node', [\r\n  'neograph.node.graphpanel',\r\n  'neograph.node.favourites',\r\n  'neograph.node.freebase',\r\n  'neograph.node.graphpanel',\r\n  'neograph.node.wikipedia',\r\n  'neograph.node.multiple',\r\n  'neograph.node.properties',\r\n  'neograph.node.relationships',\r\n  'ui.router'\r\n]);","angular.module('neograph.node')\r\n  .config(function ($stateProvider) {\r\n    $stateProvider\r\n      .state('admin.node', {\r\n        url:'/node/:node',\r\n        views: {\r\n          'panel@admin': {\r\n            controller:'NodeCtrl as vm',\r\n            templateUrl:'app/node/node.html'\r\n          },\r\n          'properties@admin.node': {\r\n            templateUrl:'app/node/properties/node.properties.html',\r\n            controller:function ($scope, $stateParams, nodeService) {\r\n              if ($stateParams.node) {\r\n                nodeService.get($stateParams.node, true).then(function (node) {\r\n                  $scope.node = node;\r\n                });\r\n              }\r\n            } \r\n          },\r\n          'relationships@admin.node':{\r\n            templateUrl:'app/node/relationships/node.relationships.html',\r\n            controller:function ($scope, $stateParams, nodeService) {\r\n              if ($stateParams.node) {\r\n                nodeService.get($stateParams.node, true).then(function (node) {\r\n                  $scope.node = node;\r\n                  console.log(node);\r\n                });\r\n              }\r\n            }\r\n          },\r\n          'images@admin.node': {\r\n            controller:'NodeImagesCtrl',\r\n            templateUrl:'app/node/images/node.images.html'\r\n          }\r\n        }\r\n      })\r\n      .state('admin.node.edit', {\r\n        url:'/edit',\r\n        views:{\r\n          'properties@admin.node':{\r\n            templateUrl:'app/node/properties/node.properties.edit.html',\r\n            controller:'EditPropertiesCtrl'\r\n          },\r\n          'relationships@admin.node':{\r\n            templateUrl:'app/node/relationships/node.relationships.edit.html',\r\n            controller:'EditRelationshipsCtrl'\r\n          }\r\n        }\r\n      });\r\n  });\r\n","(function() {\r\n  'use strict';\r\n  angular.module('neograph.node')\r\n    .factory('nodeService', service);\r\n\r\n  function service(neoClient, utils, $q, nodeFactory) {\r\n\r\n    var lastLoadedNode = {};\r\n\r\n    var api = {\r\n      setPropsAndTabsFromLabels: function (node) {\r\n        return neoClient.node.setPropsAndTabs({ node:node }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      get: function (label, addrelprops) {\r\n\r\n        if (addrelprops) {\r\n\r\n          if (lastLoadedNode && (label === lastLoadedNode.Label || label === lastLoadedNode.id)) {\r\n            return $q.when(lastLoadedNode);\r\n          }\r\n          else {\r\n\r\n            return neoClient.node.getWithRels({ id: label }).$promise.then(function (node) {\r\n\r\n\r\n              lastLoadedNode = nodeFactory.create(node.toJSON());\r\n              console.log(lastLoadedNode);\r\n              return lastLoadedNode;\r\n            });\r\n          }\r\n\r\n\r\n        }\r\n        else {\r\n          return neoClient.node.get({ id: label }).$promise.then(function (node) {\r\n            return node.toJSON();\r\n          });\r\n        }\r\n\r\n      },\r\n      getList: function (q, limit) { // q = match (n) & where only (without return)\r\n        return neoClient.node.getList({ q: q, limit: limit }).$promise;// returns array\r\n      },\r\n      saveWikipagename: function (n)// short version for freebase prop saving\r\n          {\r\n        return neoClient.node.saveWikipagename({\r\n          id: n.id,\r\n          name: n.Wikipagename\r\n        }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      getImages:function (node) {\r\n\r\n        return neoClient.node.getImages({\r\n          id: node.id,\r\n          isPicture: node.temp.isPicture,\r\n          isGroup: node.temp.isGroup\r\n        }).$promise;// returns array\r\n      },\r\n      saveProps: function (n) {// short version for freebase prop saving\r\n        return neoClient.node.saveProps({ node: n, user: user }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      getProps: function (labels) {\r\n        return neoClient.node.getProps({ labels: labels }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      save: function (n, user) {\r\n        if (n.temp.trimmed) {\r\n          throw ('Node is trimmed - cannot save');\r\n        }\r\n        return neoClient.node.save({ node: n, user: user }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      saveRels: function (n) {\r\n        return neoClient.node.saveRels({ node: n }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      // deletes node and relationships forever\r\n      destroy: function (node) {\r\n        return neoClient.node.destroy({ node: node }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      // only supports 1 node at the mo\r\n      delete: function (node) {\r\n        var deferred = $q.deferred();\r\n        if (node && node.id) {\r\n          return neoClient.node.delete({ node: node }).$promise.then(function (data) {\r\n            deferred.resolve(data.toJSON());\r\n          });\r\n        } else {\r\n          deferred.resolve({});\r\n        }\r\n      },\r\n      // only supports 1 node at the mo\r\n      restore: function (node) {\r\n        var deferred = $q.deferred();\r\n        if (node && node.id) {\r\n          neoClient.node.restore({ node: node }).$promise.then(function (data) {\r\n            deferred.resolve(data.toJSON());\r\n          });\r\n        } else {\r\n          deferred.resolve({});\r\n        }\r\n        return deferred.promise;\r\n      },\r\n      search: function (txt, restrict) { // restrict = labels to restrict matches to\r\n        if (txt) {\r\n          return neoClient.node.search({ txt: txt, restrict: restrict }).$promise;// returns array\r\n        }\r\n      }\r\n    };\r\n    return api;\r\n    \r\n  }\r\n})();","'use strict';\n\nangular.module('templates', []);\nvar app = angular.module('Neograph', ['templates', 'publishSubscribe', 'ui.router', 'ngSanitize', 'neograph.common', 'neograph.edge', 'neograph.interaction', 'neograph.layout', 'neograph.neo', 'neograph.node', 'neograph.query']).config([\"$stateProvider\", \"$urlRouterProvider\", function ($stateProvider, $urlRouterProvider) {\n  $stateProvider.state('admin', {\n    url: '/admin?querypreset',\n    views: {\n      '@': {\n        templateUrl: 'app/partials/admin.html'\n      },\n      'search@admin': {\n        controller: 'SearchCtrl as vm',\n        templateUrl: 'app/node/search/search.html'\n      },\n      'query@admin': {\n        controller: 'QueryCtrl',\n        templateUrl: 'app/query/query.html'\n      }\n    }\n  }).state('search', {\n    url: '/search',\n    templateUrl: 'app/partials/search.html'\n  });\n\n  $urlRouterProvider.otherwise('/admin');\n}]).controller('AdminController', [\"$scope\", \"neo\", \"queryPresets\", \"utils\", \"session\", function ($scope, neo, queryPresets, utils, session) {\n  $scope.subscribe('hover', function (node) {\n    $scope.selection.hoverNode = node;\n  });\n\n  function shouldEnabledAddToGraph() {\n    $scope.enableAddToGraph = $scope.selection.selectedNode && $scope.selection.selectedNode.id && $scope.activeView.type == 'Graph' && !$scope.activeView.data.nodes[$scope.selection.selectedNode.id];\n  }\n\n  $scope.$watch('selection.selectedEdge', function (edge) {\n    if (edge) {\n      $scope.selection.selectedNode = undefined;\n      $scope.selection.multiple = undefined;\n      $scope.selection.images = [];\n    }\n  });\n\n  $scope.subscribe('favourite', function (node) {\n    neo.saveFavourite(node, session.user);\n  });\n\n  $scope.subscribe('newEdge', function (newEdge) {\n    $scope.$apply(function () {\n      $scope.selection.selectedEdge = newEdge;\n      $scope.tabs = ['Properties'];\n      $scope.selectedTab = 'Properties';\n    });\n  });\n}]).run([\"$rootScope\", \"PubSubService\", function ($rootScope, PubSubService) {\n  PubSubService.init($rootScope);\n}]);\n'use strict';\n\nangular.module('publishSubscribe', []).service('PubSubService', function () {\n  return {\n    init: function init(scope) {\n      // Keep a dictionary to store the events and its subscriptions\n      var publishEventMap = {};\n      // Register publish events\n      scope.constructor.prototype.publish = function publish() {\n        var _this = this;\n\n        // Get event and rest of the data\n        var args = [].slice.call(arguments);\n        var evnt = args.splice(0, 1);\n        if (!publishEventMap[evnt]) {\n          publishEventMap[evnt] = [];\n        }\n        // Loop though each handlerMap and invoke the handler\n        publishEventMap[evnt].forEach(function (handlerMap) {\n          handlerMap.handler.apply(_this, args);\n        });\n      };\n      // Register Subscribe events\n      scope.constructor.prototype.subscribe = function subscribe(evnt, handler) {\n        var _this2 = this;\n\n        var handlers = publishEventMap[evnt] = publishEventMap[evnt] || [];\n        // Just keep the scopeid for reference later for cleanup\n        handlers.push({ $id: this.$id, handler: handler });\n        // When scope is destroy remove the handlers that it has subscribed.\n        this.$on('$destroy', function () {\n          for (var i = 0, l = handlers.length; i < l; i++) {\n            if (handlers[i].$id === _this2.$id) {\n              handlers.splice(i, 1);\n              break;\n            }\n          }\n        });\n      };\n    }\n  };\n});\n'use strict';\n\nangular.module('neograph.settings', []).factory('settings', function () {\n  return { apiRoot: 'http://localhost:1337' };\n});\n'use strict';\n\nangular.module('neograph.common', ['neograph.common.filter', 'neograph.common.filters', 'neograph.common.images', 'neograph.common.labels', 'neograph.common.network', 'neograph.common.nodeArray', 'neograph.common.typeahead', 'neograph.common.typeaheadSimple']);\n'use strict';\n\nangular.module('neograph.common.filter', []).directive('filter', function () {\n  return {\n    replace: true,\n    restrict: 'E',\n    templateUrl: 'app/common/filter.html',\n    scope: {\n\n      init: '=' // an array of labels\n\n      , enabled: '=',\n\n      process: '&'\n\n    },\n    link: function link($scope, $element, $attrs) {\n\n      $scope.filters = {};\n\n      $scope.$watch('init', function (labels) {\n\n        var filters = {};\n        angular.forEach(labels, function (f) {\n          filters[f] = 0;\n        });\n\n        $scope.filters = filters;\n      });\n\n      $scope.getFilterClass = function (value) {\n\n        if (value === 1) return 'label-success';else if (value === 0) return 'label-info';else return '';\n      };\n\n      $scope.toggleFilter = function (label) {\n        if ($scope.filters[label] == 1) {\n          $scope.filters[label] = 0;\n        } else if ($scope.filters[label] == 0) {\n          $scope.filters[label] = 1;\n        } else if ($scope.filters[label] == -1) {\n          for (var f in $scope.filters) {\n            $scope.filters[f] = 0;\n          }\n          $scope.filters[label] = 1;\n        }\n\n        var labels = [];\n        for (var f in $scope.filters) {\n\n          if ($scope.filters[f] === 1) {\n            labels.push(f);\n          }\n        }\n\n        $scope.process({ labels: labels });\n      };\n\n      $scope.$watch('enabled', function (labels) {\n        // labels = selectable labels following filtering\n\n        if (labels && labels.length) {\n          for (var f in $scope.filters) {\n\n            if ($.inArray(f, labels) == -1) {\n              // disable filter if not in list\n              $scope.filters[f] = -1;\n            } else if ($scope.filters[f] == -1) {\n              // enable filter if in list and previously disabled\n              $scope.filters[f] = 0;\n            }\n          }\n        } else {\n\n          for (var f in $scope.filters) {\n            $scope.filters[f] = 0;\n          }\n        }\n      });\n    }\n  };\n});\n'use strict';\n\nangular.module('neograph.common.filters', []).filter('checkmark', function () {\n  return function (input) {\n    return input ? '✓' : '✘';\n  };\n}).filter('predicate', function () {\n  return function (input) {\n    return input ? '✓' : '✘';\n  };\n});\n'use strict';\n\nangular.module('neograph.common.images', ['neograph.neo', 'neograph.session']).directive('images', ['neo', 'session', function (neo) {\n      return {\n            replace: true,\n            restrict: 'E',\n            templateUrl: 'app/common/images.html',\n            scope: {\n                  editing: '=',\n                  nodes: '=' // must be an array to preserve sort order\n                  , active: '=',\n                  updatemasonry: '=' // required to update masonry on resize\n\n            },\n            link: function link($scope, $element, $attrs) {\n\n                  var $ul = $($element).find('ul');\n\n                  $scope.items = {};\n\n                  $scope.$watch('nodes', function (nodes) {\n                        $ul.removeClass('masonryLoaded');\n                        $scope.items = nodes;\n                        applyMasonry();\n                  });\n\n                  $scope.$watch('updatemasonry', function () {\n                        if ($ul.hasClass('masonry')) {\n                              $ul.masonry('reload');\n                        }\n                  });\n\n                  $scope.$watch('active', applyMasonry);\n\n                  var applyMasonry = function applyMasonry() {\n\n                        //    if ($scope.updatemasonry) {\n\n                        setTimeout(function () {\n\n                              if ($ul.hasClass('masonry')) {\n                                    $ul.masonry('reload');\n                              } else {\n                                    $ul.masonry({\n                                          nodeselector: 'li'\n                                          // ,\n                                          // columnWidth: 1,\n                                          // \"isFitWidth\": true\n                                    });\n                              }\n\n                              $ul.addClass('masonryLoaded');\n                        }, 100);\n                        //   }\n                        //     else {\n                        //   $ul.addClass('masonryLoaded');\n                        // /     }\n                  };\n\n                  $scope.navigate = function (label) {\n                        $scope.publish('query', {\n                              name: label,\n                              view: label,\n                              type: 'Grid',\n                              queryGenerator: { id: 'nodeFilter', options: { node: { Label: label } } }\n                        });\n                  };\n\n                  $scope.selectAll = function () {\n\n                        if ($ul.find('li.ui-selected').length < $ul.find('li').length) {\n                              $ul.find('li').addClass('ui-selected');\n                              $scope.selected = $scope.nodes.map(function (e, i) {\n                                    return i;\n                              });\n                        } else {\n                              $ul.find('li').removeClass('ui-selected');\n                              $scope.selected = [];\n                        }\n                  };\n\n                  // this assumes that we are looking at a view of not deleted items\n                  $scope.subscribe('deleted', function (params) {\n\n                        // alternatively i could have a deep watch on nodearray and update that\n                        removeItems(params.selection.nodes);\n                  });\n\n                  // this assumes that we are looking at a view of deleted items\n                  $scope.subscribe('restored', function (params) {\n\n                        // alternatively i could have a deep watch on nodearray and update that\n                        removeItems(params.selection.nodes);\n                  });\n\n                  var removeItems = function removeItems(items) {\n\n                        if (items && items.length) {\n                              angular.forEach(items, function (node) {\n                                    var sel = \"li[nodeid='\" + node.id + \"']\";\n                                    console.log(sel);\n                                    $ul.find(sel).remove();\n                              });\n                              applyMasonry();\n                        }\n                  };\n\n                  $scope.getFilterClass = function (value) {\n\n                        if (value === 1) return 'label-success';else if (value === 0) return 'label-info';else return '';\n                  };\n\n                  $scope.toggleFilter = function (label) {\n                        if ($scope.filters[label] == 1) {\n                              $scope.filters[label] = 0;\n                              refreshContent();\n                        } else if ($scope.filters[label] == 0) {\n                              $scope.filters[label] = 1;\n                              refreshContent();\n                        } else if ($scope.filters[label] == -1) {\n                              for (var f in $scope.filters) {\n                                    $scope.filters[f] = 0;\n                              }\n\n                              $scope.filters[label] = 1;\n                              refreshContent();\n                        }\n                  };\n\n                  // triggered by selecting a filter\n                  $scope.$watch('filterBy', function (label) {\n                        if (label) {\n                              $scope.filters[label] = 1;\n                              $scope.filterBy = undefined;\n                              refreshContent();\n                        }\n                  });\n\n                  // triggered by selecting one or more images\n                  $scope.$watch('selected', function (selected) {\n                        // NB selected is now an array of node indexes\n\n                        if (selected && selected.length) {\n\n                              var selectedNodes = selected.map(function (i) {\n                                    return $scope.nodes[i];\n                              });\n\n                              // NB if there are multiple instances of the images directive (as typically) it wont be possible ot know which one the event was sent from\n                              // but mainly we need to know that it wasnt sent from the graph or controller, as images currently doesnt substribe to selected event\n                              $scope.publish('selected', { sender: 'Images', selection: { nodes: selectedNodes } });\n                        }\n                  });\n\n                  $scope.makeFavourite = function (node) {\n                        console.log(node);\n                        $scope.publish('favourite', node);\n                  };\n            }\n      };\n}]);\n'use strict';\n\nangular.module('neograph.common.labels', ['neograph.neo', 'neograph.utils']).directive('labels', ['neo', 'utils', function (neo, utils) {\n      return {\n            restrict: 'E',\n            templateUrl: 'app/common/labels.html',\n            scope: {\n                  node: '=?',\n\n                  labels: '=?',\n\n                  items: '=?',\n\n                  navpath: '@',\n\n                  highlight: '@?'\n            },\n            link: function link($scope, $element, $attrs) {\n\n                  $scope.$watch('node', function (node) {\n                        if (node) {\n                              $scope.labels = $scope.node.labels;\n                        }\n                  });\n\n                  $scope.$watch('items', function (items) {\n                        if (items) {\n                              $scope.labels = $scope.items.map(function (x) {\n                                    return x.label;\n                              });\n                        }\n                  });\n\n                  $scope.getClass = function (label) {\n                        if (label === $attrs['highlight']) {\n                              return 'label-warning';\n                        } else return utils.getLabelClass($scope.node, label);\n                  };\n            }\n      };\n}]);\n'use strict';\n\nangular.module('neograph.common.network', []).directive('network', function () {\n  return {\n\n    restrict: 'E',\n    template: '<div></div>',\n    scope: {\n      graph: '=',\n      options: '=',\n      network: '=',\n      width: '@',\n      height: '@'\n    },\n\n    link: function link($scope, $element) {\n\n      $scope.network = new vis.Network($element, $scope.graph, $scope.options);\n      $scope.network.setSize($scope.width + 'px', $scope.height + 'px');\n    }\n\n  };\n});\n'use strict';\n\nangular.module('neograph.common.nodeArray', ['neograph.utils']).directive('nodeArray', ['utils', function (utils) {\n  return {\n    replace: true,\n    restrict: 'EA',\n    templateUrl: 'app/common/nodeArray.html',\n    scope: {\n\n      items: '=' // an array of string or  items with label property\n\n      , enabled: '=',\n\n      onselected: '&?',\n\n      node: '=?',\n\n      directbinding: '@?' // set this to false if passing in array of strings\n\n      , width: '@?'\n\n    },\n    link: function link($scope, $element, $attrs) {\n\n      var directBinding = $attrs['directbinding'] == 'false' ? false : true;\n\n      $scope.nodes = [];\n\n      $scope.$watch('items', function (items) {\n\n        if (items && items.length) {\n          console.log(items);\n\n          if (items[0] && (items[0].label || items[0].lookup)) {\n\n            $scope.nodes = items;\n          } else {\n            directBinding = false;\n            $scope.nodes = items.map(function (e) {\n              return { label: e };\n            });\n          }\n\n          console.log($scope.nodes);\n        } else {\n          if (directBinding) {\n            $scope.nodes = items;\n          } else {\n            $scope.nodes = [];\n          }\n        }\n      });\n\n      $($element).on('click', function () {\n        $($element).find('input').focus();\n      });\n\n      // //update items array (needed as items can be array of text items not nodes)\n      // $scope.$watch('nodes', function (nodes) {\n      //    if (!directBinding) {\n      //        mappingNodesToItems = true;\n      //        $scope.items = nodes.map(function (n) { return n.Label; })\n      //        mappingNodesToItems = false;\n      //    }\n\n      // }, true)\n\n      // $scope.getWidth = function () {\n      //    if ($scope.nodes) {\n      //        return $attrs[\"width\"] ? $attrs[\"width\"] : $scope.nodes.length > 5 ? '495px' : '230px'\n      //    }\n      //    else {\n      //        return null;\n      //    }\n      // }\n\n      $scope.getClass = function (node) {\n        return utils.getLabelClass($scope.node, node.label);\n      };\n\n      $scope.clickable = $attrs['onselected'] != undefined;\n\n      $scope.nodeClicked = function (node) {\n\n        if ($attrs['onselected']) {\n\n          $scope.onselected({ item: node });\n        }\n      };\n\n      var indexOf = function indexOf(node) {\n\n        var ind = -1;\n\n        $($scope.nodes).each(function (i, e) {\n\n          if (node.label && e.label === node.label || node.lookup && e.lookup == node.lookup) {\n            ind = i;\n            return;\n          }\n        });\n\n        return ind;\n      };\n\n      $scope.addNode = function (node) {\n        console.log(node);\n        console.log(directBinding);\n        if (indexOf(node) == -1) {\n          console.log('node adding');\n          $scope.nodes.push(node);\n\n          if (!directBinding) {\n            console.log('item adding');\n            $scope.items.push(node.label);\n          }\n        }\n\n        // else highlight the node momentarily\n      };\n\n      $scope.removeNode = function (node) {\n        console.log(node);\n        var ind = indexOf(node);\n        console.log(ind);\n        if (ind > -1) {\n          $scope.nodes.splice(ind, 1);\n\n          if (!directBinding) {\n            $scope.items.splice($scope.items.indexOf(node.label || node.lookup), 1);\n          }\n        }\n      };\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.common.typeahead', ['neograph.utils', 'neograph.node.service']).directive('typeahead', ['utils', 'nodeService', function (utils, nodeService) {\n  return {\n    restrict: 'E',\n    replace: true,\n    scope: {\n      choice: '=?', // the choice should be an object for 2 way binding with label property\n      watchvalue: '=?', // watchvalue should be a text string  -just for updating the textbox value when the value changes, not fed back\n      text: '=?', // to feed back the text value when it changes (when no item has been selected)\n      restrict: '=?', // options to retrict the items that can be selected = Type,Predicate,User,custom object array with label property\n      onselected: '&?',\n      autosize: '@?'\n    },\n    template: '<input type=\"text\" class=\"form-control\" />',\n    link: function link($scope, element, attrs) {\n\n      var placeholderDefault = 'Node...';\n\n      var $input = $(element); // .find('input');\n      $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\n\n      $scope.$watch('choice', function (n) {\n        if (n) {\n          $input.val(n.Label || n.label);\n        }\n      });\n\n      if (!attrs['choice']) {\n        $scope.$watch('watchvalue', function (n) {\n          $input.val(n);\n        });\n      }\n\n      if (attrs['autosize']) {\n\n        $input.css({ width: '10px' });\n        $input.attr('placeholder', '+');\n        $input.on('focus', function () {\n          $input.css({ width: '100px' });\n          $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\n          setTimeout(function () {\n            $input.css({ width: '100px' });\n            $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\n          }, 100);\n        });\n        $input.on('blur', function () {\n          $input.css({ width: '10px' });\n          $input.attr('placeholder', '+');\n          $input.val('');\n        });\n      }\n\n      $input.typeahead({\n        source: getSource(),\n        matcher: function matcher(obj) {\n          var item = JSON.parse(obj);\n          return ~item.label.toLowerCase().indexOf(this.query.toLowerCase());\n        },\n        sorter: function sorter(items) {\n          var beginswith = [],\n              caseSensitive = [],\n              caseInsensitive = [],\n              aItem,\n              item;\n          while (aItem = items.shift()) {\n            var item = JSON.parse(aItem);\n            if (!item.label.toLowerCase().indexOf(this.query.toLowerCase())) {\n              beginswith.push(JSON.stringify(item));\n            } else if (~item.label.indexOf(this.query)) {\n              caseSensitive.push(JSON.stringify(item));\n            } else {\n              caseInsensitive.push(JSON.stringify(item));\n            }\n          }\n          return beginswith.concat(caseSensitive, caseInsensitive);\n        },\n        highlighter: function highlighter(obj) {\n          var item = JSON.parse(obj);\n          var query = this.query.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n          var out;\n          if (attrs['restrict'] === 'Predicate') {\n            out = new utils.Predicate(item.label).ToString().replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\n              return '<strong>' + match + '</strong>';\n            });\n          } else {\n            out = item.label.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\n              return '<strong>' + match + '</strong>';\n            }) + \" <div style='float:right;margin-left:8px;color:#ccc'>\" + item.type + '</div>';\n          }\n          return out;\n        },\n        updater: function updater(obj) {\n\n          itemSelected = true;\n\n          var item = JSON.parse(obj);\n\n          $scope.$apply(function () {\n\n            if (attrs['choice']) {\n              $scope.choice = item;\n            }\n\n            if (attrs['onselected']) {\n              $scope.onselected({ item: item });\n            }\n          });\n\n          if (!attrs['clearonselect']) {\n            return item.label;\n          }\n        }\n      });\n\n      var itemSelected = false;\n\n      $input.on('keydown', function (e) {\n        itemSelected = false;\n        if (e.keyCode == 13) {\n          // enter\n\n          setTimeout(function () {\n\n            $scope.$apply(function () {\n              if (!itemSelected) {\n                $scope.text = $input.val();\n                $input.val('');\n              }\n            });\n          }, 100);\n        }\n      });\n\n      function getSource() {\n        if (attrs['restrict'] == 'Type') {\n          // convert types object to array\n          var source = [];\n          for (var key in utils.types) {\n            source.push(JSON.stringify(utils.types[key]));\n          }\n          return source;\n        } else if (attrs['restrict'] == 'Predicate') {\n          // convert predicates object to array\n          var source = [];\n          for (var key in utils.predicates) {\n            source.push(JSON.stringify(utils.predicates[key]));\n          }\n          return source;\n        } else {\n          return nodeSource;\n        }\n      }\n\n      // Globals & users or one or the other depending on value of restrict\n      var nodeSource = function nodeSource(query, process) {\n\n        if ($scope.restrict && $.isArray($scope.restrict) && $scope.restrict.length > 0) {\n\n          if ($scope.restrict[0].label) {\n            return $scope.restrict.map(function (d) {\n              return JSON.stringify(d);\n            });\n          } else {\n            return $scope.restrict.map(function (d) {\n              return JSON.stringify({ label: d });\n            });\n          }\n        } else {\n          nodeService.search(query, attrs['restrict']).then(function (nodes) {\n            process(nodes.map(function (d) {\n              return JSON.stringify(d);\n            }));\n          });\n        }\n      };\n\n      $scope.$watch('restrict', function () {\n        $input.data('typeahead').source = getSource();\n      }, true);\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.common.typeaheadSimple', []).directive('typeaheadSimple', [function () {\n  return {\n    restrict: 'E',\n    replace: true,\n    scope: {\n      ngModel: '=?', // the choice should be an object for 2 way binding with Lookup property\n      source: '='\n    },\n    template: '<input type=\"text\" />',\n    link: function link($scope, element, attrs) {\n\n      var placeholderDefault = '';\n\n      var $input = $(element); // .find('input');\n      $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\n\n      $input.typeahead({\n        source: $scope.source,\n        updater: function updater(item) {\n\n          $scope.$apply(function () {\n\n            $scope.ngModel = item;\n          });\n\n          return item;\n        }\n      });\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.edge', ['neograph.neo', 'neograph.utils', 'ui.router']).config([\"$stateProvider\", function ($stateProvider) {\n  $stateProvider.state('admin.main.edge', {\n    url: '/edge/:edge',\n    // abstract:true,\n    views: {\n      'edgeHeader@admin': {\n        controller: [\"$scope\", \"$stateParams\", function controller($scope, $stateParams) {\n          if ($stateParams.edge) {\n            $scope.edge = JSON.parse($stateParams.edge);\n          }\n        }],\n        templateUrl: 'app/edge/edge.header.html'\n      },\n\n      'edge@admin': {\n        controller: [\"$scope\", function controller($scope) {\n          $scope.tabs = ['Properties'];\n          $scope.selectedTab = 'Properties';\n          $scope.selectTab = function (tab) {\n            $scope.selectedTab = tab;\n          };\n        }],\n\n        templateUrl: 'app/edge/edge.html'\n      }\n    }\n\n  }).state('admin.main.edge.view', {\n    url: '/view',\n    views: {\n      'properties@admin.main.edge': {\n        templateUrl: 'app/edge/properties.html',\n        controller: [\"$scope\", \"$stateParams\", function controller($scope, $stateParams) {\n          if ($stateParams.edge) {\n            $scope.edge = JSON.parse($stateParams.edge);\n          }\n        }]\n      }\n    }\n\n  }).state('admin.main.edge.edit', {\n    url: '/edit',\n    views: {\n\n      'editproperties@admin.main.edge': {\n        templateUrl: 'app/edge/properties.edit.html',\n        controller: 'EditEdgeCtrl'\n      }\n\n    }\n\n  });\n}]).controller('EditEdgeCtrl', [\"neo\", \"utils\", \"$stateParams\", \"$scope\", function (neo, utils, $stateParams, $scope) {\n\n  if ($stateParams.edge) {\n    $scope.edge = JSON.parse($stateParams.edge);\n    $scope.predicateType = utils.predicates[$scope.edge.type];\n  }\n\n  $scope.$watch('predicateType', function (predicateType) {\n    if (predicateType) {\n      $scope.edge.type = predicateType.Lookup;\n    }\n  });\n\n  $scope.deleteEdge = function (e) {\n\n    neo.deleteEdge(e, $scope.activeView.data.nodes[e.startNode], $scope.activeView.data.nodes[e.endNode]).then(function () {\n\n      // let view handle its own data ?\n      delete $scope.activeView.data.edges[e.id];\n      if ($scope.selection.selectedEdge && $scope.selection.selectedEdge.id === e.id) {\n        $scope.selection.selectedEdge = null;\n      }\n\n      $scope.publish('deleted', { selection: { edges: [e] } });\n    });\n  };\n\n  $scope.saveEdge = function (e) {\n\n    neo.saveEdge(e).then(function (g) {\n\n      $scope.publish('dataUpdate', g);\n\n      // update cache\n      for (key in g.nodes) {\n        $scope.activeView.data.nodes[key] = g.nodes[key];\n      }\n\n      for (key in g.edges) {\n        $scope.activeView.data.edges[key] = g.edges[key];\n\n        if ($scope.selection.selectedEdge && (key === $scope.selection.selectedEdge.id || !$scope.selection.selectedEdge.id)) {\n          $scope.selection.selectedEdge = g.edges[key];\n        }\n      }\n    });\n  };\n}]);\n'use strict';\n\nangular.module('neograph.interaction.draggable', []).directive('draggable', function () {\n  return {\n\n    link: function link($scope, element, attrs) {\n\n      var initLeft = $(element).position().left;\n\n      $(element).draggable({\n        axis: 'x',\n        drag: function drag() {\n\n          var change = initLeft - $(element).position().left;\n\n          $scope.$apply(function () {\n            $scope.window.tabsWidth = $scope.window.tabsWidth + change;\n          });\n\n          initLeft = $(element).position().left;\n        }\n      });\n    }\n  };\n});\n'use strict';\n\nangular.module('neograph.interaction', ['neograph.interaction.draggable', 'neograph.interaction.resizable', 'neograph.interaction.selectable']);\n'use strict';\n\nangular.module('neograph.interaction.resizable', []).directive('resizable', [\"$window\", function ($window) {\n  return {\n    scope: {\n      window: '='\n    },\n    controller: [\"$scope\", \"$element\", function controller($scope, $element) {\n\n      var w = angular.element($window);\n      var getWindowDimensions = function getWindowDimensions() {\n        var width = w.width();\n        var height = w.height();\n        return {\n          'height': height,\n          'width': width,\n          'tabsWidth': $scope.window.tabsWidth,\n          'tabsWidthInner': $scope.window.tabsWidth - 10,\n          'graphWidth': width - $scope.window.tabsWidth,\n          'graphHeight': height - $scope.window.topBarHeight,\n          'topBarHeight': $scope.window.topBarHeight,\n          'tabsHeight': height - $scope.window.topBarHeight\n        };\n      };\n\n      $scope.window = getWindowDimensions();\n\n      $scope.$watch(getWindowDimensions, function (newValue, oldValue) {\n\n        $scope.window = newValue;\n      }, true);\n\n      w.bind('resize', function () {\n        $scope.$apply();\n      });\n\n      // w.bind(\"debouncedresize\", function (event) {\n      //    $scope.$apply();\n\n      // });\n    }]\n  };\n}]);\n'use strict';\n\nangular.module('neograph.interaction.selectable', []).directive('selectable', function () {\n  return {\n    scope: {\n      selected: '='\n\n    },\n    link: function link($scope, element, attrs) {\n\n      $scope.$watch($(element).find('li.ui-selected').length, function (i) {\n\n        $(element).selectable({\n          filter: 'li',\n          stop: function stop(event, ui) {\n\n            var selected = [];\n\n            $(element).find('li.ui-selected').each(function (i, e) {\n              selected.push(parseInt($(e).attr('nodeindex')));\n            });\n\n            $scope.$apply(function () {\n\n              $scope.selected = selected;\n            });\n          },\n\n          cancel: '.badge, .label'\n\n        });\n      });\n    }\n  };\n});\n'use strict';\n\nangular.module('neograph.layout', []).directive('tabs', function () {\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      tabs: '=', // required to remove panes no longer available\n      selected: '=?'\n    },\n    controller: [\"$scope\", function controller($scope) {\n      var panes = $scope.panes = [];\n      var self = this;\n\n      $scope.select = function (pane) {\n        angular.forEach(panes, function (pane) {\n          pane.selected = false;\n        });\n        pane.selected = true;\n        $scope.selected = pane.key;\n      };\n\n      this.add = function (pane) {\n        if (panes.length === 0) {\n          $scope.select(pane);\n        }\n        panes.push(pane);\n      };\n\n      this.remove = function (pane) {\n        // console.log('remove')\n        // console.log(pane);\n        angular.forEach(panes, function (p, i) {\n          if (pane.key == p.key) {\n            panes.splice(i, 1);\n            if (pane.selected) {\n              pane.selected = false;\n              $scope.select($scope.panes[0]);\n            }\n          }\n        });\n      };\n\n      $scope.$watch('selected', function (key) {\n        // the title of the selected pane\n\n        if (key) {\n          angular.forEach(panes, function (pane) {\n\n            pane.selected = pane.key === key;\n          });\n        }\n      });\n\n      // remove tabs not in list (child pane only adds them)\n      $scope.$watch('tabs', function (tabs) {\n        // the title of the selected pane\n\n        if (tabs) {\n          angular.forEach(panes, function (pane) {\n\n            if (tabs.indexOf(pane.key) === -1) {\n\n              self.remove(pane);\n            }\n          });\n        }\n      });\n    }],\n    templateUrl: 'app/layout/tabs.html'\n  };\n}).directive('tabPane', function () {\n  return {\n    require: '^tabs',\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      key: '@',\n      title: '=',\n      visible: '=',\n      active: '=?',\n      window: '='\n    },\n    link: function link($scope, element, attrs, tabsCtrl) {\n\n      tabsCtrl.add($scope);\n\n      // $scope.$watch('visible', function (visible) {\n\n      //    if (visible) {\n      //        tabsCtrl.addPane($scope);\n      //    }\n      //    else {\n      //        tabsCtrl.removePane($scope);\n\n      //    }\n\n      // });\n\n      $scope.$watch('active', function (active) {\n        // the title of the selected pane\n\n        $scope.selected = active;\n      });\n    },\n    templateUrl: 'app/layout/tabPane.html'\n  };\n}).directive('noBubble', function () {\n  return {\n\n    link: function link($scope, element, attrs, tabsCtrl) {\n\n      $(element).on('keydown', function (event) {\n\n        event.stopPropagation();\n      });\n    },\n    templateUrl: 'app/layout/tabPane.html'\n  };\n});\n'use strict';\n\nangular.module('neograph.models.node', ['neograph.models.predicate']).factory('nodeFactory', [\"predicateFactory\", function (predicateFactory) {\n\n    function Node(data) {\n\n        this.labels = [];\n\n        Object.assign(this, data);\n\n        // instead i think i should call the service to get the reverse\n        for (var relKey in this.relationships) {\n            var rel = this.relationships[relKey];\n            rel.predicate = predicateFactory.create(rel.predicate);\n        }\n\n        if (!this.label && this.lookup) {\n            this.label = this.lookup;\n        }\n    }\n\n    Node.prototype.isPicture = function () {\n\n        return this.labels.indexOf('Picture') > -1;\n    };\n\n    Node.prototype.isPerson = function () {\n\n        return this.labels.indexOf('Person') > -1;\n    };\n\n    Node.prototype.isProperty = function () {\n\n        return this.labels.indexOf('Property') > -1;\n    };\n\n    Node.prototype.isCustomField = function (key) {\n\n        return key != 'lookup' && key != 'class' && key != 'label' && key != 'description' && key != 'text' && key != 'name' && key != 'systemInfo' && key != 'labels' && key != 'id' && key != 'created' && key != 'image' && key != 'relationships' && key != 'labelled';\n    };\n\n    return {\n        create: function create(data) {\n            return new Node(data);\n        }\n    };\n}]);\n'use strict';\n\nangular.module('neograph.models.predicate', []).factory('predicateFactory', function () {\n\n  function Predicate(data) {\n\n    Object.assign(this, data);\n  }\n\n  Predicate.prototype.setDirection = function (direction) {\n    this.direction = direction;\n    return this;\n  };\n\n  Predicate.prototype.toString = function () {\n    if (this.direction === 'in' && !this.symmetrical) {\n      if (this.reverse) {\n        // use reverse if present\n        return this.reverse.replace(/_/g, ' ').toLowerCase();\n      } else {\n        var lookup = this.lookup.toUpperCase();\n        if (lookup === 'CREATED' || lookup === 'CREATES') return 'created by';else if (lookup === 'INFLUENCES') return 'influenced by';else if (lookup === 'INSPIRES') return 'inspired by';else if (lookup === 'ANTICIPATES') return 'anticipated by';else if (lookup === 'DEVELOPS') return 'developed by';else if (lookup === 'DEPICTS') return 'depicted by';else if (lookup === 'TYPE_OF') return 'type(s)';else return '(' + this.lookup.replace(/_/g, ' ').toLowerCase() + ')';\n      }\n    }\n\n    // if (!this.isDirectional || !this.direction || this.direction === \"out\") {\n    return this.lookup.replace(/_/g, ' ').toLowerCase();\n  };\n\n  Predicate.prototype.flip = function () {\n\n    if (!this.isDirectional) {\n      return;\n    }\n    if (this.direction === 'in') {\n      this.setDirection('out');\n    } else {\n      this.setDirection('in');\n    }\n    return this;\n  };\n\n  return {\n    create: function create(data) {\n      return new Predicate(data);\n    }\n  };\n});\n'use strict';\n\nangular.module('neograph.neo.client', ['ngResource', 'neograph.settings']).factory('neoClient', ['$resource', 'settings', function ($resource, settings) {\n  // return $resource('http://localhost:1337/node/match', {txt:'@txt',restrict:'@restrict'}, {\n  //    matchNodes: {\n  //        method: 'POST',\n  //        isArray:true\n  //    }\n  // });\n\n  // return $resource(null,null, {\n  //    matchNodes: {\n  //        url: 'http://localhost:1337/node/match',\n  // //       params: {txt:'',restrict:''},\n  //        method: 'POST',\n  //        isArray: true\n  //    }\n  // });\n\n  var root = settings.apiRoot;\n\n  return {\n\n    node: $resource(null, null, {\n      search: {\n        url: root + '/search',\n\n        method: 'POST',\n        isArray: true\n      },\n\n      get: {\n        url: root + '/node/get/:id',\n        method: 'GET'\n      },\n\n      getWithRels: {\n        url: root + '/node/getWithRels/:id',\n        method: 'GET'\n      },\n\n      getRelationships: {\n        url: root + '/node/relationships/:id',\n        method: 'GET'\n      },\n\n      getOne: {\n        url: root + '/node/single',\n        method: 'POST'\n      },\n\n      getList: {\n        url: root + '/node/list',\n        method: 'POST',\n        isArray: true\n      },\n\n      save: {\n        url: root + '/node/save',\n\n        method: 'POST'\n      },\n      saveProps: {\n        url: root + '/node/saveProps',\n\n        method: 'POST'\n      },\n      saveRels: {\n        url: root + '/node/saveRels',\n\n        method: 'POST'\n      },\n      saveWikipagename: {\n        url: root + '/node/saveWikipagename',\n\n        method: 'POST'\n      },\n\n      saveMultiple: {\n        url: root + '/node/saveMultiple',\n\n        method: 'POST'\n      },\n\n      del: {\n        url: root + '/node/delete',\n\n        method: 'POST'\n      },\n\n      destroy: {\n        url: root + '/node/destroy',\n\n        method: 'POST'\n      },\n      restore: {\n        url: root + '/node/restore',\n\n        method: 'POST'\n      },\n\n      getProps: {\n        url: root + '/node/getProps',\n\n        method: 'POST'\n\n      },\n\n      getImages: {\n        url: root + '/node/getImages',\n        isArray: true,\n        method: 'POST'\n\n      }\n\n    }),\n    edge: $resource(null, null, {\n      save: {\n        url: root + '/edge/save',\n        method: 'POST'\n      },\n\n      del: {\n        url: root + '/edge/delete',\n        method: 'POST'\n\n      },\n\n      getImageRelationships: {\n        url: root + '/edge/imagerelationships',\n        method: 'POST'\n      }\n    }),\n\n    user: $resource(null, null, {\n      saveFavourite: {\n        url: root + '/user/saveFavourite',\n\n        method: 'POST'\n\n      },\n      get: {\n        url: root + '/user/:user',\n        method: 'GET'\n      }\n    }),\n\n    graph: $resource(null, null, {\n      get: {\n        url: root + '/graph',\n\n        method: 'POST'\n      }\n    }),\n\n    type: $resource(null, null, {\n      getAll: {\n        url: root + '/types',\n        method: 'GET'\n      }\n    }),\n\n    predicate: $resource(null, null, {\n      getAll: {\n        url: root + '/predicates',\n        method: 'GET'\n      }\n    }),\n\n    utils: $resource(null, null, {\n      getDistinctLabels: {\n        url: root + '/utils/distinctLabels',\n        isArray: true,\n        method: 'POST'\n      }\n    })\n\n  };\n}]);\n'use strict';\n\nangular.module('neograph.neo', ['neograph.utils', 'neograph.neo.client']).factory('neo', ['neoClient', 'utils', function (neoClient, utils) {\n\n    var that = {\n\n        getGraph: function getGraph(q, returnArray) {\n\n            return neoClient.graph.get({ q: q, returnArray: returnArray }).$promise.then(function (data) {\n\n                var out = data.toJSON();\n                console.dir(out);\n                return out;\n            });\n        },\n\n        // returns all relationships between supplied nodes, which can be vis.Dataset or graph data object\n        getAllRelationships: function getAllRelationships(nodes) {\n            var nodeIds = '';\n\n            if (nodes.getIds) // if vis.DataSet\n                {\n                    nodeIds = nodes.getIds({ returnType: 'Array' }).join(',');\n                } else {\n                // otherwise data object\n\n                for (var key in nodes) {\n                    if (nodeIds.length) {\n                        nodeIds += ',';\n                    }\n                    nodeIds += key;\n                }\n            }\n\n            var q = 'MATCH a -[r]- b WHERE id(a) IN[' + nodeIds + '] and id(b) IN[' + nodeIds + '] and not (a-[:TYPE_OF]-b) return r';\n\n            return that.getGraph(q);\n        },\n\n        getRelationships: function getRelationships(id) {\n\n            return neoClient.node.getRelationships({ id: id }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        saveMultiple: function saveMultiple(multiple) {\n\n            return neoClient.node.saveMultiple({ multiple: multiple }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        // saves edge to neo (update/create)\n        // TODO: according to certain rules labels will need to be maintained when relationships are created. (update not required as we always delete and recreate when changing start/end nodes)\n        // tag a with label b where:\n        // a=person and b=provenance (eg painter from france)\n        // a=person and n=group, period (eg painter part of les fauves / roccocco)\n        // a=picture and b=non-person (eg picture by corot / of tree) - although typically this will be managed through labels directly (which will then in turn has to keep relationships up to date)\n        saveEdge: function saveEdge(e) {\n            // startNode and endNode provide the full node objects for the edge\n\n            return neoClient.edge.save({ edge: e }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        saveFavourite: function saveFavourite(node, user) {\n\n            return neoClient.user.saveFavourite({ user: user, node: node }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        deleteEdge: function deleteEdge(edge) {\n\n            if (edge && edge.id) {\n\n                return neoClient.edge.delete({ edge: edge }).$promise.then(function (data) {\n                    return data.toJSON();\n                });\n            }\n        },\n\n        getUser: function getUser(userLookup) {\n\n            return neoClient.user.get({ user: userLookup }).$promise.then(function (data) {\n\n                return data.toJSON();\n            });\n        },\n\n        getOne: function getOne(q) {\n            // q must be a match return a single entity n\n\n            return neoClient.node.getOne({ q: q }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        getImageRelationships: function getImageRelationships(edge) {\n            // loks up id/label first then call get by label\n\n            return neoClient.edge.getImageRelationships({ edge: edge }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        // Alternatively i could query the actual labels and merge them into a distinct array\n        getDistinctLabels: function getDistinctLabels(labels) {\n\n            return neoClient.utils.getDistinctLabels({ labels: labels }).$promise; // returns array\n        },\n\n        getDistinctLabelsQuery: function getDistinctLabelsQuery(q) {\n\n            return neoClient.utils.getDistinctLabels({ q: q }).$promise; // returns array\n        }\n\n    };\n\n    return that;\n}]);\n'use strict';\n\nangular.module('neograph.session', ['neograph.neo']).factory('session', ['neo', '$q', function (neo, $q) {\n\n  var anonUser = {\n    Lookup: 'Anonymous',\n    roles: { 'Public': {} }\n  };\n\n  var session = {\n\n    init: function init() {\n\n      neo.getUser('Julian').then(function (user) {\n\n        session.user = user;\n        session.signedIn = true;\n      });\n\n      return session;\n    },\n\n    signingIn: false,\n\n    signedIn: false,\n\n    user: anonUser,\n\n    signIn: function signIn(username, password) {\n\n      return neo.authenticate(username, password).then(function (user) {\n\n        session.user = user;\n\n        console.log(session.user);\n        //   session.apps = service.getApps(session.user.roles);\n\n        localStorage.username = session.user.username;\n\n        session.signedIn = true;\n\n        if (user.roles.PreReg) {\n          $('body').addClass('prereg');\n        } else {\n          $('body').removeClass('prereg');\n        }\n      }, function (failMessage) {\n        console.log(failMessage);\n        return $q.reject(failMessage);\n      });\n    },\n\n    signOut: function signOut() {\n\n      session.user = anonUser;\n      localStorage.username = ''; // = JSON.stringify(session.user);\n      session.signedIn = false;\n      //  session.apps = service.getApps(session.user.roles);\n    }\n  };\n\n  if (localStorage.username) {\n    session.user = neo.getUser(localStorage.username);\n  }\n\n  if (session.user.name != 'Anonymous') {\n    session.signedIn = true;\n  }\n\n  //   session.apps = service.getApps(session.user.roles);\n\n  return session.init();\n}]);\n'use strict';\n\nangular.module('neograph.utils', ['neograph.neo.client', 'neograph.query.presets']).factory('utils', ['neoClient', 'queryPresets', function (neoClient, presets) {\n\n  Array.prototype.diff = function (a) {\n    return this.filter(function (i) {\n      return a.indexOf(i) < 0;\n    });\n  };\n\n  Array.prototype.ids = function () {\n    return this.map(function (e) {\n      return e.id;\n    });\n  };\n\n  Array.prototype.hasAny = function (a) {\n    return this.filter(function (i) {\n      return a.indexOf(i) > -1;\n    }).length > 0;\n  };\n\n  Array.prototype.unique = function () {\n    var a = [];\n    for (i = 0; i < this.length; i++) {\n      var current = this[i];\n      if (a.indexOf(current) < 0) a.push(current);\n    }\n    return a;\n  };\n\n  var utils = {\n\n    init: function init() {\n\n      utils.refreshTypes();\n      utils.refreshPredicates();\n      return utils;\n    },\n\n    types: {},\n\n    predicates: {},\n\n    isType: function isType(label) {\n      return utils.types[label] != undefined;\n    },\n\n    refreshTypes: function refreshTypes() {\n\n      return neoClient.type.getAll().$promise.then(function (types) {\n        utils.types = types;\n        return types;\n      });\n    },\n\n    refreshPredicates: function refreshPredicates() {\n      // consider creating lookup nodes for relationship types so that i can store properties for them\n\n      return neoClient.predicate.getAll().$promise.then(function (predicates) {\n        utils.predicates = predicates.toJSON();\n        // console.log(utils.predicates);\n        return utils.predicates;\n      });\n    },\n\n    isSystemInfo: function isSystemInfo(label) {\n\n      return label == 'Global' || label == 'Type' || label == 'Label' || label == 'SystemInfo';\n    },\n    getLabelClass: function getLabelClass(node, label) {\n\n      if (node && label === node.Type) {\n        return 'label-warning';\n      }\n\n      if (utils.isSystemInfo(label)) {\n        return 'label-system';\n      }\n\n      if (utils.isType(label)) {\n        return 'label-inverse pointer';\n      }\n\n      return 'label-info';\n    },\n\n    personTypes: ['Painter', 'Illustrator', 'Philosopher', 'Poet', 'FilmMaker', 'Sculptor', 'Writer', 'Patron', 'Leader', 'Explorer', 'Composer', 'Scientist', 'Caricaturist', 'Mathematician'],\n\n    pictureTypes: ['Painting', 'Illustration', 'Drawing', 'Print'],\n\n    isPerson: function isPerson(type) {\n\n      return type == 'Painter' || type == 'Illustrator' || type == 'Philosopher' || type == 'Poet' || type == 'FilmMaker' || type == 'Sculptor' || type == 'Writer' || type == 'Patron' || type == 'Leader' || type == 'Explorer' || type == 'Composer' || type == 'Scientist' || type == 'Caricaturist' || type == 'Mathematician';\n    }\n\n    // mopve to 'state' object\n\n    , tabSettings: {},\n\n    selectedTab: 'Properties'\n\n  };\n  return utils.init();\n}]);\n'use strict';\n\nangular.module('neograph.node').controller('NodeCtrl', [\"$scope\", \"$stateParams\", \"nodeService\", function ($scope, $stateParams, nodeService) {\n  var vm = this;\n  vm.selection = {\n    selectedNode: null,\n    selectedEdge: null,\n    hoverNode: null\n  };\n  vm.tabs = ['Properties', 'Relationships', 'Images'];\n  vm.selectedTab = 'Properties';\n  vm.selectTab = function (tab) {\n    vm.selectedTab = tab;\n  };\n  activate();\n  function activate() {\n    if ($stateParams.node) {\n      nodeService.get($stateParams.node, true).then(function (node) {\n        vm.selection.selectedNode = node;\n      });\n    }\n  }\n}]);\n'use strict';\n\nangular.module('neograph.node', ['neograph.node.graphpanel', 'neograph.node.favourites', 'neograph.node.freebase', 'neograph.node.graphpanel', 'neograph.node.wikipedia', 'neograph.node.multiple', 'neograph.node.properties', 'neograph.node.relationships', 'ui.router']);\n'use strict';\n\nangular.module('neograph.node').config([\"$stateProvider\", function ($stateProvider) {\n  $stateProvider.state('admin.node', {\n    url: '/node/:node',\n    views: {\n      'panel@admin': {\n        controller: 'NodeCtrl as vm',\n        templateUrl: 'app/node/node.html'\n      },\n      'properties@admin.node': {\n        templateUrl: 'app/node/properties/node.properties.html',\n        controller: [\"$scope\", \"$stateParams\", \"nodeService\", function controller($scope, $stateParams, nodeService) {\n          if ($stateParams.node) {\n            nodeService.get($stateParams.node, true).then(function (node) {\n              $scope.node = node;\n            });\n          }\n        }]\n      },\n      'relationships@admin.node': {\n        templateUrl: 'app/node/relationships/node.relationships.html',\n        controller: [\"$scope\", \"$stateParams\", \"nodeService\", function controller($scope, $stateParams, nodeService) {\n          if ($stateParams.node) {\n            nodeService.get($stateParams.node, true).then(function (node) {\n              $scope.node = node;\n              console.log(node);\n            });\n          }\n        }]\n      },\n      'images@admin.node': {\n        controller: 'NodeImagesCtrl',\n        templateUrl: 'app/node/images/node.images.html'\n      }\n    }\n  }).state('admin.node.edit', {\n    url: '/edit',\n    views: {\n      'properties@admin.node': {\n        templateUrl: 'app/node/properties/node.properties.edit.html',\n        controller: 'EditPropertiesCtrl'\n      },\n      'relationships@admin.node': {\n        templateUrl: 'app/node/relationships/node.relationships.edit.html',\n        controller: 'EditRelationshipsCtrl'\n      }\n    }\n  });\n}]);\n'use strict';\n\n(function () {\n  'use strict';\n\n  service.$inject = [\"neoClient\", \"utils\", \"$q\", \"nodeFactory\"];\n  angular.module('neograph.node').factory('nodeService', service);\n\n  function service(neoClient, utils, $q, nodeFactory) {\n\n    var lastLoadedNode = {};\n\n    var api = {\n      setPropsAndTabsFromLabels: function setPropsAndTabsFromLabels(node) {\n        return neoClient.node.setPropsAndTabs({ node: node }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      get: function get(label, addrelprops) {\n\n        if (addrelprops) {\n\n          if (lastLoadedNode && (label === lastLoadedNode.Label || label === lastLoadedNode.id)) {\n            return $q.when(lastLoadedNode);\n          } else {\n\n            return neoClient.node.getWithRels({ id: label }).$promise.then(function (node) {\n\n              lastLoadedNode = nodeFactory.create(node.toJSON());\n              console.log(lastLoadedNode);\n              return lastLoadedNode;\n            });\n          }\n        } else {\n          return neoClient.node.get({ id: label }).$promise.then(function (node) {\n            return node.toJSON();\n          });\n        }\n      },\n      getList: function getList(q, limit) {\n        // q = match (n) & where only (without return)\n        return neoClient.node.getList({ q: q, limit: limit }).$promise; // returns array\n      },\n      saveWikipagename: function saveWikipagename(n) // short version for freebase prop saving\n      {\n        return neoClient.node.saveWikipagename({\n          id: n.id,\n          name: n.Wikipagename\n        }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      getImages: function getImages(node) {\n\n        return neoClient.node.getImages({\n          id: node.id,\n          isPicture: node.temp.isPicture,\n          isGroup: node.temp.isGroup\n        }).$promise; // returns array\n      },\n      saveProps: function saveProps(n) {\n        // short version for freebase prop saving\n        return neoClient.node.saveProps({ node: n, user: user }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      getProps: function getProps(labels) {\n        return neoClient.node.getProps({ labels: labels }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      save: function save(n, user) {\n        if (n.temp.trimmed) {\n          throw 'Node is trimmed - cannot save';\n        }\n        return neoClient.node.save({ node: n, user: user }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      saveRels: function saveRels(n) {\n        return neoClient.node.saveRels({ node: n }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      // deletes node and relationships forever\n      destroy: function destroy(node) {\n        return neoClient.node.destroy({ node: node }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      // only supports 1 node at the mo\n      delete: function _delete(node) {\n        var deferred = $q.deferred();\n        if (node && node.id) {\n          return neoClient.node.delete({ node: node }).$promise.then(function (data) {\n            deferred.resolve(data.toJSON());\n          });\n        } else {\n          deferred.resolve({});\n        }\n      },\n      // only supports 1 node at the mo\n      restore: function restore(node) {\n        var deferred = $q.deferred();\n        if (node && node.id) {\n          neoClient.node.restore({ node: node }).$promise.then(function (data) {\n            deferred.resolve(data.toJSON());\n          });\n        } else {\n          deferred.resolve({});\n        }\n        return deferred.promise;\n      },\n      search: function search(txt, restrict) {\n        // restrict = labels to restrict matches to\n        if (txt) {\n          return neoClient.node.search({ txt: txt, restrict: restrict }).$promise; // returns array\n        }\n      }\n    };\n    return api;\n  }\n})();\n'use strict';\n\nangular.module('neograph.query.graph', ['ui.router', 'neograph.models.node']).factory('graphService', [\"nodeFactory\", function (nodeFactory) {\n  var graphNodeFromNeoNode = function graphNodeFromNeoNode(neoNode) {\n    neoNode = nodeFactory.create(neoNode);\n    var type = neoNode.class;\n    var yf = parseInt(neoNode.yearFrom, 10);\n    var yt = parseInt(neoNode.yearTo, 10);\n    var y = yt;\n    if (yf && yt) {\n      y = yt - (yt - yf) / 2;\n    }\n    var level = 0;\n    var startYear = 1400;\n    var endYear = 2000;\n    var step = 5;\n    var cnt = 1;\n    for (var i = startYear; i < endYear; i += step) {\n      if (y >= i && y < i + step) {\n        level = cnt;\n      }\n      cnt += 1;\n    }\n    if (y > endYear) {\n      level = cnt;\n    }\n    var node = {\n      id: neoNode.id,\n      label: neoNode.label || neoNode.lookup,\n      size: neoNode.status / 10,\n      group: neoNode.class,\n      mass: type === 'Group' ? 0.5 : 1,\n      radius: neoNode.isPerson() ? neoNode.status : 1,\n      // for hiearchichal layout,\n      level: level,\n      borderWidth: 0\n    };\n\n    var image = type === 'Painting' || type === 'Picture' ? neoNode.temp.thumbUrl : null;\n\n    if (image) {\n      node.image = image;\n      node.shape = 'image';\n    } else if (type === 'Provenance') {\n      node.fontSize = 50;\n      node.fontColor = 'lightgray';\n      node.color = 'transparent';\n    } else if (type === 'Iconography' || type === 'Place') {\n      node.shape = 'ellipse';\n    } else if (type === 'Quotation') {\n      node.shape = 'box';\n      node.color = 'transparent';\n      node.label = neoNode.text;\n    } else if (type === 'User') {\n      node.shape = 'star';\n      node.size = 20;\n    } else if (type === 'Link') {\n      node.label = neoNode.name;\n      node.shape = 'box';\n      node.color = 'transparent';\n    } else if (neoNode.isPerson()) {\n      node.shape = 'dot';\n    } else if (neoNode.isProperty()) {\n      node.shape = 'circle';\n    } else {\n      node.shape = 'box';\n    }\n\n    node.color = { background: node.color || '#97C2FC', border: 'transparent' };\n    if (neoNode.isProperty()) {\n      node.color.background = 'lightgreen';\n    }\n    return node;\n  };\n\n  var graphEdgeFromNeoEdge = function graphEdgeFromNeoEdge(neoEdge) {\n    var type = neoEdge.type;\n    var symmetrical = type === 'ASSOCIATED_WITH';\n    var hideEdgeLabel = type === 'BY' || type === 'INFLUENCES' || type === 'INSPIRES' || type === 'DEALS_WITH' || type === 'PART_OF' || type === 'MEMBER_OF' || type === 'ASSOCIATED_WITH' || type === 'ACTIVE_DURING' || type === 'FROM' || type === 'DEVELOPS' || type === 'LEADS' || type === 'FOUNDS' || type === 'DEPICTS' || type === 'WORKS_IN' || type === 'STUDIES' || type === 'STUDIES_AT' || type === 'TEACHES' || type === 'TEACHES_AT';\n\n    var colour = void 0;\n    switch (type) {\n      case 'FROM':\n        colour = '#EEE';\n        break;\n      case 'INFLUENCES':\n        colour = 'pink';\n        break;\n      case 'TEACHES':\n      case 'TEACHES_AT':\n      case 'PROPERTY':\n        colour = 'green';\n        break;\n      default:\n        colour = 'blue';\n    }\n\n    var hideEdge = type === 'FROM';\n    var edge = {\n      id: neoEdge.id,\n      from: neoEdge.startNode,\n      to: neoEdge.endNode,\n      label: type !== 'EXTENDS' && type !== 'PROPERTY' && type !== 'INFLUENCES' && type !== 'ASSOCIATED_WITH' ? type.toLowerCase() : null,\n      fontColor: 'blue',\n      color: colour,\n      opacity: hideEdge ? 0 : 1, // type === \"INFLUENCES\" ? 1 : 0.7,\n      style: symmetrical ? 'dash-line' : 'arrow', // arrow-center' ,\n      type: ['curved'],\n      labelAlignment: 'line-center'\n    };\n    return edge;\n  };\n\n  return {\n    defaultEdgeType: function defaultEdgeType(fromType, toType) {\n      if (toType === 'Provenance') {\n        return 'FROM';\n      } else if (toType === 'Painter') {\n        return 'INFLUENCES';\n      }\n      return 'ASSOCIATED_WITH';\n    },\n    options: {\n      edges: { widthSelectionMultiplier: 4 },\n      hierarchicalLayout: {\n        enabled: false,\n        levelSeparation: 10, // make this inversely proportional to number of nodes\n        nodeSpacing: 200,\n        direction: 'UD' },\n      //LR\n      //    layout: \"hubsize\"\n      dataManipulation: {\n        enabled: true,\n        initiallyVisible: true\n      },\n      // stabilize: true,\n      // stabilizationIterations: 1000,\n      physics: {\n        barnesHut: {\n          enabled: true,\n          gravitationalConstant: -6000,\n          centralGravity: 1,\n          springLength: 20,\n          springConstant: 0.04,\n          damping: 0.09\n        },\n        repulsion: {\n          centralGravity: 0.1,\n          springLength: 0.5,\n          springConstant: 0.05,\n          nodeDistance: 100,\n          damping: 0.09\n        },\n        hierarchicalRepulsion: {\n          enabled: false,\n          centralGravity: 0,\n          springLength: 270,\n          springConstant: 0.01,\n          nodeDistance: 300,\n          damping: 0.09\n        }\n      },\n      onDelete: function onDelete(data, callback) {}\n    },\n    // Transforms neo graph data object into object\n    // containing array of nodes and array of edges renderable by vis network\n    toGraphData: function toGraphData(g) {\n      return {\n        nodes: Object.keys(g.nodes).map(function (key) {\n          return graphNodeFromNeoNode(g.nodes[key]);\n        }),\n        edges: Object.keys(g.edges).map(function (key) {\n          return graphEdgeFromNeoEdge(g.edges[key]);\n        })\n      };\n    }\n  };\n}]).directive('graph', [\"graphService\", \"$state\", function (graphService, $state) {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/query/graph.html',\n    scope: {\n      data: '=',\n      active: '=',\n      network: '='\n    },\n    link: function link($scope, $element) {\n      var graph = {\n        nodes: new vis.DataSet(),\n        edges: new vis.DataSet()\n      };\n      var graphWidth = 1300;\n      var graphHeight = $(window).height() - 80;\n      var topBarHeight = 150;\n      var options = graphService.options;\n      options.onConnect = function (data, callback) {\n        var newEdge = {\n          start: $scope.data.nodes[data.from],\n          type: graphService.defaultEdgeType($scope.data.nodes[data.from].Type, $scope.data.nodes[data.to].Type),\n          end: $scope.data.nodes[data.to],\n          properties: { Weight: 3 }\n        };\n        $scope.publish('newEdge', newEdge);\n      };\n      var network = new vis.Network($element.find('.graphContainer')[0], graph, options);\n      var getSelectedNodeId = function getSelectedNodeId() {\n        var selectedNodes = network.getSelectedNodes();\n        if (selectedNodes.length === 1) {\n          return selectedNodes[0];\n        }\n        return undefined;\n      };\n\n      $scope.data = {\n        nodes: {},\n        edges: {}\n      };\n      $scope.$on('$stateChangeSuccess', function () {\n        if ($state.params.node) {\n          Object.keys($scope.data.nodes).forEach(function (key) {\n            if ($scope.data.nodes[key].label === $state.params.node) {\n              if ($scope.data.nodes[key].id !== getSelectedNodeId()) {\n                network.selectNodes([key]);\n                network.focusOnNode(key, {\n                  scale: 1.5,\n                  animation: {\n                    duration: 1000,\n                    easingFunction: 'easeOutCubic'\n                  }\n                });\n              }\n            }\n          });\n        }\n      });\n\n      // Set size to window size\n      $scope.$watch('window', function () {\n        network.setSize(graphWidth + 'px', graphHeight + 'px');\n      });\n\n      // Fit to screen on resize\n      network.on('resize', function () {\n        if (getSelectedNodeId()) {\n          network.focusOnNode(getSelectedNodeId(), {\n            scale: 1,\n            animation: {\n              duration: 1000,\n              easingFunction: 'easeOutCubic'\n            }\n          });\n        } else {\n          network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\n        }\n      });\n\n      graph.nodes.on('*', function () {\n        if (graph.nodes.length) {\n          $('.network-manipulationUI.connect').css('display', 'inline-block');\n        } else {\n          $('.network-manipulationUI.connect').hide();\n        }\n      });\n\n      // Add event listeners\n      network.on('select', function (params) {\n        if (params.nodes.length === 1) {\n          var label = $scope.data.nodes[params.nodes[0]].label;\n          if (label) {\n            $state.go('admin.main.node.view', { node: label });\n          }\n        } else if (params.edges.length === 1) {\n          var id = params.edges[0];\n          var startNode = $scope.data.nodes[$scope.data.edges[id].startNode];\n          var endNode = $scope.data.nodes[$scope.data.edges[id].endNode];\n          var edge = {\n            id: id,\n            start: { lookup: startNode.lookup },\n            end: { lookup: endNode.lookup },\n            type: $scope.data.edges[id].type,\n            properties: $scope.data.edges[id].properties\n          };\n          $state.go('admin.main.edge.view', { edge: JSON.stringify(edge) });\n        }\n      });\n\n      $scope.subscribe('deleted', function (params) {\n        if (params.selection.nodes && params.selection.nodes.length) {\n          var nodeids = params.selection.nodes.map(function (n) {\n            return n.id;\n          });\n          graph.nodes.remove(nodeids);\n        }\n        if (params.selection.edges && params.selection.edges.length) {\n          var edgeids = params.selection.edges.map(function (n) {\n            return n.id;\n          });\n          graph.edges.remove(edgeids);\n        }\n      });\n\n      $scope.subscribe('focus', function (nodeid) {\n        network.focusOnNode(nodeid, {\n          scale: 1,\n          animation: {\n            duration: 1000,\n            easingFunction: 'easeOutCubic'\n          } });\n      });\n\n      $('.network-manipulationUI.connect').hide();\n\n      $scope.hoverNode = undefined;\n      $('.graphContainer').on('mousemove', function (event) {\n        var n = network._getNodeAt({\n          x: event.pageX,\n          y: event.pageY - topBarHeight - 55\n        });\n        $scope.$apply(function () {\n          if (n) {\n            var dataNode = $scope.data.nodes[n.id];\n            $scope.hoverNode = dataNode;\n            $scope.publish('hover', dataNode);\n          } else {\n            $scope.publish('hover', undefined);\n            $scope.hoverNode = undefined;\n          }\n        });\n      });\n\n      // Freeze simulation if not active\n      $scope.$watch('active', function (active) {\n        if (active !== undefined) {\n          network.freezeSimulation(!active);\n        }\n      });\n\n      $scope.$watch('data', function () {\n        if ($scope.active) {\n          graph.nodes.clear();\n          graph.edges.clear();\n          var gArr = graphService.toGraphData($scope.data);\n          graph.nodes.add(gArr.nodes);\n          graph.edges.add(gArr.edges);\n        }\n      });\n\n      // Update existing data (not replace)\n      $scope.subscribe('dataUpdate', function (g) {\n        if ($scope.active && $scope.data) {\n          Object.assign($scope.data.edges, g.edges);\n          Object.assign($scope.data.nodes, g.nodes);\n          var gArr = graphService.toGraphData(g);\n          graph.edges.update(gArr.edges);\n          graph.nodes.update(gArr.nodes);\n        }\n      });\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.query', ['neograph.query.presets', 'neograph.queryInput', 'neograph.query.graph']).factory('queryFactory', [\"queryPresets\", function (queryPresets) {\n  function Query(key, render) {\n    this.key = key;\n    this.name = key;\n    this.render = render;\n    this.data = {\n      nodes: {},\n      edges: {}\n    };\n    this.body = { q: '', connectAll: false };\n    this.presets = queryPresets;\n    this.generators = {};\n\n    if (render === 'Graph') {\n      this.generators.nodeGraph = {\n        type: 'nodeGraph',\n        options: {}\n      };\n    }\n\n    if (render === 'Grid') {\n      this.generators.nodeFilter = {\n        type: 'nodeFilter',\n        options: {}\n      };\n      this.generators.favouritesFilter = {\n        type: 'favouritesFilter',\n        options: {}\n      };\n    }\n  }\n  return {\n    create: function create(key, type) {\n      return new Query(key, type);\n    }\n  };\n}]).factory('queryService', [\"queryFactory\", function (queryFactory) {\n  var active = queryFactory.create('Query', 'Graph');\n  var queries = {};\n  queries[active.key] = active;\n\n  var listeners = [];\n  var publishChange = function publishChange() {\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](active);\n    }\n  };\n  return {\n    queries: queries,\n    active: active,\n    update: function update(key) {\n      active = queries[key];\n      publishChange();\n    },\n    subscribe: function subscribe(callback) {\n      return listeners.push(callback);\n    }\n  };\n}]).controller('QueryCtrl', [\"$scope\", \"queryService\", function ($scope, queryService) {\n  queryService.subscribe(function (active) {\n    $scope.active = active;\n  });\n  $scope.queries = queryService.queries;\n  $scope.active = queryService.active;\n  $scope.selectedTab = $scope.active.key;\n  $scope.$watch('selectedTab', function (key) {\n    return queryService.update(key);\n  });\n}]);\n'use strict';\n\nangular.module('neograph.query.presets', []).factory('queryPresets', function () {\n  return {\n    Schema: {\n      q: 'match (n:Schema) optional match (n)-[r]-(m:Schema) return n,r,m'\n    },\n    AddedRecently: {\n      q: '\\n      match (n:Global) where n.created is not null \\n      return n order by n.created desc limit 100\\n      '\n    },\n    AddedRecentlyPictures: {\n      q: '\\n      MATCH  (p:Label) -- (i:Picture) where p.created is not null \\n      return p.created,collect(i)[0..5],count(*) as count  \\n      order by p.created desc limit 500\\n      '\n    },\n    Overview: {\n      q: '\\n      match (n) - [r] - (m) where (n:Global and m:Global) \\n      and (n.Status is null or n.Status > 6) \\n      and (m.Status is null or m.Status > 6) \\n      and not (n-[:INSTANCE_OF]-m) RETURN r\\n      '\n    },\n    OverViewDense: {\n      q: '\\n      match (n) - [r] - (m) where (n:Global and m:Global) \\n      and (n.Status is null or n.Status > 3) \\n      and (m.Status is null or m.Status > 3) \\n      and not (n-[:INSTANCE_OF]-m) RETURN r\\n      '\n    },\n    BritishInfluence: {\n      q: '\\n      MATCH (c:Global)-[r]-(d:Global) where (c:English or c:Scottish) \\n      and not (c-[:INSTANCE_OF]-d) and not d.Lookup=\\'English\\' \\n      and not c.Lookup=\\'English\\'  return c,d,r\\n      '\n    },\n    BritishOnly: {\n      q: '\\n      MATCH (c:Global)-[r]-(d:Global) where (c:English or c:Scottish) and  \\n      (d:English or d:Scottish) and not (c-[:INSTANCE_OF]-d) \\n      and not d.Lookup=\\'English\\' and not c.Lookup=\\'English\\'  return c,d,r\\n      ',\n      connectAll: true\n    },\n    FrenchOnly: {\n      q: '\\n      MATCH (c:Global:French)-[r]-(d:Global:French) where  not (c-[:INSTANCE_OF]-d) \\n      and not d.Lookup=\\'French\\' and not c.Lookup=\\'French\\'  return c,d,r\\n      ',\n      connectAll: true\n    },\n    FrenchPainterInfluence: {\n      q: '\\n      MATCH (c:Global:French:Painter)-[r]-(d:Painter) \\n      where not (c-[:INSTANCE_OF]-d) \\n      and not d.Lookup=\\'French\\' and not c.Lookup=\\'French\\'  \\n      return c,d,r\\n      ',\n      connectAll: true\n    },\n    Cezanne3gen: {\n      q: '\\n      MATCH (c {Lookup:\\'Cezanne\\'})-[r]-(d:Painter)  \\n      -[s]-(e:Painter)  -[t]-(f:Painter) return c,d,e,f,r,s,t\\n      ',\n      connectAll: true\n    },\n    Cezanne3genOutbound: {\n      q: '\\n      MATCH (c {Lookup:\\'Cezanne\\'})\\n      -[r]->(d:Painter)  -[s]->(e:Painter)  -[t]->(f:Painter) \\n      return c,d,e,f,r,s,t\\n      ',\n      connectAll: true\n    },\n    Cezanne3genInbound: {\n      q: '\\n      MATCH (c {Lookup:\\'Cezanne\\'})\\n      <-[r]-(d:Painter)  <-[s]-(e:Painter)  <-[t]-(f:Painter) \\n      return c,d,e,f,r,s,t\\n      ',\n      connectAll: true\n    },\n    FrenchEnglishPainters: {\n      q: '\\n      MATCH (c:Global:French:Painter)-[r]-(d:Global:English:Painter) \\n      where  not (c-[:INSTANCE_OF]-d) and \\n      not d.Lookup=\\'French\\' and not c.Lookup=\\'French\\'  return c,d,r\\n      ',\n      connectAll: true\n    },\n    German: {\n      q: '\\n      MATCH (c:Global:German)-[r]-(d:Global) \\n      where not (c-[:INSTANCE_OF]-d) and not \\n      d.Lookup=\\'German\\' and not c.Lookup=\\'German\\'  return c,d,r\\n      '\n    },\n    NorthernEurope: {\n      q: '\\n       MATCH (c:Global)-[r]-(d:Global) where \\n        (c:NorthernEurope or c:German or c:Dutch or c:English or c:Scottish) \\n        and  \\n        (d:NorthernEurope or d:German or d:Dutch or d:English or d:Scottish) \\n        and not c:Provenance and not d:Provenance and not (c-[:INSTANCE_OF]-d) return c,d,r'\n    },\n    Italian: {\n      q: '\\n      MATCH (c:Global:Italian)-[r]-(d:Global) where not (c-[:INSTANCE_OF]-d) \\n      and not d.Lookup=\\'Italian\\' and not c.Lookup=\\'Italian\\'  return c,d,r\\n      '\n    },\n    Spanish: {\n      q: '\\n      MATCH (c:Global:Spanish)-[r]-(d:Global) \\n      where  not (c-[:INSTANCE_OF]-d) and not d.Lookup=\\'Spanish\\' \\n      and not c.Lookup=\\'Spanish\\'  return c,d,r\\n      '\n    },\n    American: {\n      q: '\\n      MATCH (c:Global:American)-[r]-(d:Global) where  not (c-[:INSTANCE_OF]-d) \\n      and not d.Lookup=\\'American\\' and not c.Lookup=\\'American\\'  return c,d,r\\n      '\n    },\n    Pop: {\n      q: '\\n      match (n {Lookup:\\'Pop\\'}) -[r]-(m:Global) -[s]-(p:Global) \\n      where not (n-[:INSTANCE_OF]-m) and not (m-[:INSTANCE_OF]-p) \\n      and (m:Painter or m:Group) and (p:Painter or p:Group) \\n      and not m:Provenance and not p:Provenance return n,r,m,s,p'\n    },\n    Impressionism: {\n      q: '\\n      match (n {Lookup:\\'Impressionist\\'}) -[r]-(m:Global) -[s]-(p:Global) \\n      where not (n-[:INSTANCE_OF]-m) and not (m-[:INSTANCE_OF]-p) \\n      and (m:Painter or m:Group) and (p:Painter or p:Group) \\n      and not m:Provenance and not p:Provenance return n,r,m,s,p\\n      ',\n      connectAll: true\n    },\n    Landscape: {\n      q: '\\n      MATCH (c:Global:Landscape)-[r]-(d:Global)  where not (c-[:INSTANCE_OF]-d) \\n      and not d.Lookup=\\'Landscape\\' and \\n      (d:Landscape or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r'\n    },\n    Modern: {\n      q: '\\n      MATCH (c:Global)-[r]-(d:Global) where  not (c-[:INSTANCE_OF]-d) \\n      and c.YearTo > 1870  and d.YearTo > 1870 return c,d,r\\n      '\n    },\n    Rennaissance: {\n      q: '\\n      MATCH (c:Global)-[r]-(d:Global) where  not (c-[:INSTANCE_OF]-d) \\n      and c.YearTo > 1400 and c.YearTo<1700 and d.YearTo > 1400 \\n      and d.YearTo<1700 return c,d,r\\n      '\n    }\n  };\n});\n'use strict';\n\nangular.module('neograph.queryInput', ['neograph.neo', 'neograph.query.presets', 'neograph.query.generator']).directive('queryinput', [\"neo\", \"queryPresets\", function (neo, queryPresets) {\n  return {\n    replace: true,\n    restrict: 'E',\n    templateUrl: 'app/query/queryInput.html',\n    scope: {\n      query: '=',\n      editable: '=?',\n      defaultpreset: '=?'\n    },\n    link: function link($scope) {\n      $scope.$watch('preset', function (preset) {\n        if (preset) {\n          $scope.query.body = preset;\n        }\n      });\n\n      if ($scope.defaultpreset) {\n        $scope.preset = queryPresets[$scope.defaultpreset];\n      }\n\n      $scope.$watch('query.body', function (body) {\n        if (body && body.q) {\n          $scope.getData();\n        }\n      });\n\n      $scope.generated = { q: '' };\n      $scope.$watch('generated', function (generated) {\n        if (generated) {\n          $scope.query.body = generated;\n        }\n      });\n\n      $scope.nodeChanged = function (node) {\n        if (node) {\n          $scope.query.name = node.Label || node.Lookup;\n        }\n      };\n\n      $scope.connectAll = function () {\n        return neo.getAllRelationships($scope.query.data.nodes).then(function (g) {\n          // Add to cached data\n          Object.assign($scope.query.data.edges, g.edges);\n          $scope.publish('dataUpdate', g);\n        });\n      };\n\n      $scope.getData = function () {\n        var body = $scope.query.body;\n        if (body && body.q) {\n          // If grid query then return results as array to preserve sort order\n          var returnArray = $scope.query.type === 'Grid';\n          neo.getGraph(body.q, returnArray).then(function (g) {\n            if (body.connectAll) {\n              neo.getAllRelationships(g.nodes).then(function (g2) {\n                return Object.assign(g.edges, g2.edges);\n              });\n            } else {\n              $scope.query.data = g;\n            }\n          });\n        }\n      };\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.node.favourites', []).directive('favourites', function () {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/node/favourites/node.favourites.html',\n    scope: {\n      node: '=',\n      query: '='\n    },\n\n    link: function link($scope) {\n\n      $scope.$watch('node', function (node) {\n\n        var querys = [];\n\n        if (node) {\n\n          querys.push({\n            name: 'Pictures',\n            view: node.Lookup + ' favourites',\n            type: 'Grid',\n            queryGenerator: { id: 'favouritesFilter', options: { user: node } }\n          });\n\n          querys.push({\n            name: 'People',\n            q: 'MATCH (c:' + node.Lookup + ':Favourite)-[]->(d) - [] - (n:Person)    return n', // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\n            connectAll: true,\n            view: 'Graph'\n          });\n\n          querys.push({\n            name: 'People + 1',\n            q: 'MATCH (c:' + node.Lookup + ':Favourite)-[]->(d) - [] - (n:Person) -[]-(m:Person)   return n,m', // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\n            connectAll: true,\n            view: 'Graph'\n          });\n\n          querys.push({\n            name: 'People and groups',\n            q: 'MATCH (c:' + node.Lookup + ':Favourite)-[]->(d) - [] - (n) where (n:Person or n:Period or n:Group or n:Provenance)   return n', // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\n            connectAll: true,\n            view: 'Graph'\n          });\n\n          querys.push({\n            name: 'People and groups + 1 ',\n            q: 'MATCH (c:' + node.Lookup + ':Favourite)-[]->(d) - [] - (n) - [] - (m) where (n:Person or n:Period or n:Group or n:Provenance) and  (m:Person or m:Period or m:Group or m:Provenance)  return n,m', // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\n            connectAll: true,\n            view: 'Graph'\n          });\n\n          querys.push({\n            name: 'Everything',\n            q: 'MATCH (c:' + node.Lookup + ':Favourite)-[]->(d) - [] - (n:Global)  return n', // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\n            connectAll: true,\n            view: 'Graph'\n          });\n\n          querys.push({\n            name: 'Everything + 1',\n            q: 'MATCH (c:' + node.Lookup + ':Favourite)-[]->(d) - [] - (n:Global) - [] - (m:Global)   return n,m', // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\n            connectAll: true,\n            view: 'Graph'\n          });\n        }\n\n        console.log(querys);\n\n        $scope.querys = querys;\n      });\n    }\n\n  };\n});\n'use strict';\n\nangular.module('neograph.node.freebase', ['neograph.neo']).factory('freebase.service', function () {\n\n  var creationQueries = [];\n\n  // creationQueries.push({\n  //    name: \"Description\",\n  //    propname: \"description\",\n  //    query: {\n  //        \"type\": \"/common/topic\",\n  //        \"description\": [{ \"mid\": null, \"name\": null }]\n  //    }\n  // });\n  // creationQueries.push({\n  //    name: \"Image\",\n  //    propname: \"image\",\n  //    query: {\n  //        \"type\": \"/common/topic\",\n  //        \"image\": [{ \"mid\": null, \"name\": null }]\n  //    }\n  // });\n  creationQueries.push({\n    name: 'About',\n    propname: ['type', 'art_genre', '', 'art_subject', 'period_or_movement', 'locations', 'date_begun', 'date_completed'],\n    query: {\n      'type': '/visual_art/artwork',\n      'art_genre': [{ 'mid': null, 'name': null }],\n      'art_subject': [{ 'mid': null, 'name': null }],\n      'period_or_movement': [{ 'mid': null, 'name': null }],\n      'locations': [{ 'mid': null, 'name': null }],\n      'date_begun': null,\n      'date_completed': null\n    }\n  });\n\n  // creationQueries.push({\n  //    name: \"About\",\n  //    propname: [\"type\",\"art_genre\",\"\",\"art_subject\",\"period_or_movement\",\"locations\",\"date_begun\",\"date_completed\"],\n  //    query: {\n  //        \"type\": \"/visual_art/artwork\",\n  //        \"art_genre\": [{ \"mid\": null, \"name\": null }],\n  //        \"art_subject\": [{ \"mid\": null, \"name\": null }],\n  //        \"period_or_movement\": [{ \"mid\": null, \"name\": null }],\n  //        \"locations\": [{ \"mid\": null, \"name\": null }],\n  //        \"date_begun\": null,\n  //        \"date_completed\":null\n  //    }\n  // });\n\n  // /visual_art/artwork/art_genre\n  // /visual_art/artwork/art_subject\n  // /visual_art/artwork/period_or_movement\n  // /visual_art/artwork/dimensions_meters\n  // /visual_art/artwork/locations\n  // visual_art/artwork/date_begun\n  // visual_art/artwork/date_completed\n\n  // queries that return lists\n  var queries = [];\n\n  // queries.push({\n  //    name: \"Description\",\n  //    propname: \"description\",\n  //    query: {\n  //        \"type\": \"/common/topic/description\",\n  //        \"description\": [{ \"mid\": null, \"name\": null }]\n  //    }\n  // });\n  // queries.push({\n  //    name: \"Image\",\n  //    propname: \"image\",\n  //    query: {\n  //        \"type\": \"/common/topic/image\",\n  //        \"image\": [{ \"mid\": null, \"name\": null }]\n  //    }\n  // });\n\n  queries.push({\n    name: 'Artworks',\n    propname: 'artworks',\n    query: {\n      'type': '/visual_art/visual_artist',\n      'artworks': [{ 'mid': null, 'name': null }]\n    }\n  });\n\n  queries.push({\n    name: 'Quotations',\n    propname: 'quotations',\n    query: {\n      'type': '/people/person',\n      'quotations': [{ 'mid': null, 'name': null }]\n    }\n  });\n\n  queries.push({\n    name: 'Influence',\n    propname: 'influenced',\n    query: {\n      'type': '/influence/influence_node',\n      'influenced': [{ 'mid': null, 'name': null }]\n    }\n  });\n\n  queries.push({\n    name: 'Influenced by',\n    propname: 'influenced_by',\n    query: {\n      'type': '/influence/influence_node',\n      'influenced_by': [{ 'mid': null, 'name': null }]\n    }\n  });\n  queries.push({\n    name: 'Periods or Movements',\n    propname: 'associated_periods_or_movements',\n    query: {\n      'type': '/visual_art/visual_artist',\n      'associated_periods_or_movements': [{ 'mid': null, 'name': null }]\n    }\n  });\n  queries.push({\n    name: 'Peers',\n    propname: 'peers',\n    query: {\n      'type': '/influence/influence_node',\n      'peers': [{ 'mid': null, 'name': null }]\n    }\n  });\n\n  // queries for single-value results\n  queries.push({\n    name: 'Date of Birth',\n    propname: 'date_of_birth',\n    query: {\n      'type': '/people/person',\n      'date_of_birth': null\n    }\n  });\n\n  queries.push({\n    name: 'Date of Death',\n    propname: 'date_of_death',\n    query: {\n      'type': '/people/deceased_person',\n      'date_of_death': null\n    }\n  });\n\n  var _getTopic = function _getTopic(freebaseId, filter, callback) {\n\n    var service_url = 'https://www.googleapis.com/freebase/v1/topic';\n    var params = {\n      'key': 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE',\n      'filter': filter\n      //  , 'filter': 'suggest'\n    };\n\n    $.getJSON(service_url + freebaseId + '?callback=?', params, function (response) {\n\n      callback(response);\n    });\n  };\n\n  var runQuery = function runQuery(q, callback) {\n\n    var API_KEY = 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE';\n    var service_url = 'https://www.googleapis.com/freebase/v1/mqlread';\n\n    var params = {\n      'key': API_KEY,\n      'query': JSON.stringify(q)\n    };\n    // console.log(params);\n\n    $.getJSON(service_url + '?callback=?', params, function (response) {\n\n      // var out = { results: [], error: undefined };\n      // if (response.result && response.result[q.propname]) {\n      //    out.result = response.result[q.propname];\n      // }\n\n      callback(response.result);\n    });\n  };\n\n  var _getPersonData = function _getPersonData(freebaseId, callback) {\n\n    var filters = [];\n\n    filters.push({\n      filter: '/visual_art/visual_artist',\n      props: ['associated_periods_or_movements']\n    });\n\n    filters.push({\n      filter: '/influence/influence_node',\n      props: ['influenced', 'peers,/influence/peer_relationship/peers', 'influenced_by']\n\n    });\n\n    filters.push({\n      filter: '/people/person',\n      props: ['date_of_birth', 'gender', 'nationality',\n      //   \"parents\",\n      'place_of_birth', 'places_lived,/people/place_lived/location',\n      //    \"profession\",\n      //   \"religion\",\n      //   \"sibling_s,/people/sibling_relationship/sibling\",\n      'quotations']\n\n    });\n\n    filters.push({\n      filter: '/people/deceased_person',\n      props: ['date_of_death', 'place_of_death']\n\n    });\n\n    var results = {};\n    var cnt = 0;\n\n    var out = {};\n\n    angular.forEach(filters, function (f) {\n\n      _getTopic(freebaseId, f.filter, function (result) {\n\n        angular.forEach(f.props, function (p) {\n\n          arr = p.split(',');\n\n          var propname = f.filter + '/' + arr[0];\n\n          if (!result || !result.property || !result.property[propname]) {\n            console.log('property not available: ' + propname);\n          } else {\n            var val = result.property[propname];\n\n            if (val.valuetype == 'compound') {\n              vals = [];\n              angular.forEach(val.values, function (v) {\n                vals.push(v.property[arr[1]].values[0].text);\n              });\n\n              out['FB_' + arr[0]] = vals;\n            } else {\n\n              vals = [];\n              angular.forEach(val.values, function (v) {\n                vals.push(v.text);\n              });\n              out['FB_' + arr[0]] = vals;\n            }\n\n            if (arr[0] == 'date_of_death' || arr[0] == 'place_of_death' || arr[0] == 'place_of_birth' || arr[0] == 'date_of_birth' || arr[0] == 'gender' || arr[0] == 'nationality') {\n              out['FB_' + arr[0]] = out['FB_' + arr[0]][0];\n            }\n          }\n        });\n\n        cnt += 1;\n\n        if (cnt == filters.length) {\n\n          callback(out);\n        }\n      });\n    });\n  };\n\n  return {\n\n    getImage: function getImage(freebaseId, width, height, callback) {\n\n      // first get image ids\n\n      _getTopic(freebaseId, '/common/topic/image', function (prop) {\n        console.log(prop);\n        var imageId = prop.values[0].id;\n\n        var service_url = 'https://usercontent.googleapis.com/freebase/v1/image';\n\n        var params = {\n          'key': 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE'\n          // maxwidth=225&maxheight=225&mode=fillcropmid\n        };\n        width = width || 225;\n        height = height || 400;\n\n        callback(service_url + imageId + '?mode=fillcropmid&maxwidth=' + width + '&maxheight=' + height);\n\n        // $.getJSON(service_url + imageId + '?callback=?', params, function (response) {\n\n        //    console.log(response);\n        //    callback(response);\n        // });\n      });\n    },\n\n    getText: function getText(node, callback) {\n\n      var prop = '/common/topic/description';\n\n      var service_url = 'https://www.googleapis.com/freebase/v1/topic';\n      var params = {\n        'key': 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE',\n        'filter': prop\n        //  , 'filter': 'suggest'\n      };\n\n      $.getJSON(service_url + node.FB_ID + '?callback=?', params, function (response) {\n        // var out = { results: [], error: undefined };\n        // if (response.result && response.result[q.propname]) {\n        //    out.result = response.result[q.propname];\n        // }\n        // console.log(response);\n\n        if (!response['property']) {\n          console.log('no blurb found for ' + node.Name);\n          callback({});\n        } else {\n\n          console.log(response);\n\n          var blurb = response['property'][prop].values[0].value;\n\n          var allowedLength = 20;\n\n          var indIs = blurb.indexOf(' is ');\n          var indWas = blurb.indexOf(' was ');\n          if (indIs > -1 && (indIs < indWas || indWas == -1)) {\n            indWas = indIs;\n          }\n          if (indWas === -1) {\n            indWas = 0;\n          }\n\n          if ($.inArray('Person', node.labels) == -1) {\n            indWas = 0;\n          }\n\n          var stopSpc = blurb.substring(allowedLength + indWas, blurb.length).indexOf('. ') + 1;\n          var stopCr = blurb.substring(allowedLength + indWas, blurb.length).indexOf('.\\n') + 1;\n\n          var stop = stopCr > 0 && stopCr < stopSpc ? stopCr : stopSpc;\n\n          // console.log(blurb);\n          // console.log(indIs);\n          // console.log(indWas);\n          // console.log(stop);\n\n          var until = stop > 0 ? allowedLength + indWas + stop : blurb.length;\n\n          var shortname = node.Lookup;\n\n          if (shortname.replace(/ /g, '').toLowerCase() == node.Name.toLowerCase()) {\n            shortname = node.name;\n          } else {\n            shortname = shortname.replace(/([A-Z])/g, ' $1').replace(/^./, function (str) {\n              return str.toUpperCase();\n            });\n          }\n\n          var short = (indWas > 0 ? shortname : '') + blurb.substring(indWas, until);\n          var full = blurb.substring(until, blurb.length);\n\n          if (short != full) {\n            callback({\n              'FB_blurb': short.trim(),\n              'FB_blurb_full': full.trim()\n\n            });\n          } else {\n            callback({\n              'FB_blurb': short.trim(),\n              'FB_blurb_full': null\n            });\n          }\n        }\n      });\n    },\n\n    getTopic: function getTopic(freebaseId, callback) {\n\n      _getTopic(freebaseId, callback);\n    },\n\n    getPersonData: function getPersonData(freebaseId, callback) {\n\n      _getPersonData(freebaseId, callback);\n    },\n\n    getCreationData: function getCreationData(freebaseId, callback) {\n\n      getData(freebaseId, creationQueries, callback);\n    },\n\n    getId: function getId(node, callback) {\n\n      var API_KEY = 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE';\n      var service_url = 'https://www.googleapis.com/freebase/v1/search';\n\n      var ispicture = $.inArray('Picture', node.labels);\n\n      var params = {\n        'key': API_KEY,\n        'query': ispicture ? node.Title || node.Name : node.Lookup,\n\n        'limit': 100\n      };\n\n      if ($.inArray('Person', node.labels) > -1) {\n        params.filter = '(any type:/people/person type:/people/deceased_person type:/book/author type:/visual_art/visual_artist )';\n\n        // if ($.inArray(\"Painter\", node.labels) > -1) {\n        //    params.domain = \"/visual_art\";\n        // }\n      } else if ($.inArray('Group', node.labels) > -1 || $.inArray('Period', node.labels) > -1) {\n\n          params.filter = '(any type:/visual_art/art_period_movement type:/architecture/architectural_style  type:/time/event   type:/book/book_subject)';\n        } else if ($.inArray('Provenance', node.labels) > -1) {\n\n          params.filter = '(any type:/people/ethnicity type:/location/country )';\n          //  params.query = node.Name + \" people\";\n        } else if (ispicture) {\n            params.domain = '/visual_art';\n          }\n\n      var out = { id: undefined, error: undefined };\n\n      $.getJSON(service_url + '?callback=?', params, function (response) {\n\n        $(response.result).each(function (i, e) {\n\n          if (e.name === node.Name || e.name == node.Wikipagename || e.name.indexOf(node.Name) > -1 || e.name.indexOf(node.Lookup) > -1) {\n            out = e;\n            return false;\n          }\n          // if (e.notable && (e.notable.name === type || e.notable.name.indexOf('Art') > -1)) {\n          //    out = e.mid;\n          //    return false;\n          // }\n        });\n\n        out.response = response.result;\n\n        callback(out);\n      });\n    }\n  };\n}).directive('freebase', ['freebase.service', 'neo', function (service, neo) {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/node/freebase/node.freebase.html',\n    scope: {\n      node: '=',\n      active: '='\n    },\n    link: function link($scope) {\n\n      var getPersonData = function getPersonData(node, callback) {\n\n        service.getPersonData(node.FB_ID, function (data) {\n\n          $.extend(node, data);\n          if (node.FB_date_of_birth && !node.YearFrom) {\n            node.YearFrom = parseInt(node.FB_date_of_birth.split('-')[0]);\n          }\n          if (node.FB_date_of_death && !node.YearTo) {\n            node.YearTo = parseInt(node.FB_date_of_death.split('-')[0]);\n          }\n          callback(node);\n        });\n      };\n\n      var getBlurb = function getBlurb(node, callback) {\n\n        service.getText(node, function (blurb) {\n\n          $scope.$apply(function () {\n            $.extend(node, blurb);\n            if (node.FB_blurb && !node.Description) {\n              node.Description = node.FB_blurb;\n            }\n            if (node.FB_blurb_full && !node.Text) {\n              node.Text = node.FB_blurb_full;\n            }\n          });\n\n          callback(node);\n        });\n      };\n\n      var getData = function getData(node, blurbOnly) {\n\n        getBlurb(node, function (updated) {\n\n          if ($.inArray('Person', updated.labels) > -1 && !blurbOnly) {\n\n            getPersonData(updated, function (updatedPerson) {\n\n              console.dir(updatedPerson);\n              neo.saveProps(updatedPerson).then(function (nid) {\n                console.log(nid + ' saved');\n              });\n            });\n          } else {\n\n            neo.saveProps(updated).then(function (nid) {\n              console.log(nid + ' saved');\n            });\n          }\n        });\n      };\n\n      $scope.reselect = function (node, mid, name) {\n\n        $scope.clear(node);\n\n        node.FB_ID = mid;\n        node.FB_name = name;\n        getData(node);\n      };\n\n      $scope.clear = function (node) {\n\n        node.FB_ID = null;\n\n        if (node.Text === node.FB_blurb_full) {\n          delete node.Text;\n        }\n\n        if (node.Description === node.FB_blurb) {\n          delete node.Description;\n        }\n\n        if (node.FB_date_of_birth && node.YearFrom == parseInt(node.FB_date_of_birth.split('-')[0])) {\n          delete node.YearFrom;\n        }\n\n        if (node.FB_date_of_death && node.YearTo == parseInt(node.FB_date_of_death.split('-')[0])) {\n          delete node.YearTo;\n        }\n\n        for (var prop in node) {\n          if (prop.indexOf('FB_') == 0) {\n            delete node[prop];\n          }\n        }\n\n        neo.saveProps(node).then(function (nid) {\n          console.log(nid + ' saved');\n        });\n      };\n\n      var loaded = false;\n\n      var getFreebase = function getFreebase() {\n\n        service.getId($scope.node, function (result) {\n\n          $scope.$apply(function () {\n            $scope.disambiguation = result.response;\n            loaded = true;\n          });\n        });\n      };\n\n      $scope.$watch('node', function (node) {\n\n        if (node) {\n\n          loaded = false;\n\n          if ($scope.active) {\n            getFreebase();\n          }\n        }\n      });\n\n      $scope.$watch('active', function (active) {\n\n        if (active && $scope.node && !loaded) {\n\n          getFreebase();\n        }\n      });\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.node.graphpanel', ['neograph.neo', 'neograph.utils']).directive('nodegraphpanel', ['neo', 'utils', function (neo, utils) {\n          return {\n                    replace: true,\n                    restrict: 'E',\n                    templateUrl: 'app/node/graphpanel/node.graphpanel.html',\n                    scope: {\n                              node: '=',\n                              active: '=',\n                              window: '=?',\n                              width: '=?',\n                              height: '=?'\n                    },\n                    link: function link($scope, $element, $attrs) {\n\n                              var network;\n\n                              var graph = {\n                                        nodes: new vis.DataSet(),\n                                        edges: new vis.DataSet()\n                              };\n\n                              $scope.view = utils.newView('NodeGraph', 'NodeGraph');\n\n                              $scope.view.queryGenerator = {\n                                        type: 'nodeGraph',\n                                        options: { node: $scope.node }\n                              };\n\n                              $scope.$watch('node', function (n) {\n                                        $scope.view.queryGenerator.options = { node: n };\n                              });\n\n                              $scope.w = 200;\n                              $scope.h = 200;\n\n                              $scope.$watch('active', function (active) {\n                                        if (active && !network) {\n\n                                                  if ($scope.width && $scope.height) {\n                                                            $scope.w = $scope.width;\n                                                            $scope.h = $scope.height;\n                                                  } else if ($scope.window) {\n                                                            $scope.w = $scope.window.width;\n                                                            $scope.h = $scope.window.height - 170;\n                                                  }\n\n                                                  network = new vis.Network($element.find('.graphContainer')[0], graph, utils.graphOptions);\n                                                  network.setSize($scope.w + 'px', $scope.h + 'px');\n                                                  // fit to screen on resize\n                                                  network.on('resize', function (params) {\n                                                            network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\n                                                  });\n\n                                                  // network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\n                                        }\n                              });\n\n                              $scope.$watch('view.data', function (data) {\n                                        if ($scope.active) {\n                                                  console.log('drawing new graph');\n                                                  graph.nodes.clear();\n                                                  graph.edges.clear();\n                                                  var gArr = utils.toGraphData(data);\n                                                  graph.nodes.add(gArr.nodes);\n                                                  graph.edges.add(gArr.edges);\n                                        }\n                              });\n\n                              $scope.$watch('window', function (w) {\n\n                                        if (network && w) {\n                                                  network.setSize($scope.window.width + 'px', $scope.window.height - 170 + 'px');\n                                                  network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\n                                        }\n                              });\n\n                              $scope.$watch('width', function () {\n\n                                        if (network) {\n                                                  network.setSize($scope.width + 'px', $scope.height - 170 + 'px');\n                                                  network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\n                                        }\n                              });\n                              $scope.$watch('height', function () {\n\n                                        if (network) {\n                                                  network.setSize($scope.width + 'px', $scope.height - 170 + 'px');\n                                                  network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\n                                        }\n                              });\n                    }\n          };\n}]);\n'use strict';\n\nangular.module('node.graphTypes', ['neograph.neo']).directive('graphTypes', function () {\n          return {\n                    restrict: 'E',\n                    templateUrl: 'app/node/graphtypes/node.graphTypes.html',\n                    scope: {\n                              node: '=',\n                              window: '='\n                    },\n\n                    link: function link($scope) {\n\n                              $scope.$watch('node', function (node) {\n\n                                        if (node) {\n\n                                                  var querys = [];\n\n                                                  var Lookup = node.Lookup;\n\n                                                  // if ($.inArray('User', node.labels) > -1 || $.inArray('Picture', node.labels) > -1 || $.inArray('Favourite', node.labels) > -1) {\n                                                  //    querys.push(\n                                                  //                          {\n                                                  //                              name: \"All immediate relationships\",\n                                                  //                              q: \"MATCH (c)-[r]-(d) where ID(c) = \" + node.id + \" return c,d,r\"\n                                                  //                          })\n                                                  // }\n                                                  // else {\n\n                                                  //    querys.push(\n                                                  //                          {\n                                                  //                              name: \"All immediate relationships\",\n                                                  //                              q: \"MATCH (c)-[r]-(d:Global) where ID(c) = \" + node.id + \" return c,d,r\"\n                                                  //                          })\n\n                                                  // }\n\n                                                  if ($.inArray('Provenance', node.labels) > -1) {\n\n                                                            querys.push({\n                                                                      name: 'Provenance',\n                                                                      q: 'MATCH (c:Global:' + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\n                                                            });\n                                                  }\n\n                                                  if ($.inArray('Period', node.labels) > -1) {\n\n                                                            querys.push({\n                                                                      name: 'Period',\n                                                                      q: 'MATCH (c:Global:' + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\n                                                            });\n                                                  }\n\n                                                  if ($.inArray('Theme', node.labels) > -1) {\n\n                                                            querys.push({\n                                                                      name: 'Theme',\n                                                                      q: 'MATCH (c:Global:' + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\n                                                            });\n                                                  }\n\n                                                  if ($.inArray('Person', node.labels) > -1) {\n\n                                                            querys.push({\n                                                                      name: 'Outbound Influence',\n                                                                      //  q: \"MATCH (c {Lookup:'\" + Lookup + \"'})-[r]->(d:Painter)  -[s]->(e:Painter)  -[t]->(f:Painter) return c,d,e,f,r,s,t\",\n                                                                      q: \"MATCH (c {Lookup:'\" + Lookup + \"'})-[r]->(d:Painter) with c,d,r optional  match(d) -[s]->(e:Painter) return c,d,r,s,e \",\n                                                                      connectAll: true\n                                                            });\n\n                                                            querys.push({\n                                                                      name: 'Inbound Influence',\n                                                                      //    q: \"MATCH (c {Lookup:'\" + Lookup + \"'})<-[r]-(d:Painter)  <-[s]-(e:Painter)  <-[t]-(f:Painter) return c,d,e,f,r,s,t\",\n                                                                      q: \"MATCH (c {Lookup:'\" + Lookup + \"'})<-[r]-(d:Painter) with c,d,r optional  match(d) <-[s]-(e:Painter) return c,d,r,s,e \",\n                                                                      connectAll: true\n                                                            });\n                                                  }\n\n                                                  if ($.inArray('Group', node.labels) > -1) {\n\n                                                            querys.push({\n                                                                      name: 'Group',\n                                                                      q: \"match (n {Lookup:'\" + Lookup + \"'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) and not m:Provenance and not p:Provenance return n,r,m,s,p\",\n\n                                                                      connectAll: true\n                                                            });\n                                                  }\n\n                                                  if ($.inArray('Iconography', node.labels) > -1) {\n\n                                                            querys.push({\n                                                                      name: 'Iconography',\n                                                                      q: 'MATCH (c:Global:' + Lookup + \")-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  and not d.Lookup='\" + Lookup + \"' and (d:\" + Lookup + ' or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r',\n\n                                                                      connectAll: true\n                                                            });\n                                                  }\n\n                                                  if (!node.temp.isPicture && node.YearFrom && node.YearTo) {\n\n                                                            var yq = 'MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and ';\n                                                            yq += '((c.YearTo >= ' + node.YearFrom + ' and c.YearTo<= ' + node.YearTo + ') or (c.YearFrom >= ' + node.YearFrom + ' and c.YearFrom<= ' + node.YearTo + '))';\n                                                            yq += 'and ((d.YearTo >= ' + node.YearFrom + ' and d.YearTo<= ' + node.YearTo + ') or (d.YearFrom >= ' + node.YearFrom + ' and d.YearFrom<= ' + node.YearTo + '))';\n                                                            yq += ' return c,d,r';\n                                                            querys.push({\n                                                                      name: 'YearFromYearTo',\n                                                                      q: yq,\n\n                                                                      connectAll: true\n                                                            });\n                                                  }\n\n                                                  angular.forEach(querys, function (query) {\n\n                                                            query.view = node.Lookup + ' - ' + query.name;\n                                                            query.type = 'Graph';\n                                                  });\n\n                                                  $scope.querys = querys;\n                                        } else {\n\n                                                  $scope.querys = [];\n                                        }\n                              });\n                    }\n\n          };\n});\n'use strict';\n\nangular.module('node.imageRelationships', ['neograph.neo']).directive('imageRelationships', ['neo', function (neo) {\n  return {\n    restrict: 'E',\n    templateUrl: '/app/node/imageRelationships/node.imageRelationships.html',\n    scope: {\n      node: '=',\n      query: '=',\n      window: '='\n    },\n\n    link: function link($scope) {\n\n      $scope.$watch('node', function (node) {\n\n        if (node) {\n\n          var querys = [];\n\n          querys.push({\n            name: 'Linked pictures',\n            q: 'MATCH (c)-[r]-(d:Picture) where ID(c) = ' + node.id + ' return d'\n          });\n\n          if (node.YearFrom || node.YearTo) {\n            var yq;\n\n            if (node.YearFrom && node.YearTo) {\n              yq = {\n                q: 'MATCH (c:Picture) where  (c.YearTo >= ' + node.YearTo + ' and c.YearTo<= ' + node.YearTo + ') or (c.YearFrom >= ' + node.YearFrom + ' and c.YearFrom<= ' + node.YearFrom + ') return c'\n              };\n            } else if (node.YearTo) {\n              yq = {\n                q: 'MATCH (c:Picture) where  (c.YearTo = ' + node.YearTo + ' ) or (c.YearFrom = ' + node.YearTo + ' ) return c'\n              };\n            } else if (node.YearFrom) {\n              yq = {\n                q: 'MATCH (c:Picture) where  (c.YearTo = ' + node.YearFrom + ') or (c.YearFrom = ' + node.YearFrom + ' ) return c'\n              };\n            }\n            yq.name = 'Contemporaneous';\n            yq.type = 'Grid';\n\n            yq.preview = yq.q + ' limit 3';\n            querys.push(yq);\n          }\n\n          angular.forEach(node.labels, function (label) {\n\n            if (label != 'Picture' && label != 'Painting') {\n              querys.push({\n                isLabel: true,\n                name: label,\n                q: 'MATCH (c:Picture:' + label + ') return c',\n                preview: 'MATCH (c:Picture:' + label + ')  where ID(c)<>' + node.id + '  return c limit 3',\n                view: label,\n                type: 'Grid',\n                queryGenerator: { id: 'nodeFilter', options: { node: { Lookup: label } } }\n              });\n            }\n          });\n\n          // if (node.YearFrom && node.YearTo) {\n\n          //    var yq = \"MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and \";\n          //    yq += \"((c.YearTo >= \" + node.YearFrom + \" and c.YearTo<= \" + node.YearTo + \") or (c.YearFrom >= \" + node.YearFrom + \" and c.YearFrom<= \" + node.YearTo + \"))\";\n          //    yq += \"and ((d.YearTo >= \" + node.YearFrom + \" and d.YearTo<= \" + node.YearTo + \") or (d.YearFrom >= \" + node.YearFrom + \" and d.YearFrom<= \" + node.YearTo + \"))\";\n          //    yq += \" return c,d,r\";\n          //    querys.push({\n          //        name: 'YearFromYearTo',\n          //        q: yq\n\n          //     ,\n          //        connectAll: true\n          //    });\n\n          // }\n\n          $scope.querys = querys;\n\n          angular.forEach(querys, function (query) {\n\n            neo.getGraph(query.preview || query.q).then(function (g) {\n\n              query.hasData = !$.isEmptyObject(g.nodes);\n\n              query.data = g;\n            });\n          });\n\n          //   console.log(querys);\n        } else {\n\n            $scope.querys = [];\n          }\n      });\n    }\n\n  };\n}]);\n'use strict';\n\n(function () {\n  'use strict';\n\n  controller.$inject = [\"neo\"];\n  angular.module('neograph.node.images', ['neograph.neo']).controller('NodeImagesCtrl', controller);\n\n  function controller(neo) {\n    $scope.images = [];\n\n    if ($stateParams.node) {\n      nodeService.get($stateParams.node, true).then(function (node) {\n        $scope.node = node;\n      });\n    }\n\n    var loaded = false;\n\n    // load images on active change or on node change if active\n    $scope.$watch('active', function (active) {\n\n      if ($scope.node && active && !loaded) {\n        getImages();\n      }\n    });\n\n    $scope.$watch('node', function (node) {\n      loaded = false;\n      if (!$scope.active) {\n        $scope.images = [];\n      }\n      if (node && $scope.active) {\n        getImages();\n      }\n    });\n\n    var getImages = function getImages() {\n\n      neo.getImages($scope.node).then(function (images) {\n        $scope.images = images;\n        loaded = true;\n      });\n    };\n\n    $scope.openGridTab = function (node) {\n\n      $scope.publish('query', {\n        view: node.Lookup,\n        type: 'Grid',\n        queryGenerator: { id: 'nodeFilter', options: { node: node } }\n      });\n    };\n  }\n})();\n'use strict';\n\nangular.module('neograph.node.multiple', ['neograph.neo', 'neograph.utils']).directive('multiple', ['neo', 'utils', function (neo, utils) {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/node/multiple/node.multiple.html',\n    scope: {\n      nodes: '='\n    },\n    link: function link($scope) {\n\n      $scope.$watch('nodes', function (nodes) {\n\n        if (nodes) {\n          var allLabels = nodes.map(function (node) {\n            return node.labels;\n          });\n\n          $scope.labels = allLabels.shift().filter(function (v) {\n            return allLabels.every(function (a) {\n              return a.indexOf(v) !== -1;\n            });\n          });\n\n          $scope.originalLabels = angular.copy($scope.labels); // store for saving so we know what to change\n        }\n      });\n\n      $scope.addLabel = function (item) {\n\n        if ($scope.labels.indexOf(item.Label) === -1) {\n          $scope.labels.push(item.Label);\n        }\n      };\n      $scope.removeLabel = function (label) {\n\n        var ind = $scope.labels.indexOf(label);\n        if (ind > -1) {\n          $scope.labels.splice(ind, 1);\n        }\n      };\n\n      $scope.save = function () {\n        neo.saveMultiple({\n          nodes: $scope.nodes,\n          labels: $scope.labels,\n          originalLabels: $scope.originalLabels\n        });\n      };\n\n      $scope.restore = function () {\n        var restored = [];\n        angular.forEach($scope.nodes, function (node) {\n          neo.restoreNode(node).then(function () {\n            restored.push(node);\n            if (restored.length === $scope.nodes.length) {\n              $scope.publish('restored', { selection: { nodes: restored } });\n              $scope.selection.multiple = undefined;\n              $scope.tabs = [];\n            }\n          });\n        });\n      };\n\n      $scope.delete = function () {\n        var deleted = [];\n        angular.forEach($scope.nodes, function (node) {\n          neo.deleteNode(node).then(function () {\n            deleted.push(node);\n            if (deleted.length === $scope.nodes.length) {\n              $scope.publish('deleted', { selection: { nodes: deleted } });\n              $scope.selection.multiple = undefined;\n              $scope.tabs = [];\n            }\n          });\n        });\n      };\n\n      $scope.destroy = function () {\n        var deleted = [];\n        angular.forEach($scope.nodes, function (node) {\n          neo.destroyNode(node).then(function () {\n            deleted.push(node);\n            if (deleted.length === $scope.nodes.length) {\n              $scope.publish('deleted', { selection: { nodes: deleted } });\n              $scope.selection.multiple = undefined;\n              $scope.tabs = [];\n            }\n          });\n        });\n      };\n\n      // $scope.selection.multiple = new (function (nodes, labels) {\n      //    var self = this;\n      //    this.nodes = nodes;\n      //    this.labels = labels;\n\n      // })(params.selection.nodes, labels);\n    }\n  };\n}]);\n'use strict';\n\n(function () {\n  'use strict';\n\n  controller.$inject = [\"nodeService\", \"session\", \"utils\", \"$scope\", \"$stateParams\"];\n  angular.module('neograph.node.properties', ['neograph.node.service', 'neograph.session', 'neograph.utils']).controller('EditPropertiesCtrl', controller);\n\n  function controller(nodeService, session, utils, $scope, $stateParams) {\n    if ($stateParams.node) {\n      nodeService.get($stateParams.node, true).then(function (node) {\n        $scope.node = node;\n      });\n    }\n\n    $scope.deleteNode = function (n) {\n      nodeService.delete(n).then(function (deleted) {\n        $scope.selection.selectedNode = deleted;\n        // this assumes that the current view is not of deleted items, otherwise this would be inconsistent\n        // let view handle its own data ?\n        delete $scope.activeView.data.nodes[n.id];\n        $scope.publish('deleted', { selection: { nodes: [n] } });\n      });\n    };\n\n    $scope.destroyNode = function (n) {\n      nodeService.destroy(n).then(function (deleted) {\n        $scope.selection.selectedNode = undefined;\n        // this assumes that the current view is not of deleted items, otherwise this would be inconsistent\n        // let view handle its own data ?\n        delete $scope.activeView.data.nodes[n.id];\n        $scope.publish('deleted', { selection: { nodes: [n] } });\n      });\n    };\n\n    $scope.saveNode = function (n) {\n      nodeService.save(n, session.user).then(function (node) {\n        $scope.node = node;\n        var newData = {};\n        newData[node.id] = node;\n        $scope.publish('dataUpdate', newData);\n        // if type, refresh types\n        if (node.class == 'Type') {\n          utils.refreshTypes();\n        }\n        $(node.temp.links).each(function (i, e) {\n          e.editing = undefined;\n        });\n      });\n    };\n\n    $scope.restoreNode = function (n) {\n      nodeService.restore(n).then(function (node) {\n        $scope.node = node;\n        var newData = {};\n        newData[node.id] = node;\n        $scope.publish('dataUpdate', newData);\n      });\n    };\n\n    // tie label value to lookup if empty or the same already\n    $scope.$watch('node.lookup', function (lookup, beforechange) {\n      if (lookup) {\n        if ($scope.node.label != undefined && $scope.node.label.trim() == '' || $scope.node.label == beforechange) {\n          $scope.node.label = lookup;\n        }\n      }\n    });\n\n    $scope.nodeTypes = [];\n    $scope.$watchCollection('node.labels', function (labels) {\n      if (labels) {\n        (function () {\n          var selectedTypes = [];\n          angular.forEach($scope.node.labels, function (l) {\n            if (utils.types[l]) {\n              selectedTypes.push({ lookup: l, class: 'Type' });\n            }\n          });\n          $scope.nodeTypes = selectedTypes;\n          if (!$scope.node.class && $scope.nodeTypes.length === 1) {\n            $scope.node.class = $scope.nodeTypes[0].lookup; // for types the lookup will always be the label\n          }\n        })();\n      }\n    });\n\n    // Can be called from clicking label,\n    // in which case item is text value,\n    // or from the typeahead in which case it is an object with Lookup property\n    $scope.setType = function (item) {\n      if (utils.isType(item.label)) {\n        $scope.node.class = item.label;\n      }\n    };\n\n    $scope.$watch('newPredicate', function (v) {\n      if (v) {\n        $scope.addRelationship({ lookup: v.toUpperCase().replace(/ /g, '_') });\n      }\n    });\n\n    $scope.addRelationship = function (item) {\n      var p = predicateFactory.create({ lookup: item.lookup, direction: 'out' }); // currently no way to select 'in' relationships\n      $scope.node.relationships = $scope.node.relationships || {};\n      if (!$scope.node.relationships[p.toString()]) {\n        $scope.node.relationships[p.toString()] = { predicate: p, items: [] };\n      }\n    };\n  }\n})();\n'use strict';\n\nangular.module('neograph.node.relationships', ['neograph.node.service', 'neograph.session', 'neograph.utils', 'neograph.models.predicate']).controller('EditRelationshipsCtrl', [\"nodeService\", \"session\", \"utils\", \"$scope\", \"$stateParams\", \"predicateFactory\", function (nodeService, session, utils, $scope, $stateParams, predicateFactory) {\n  if ($stateParams.node) {\n    nodeService.get($stateParams.node, true).then(function (node) {\n      $scope.node = node;\n    });\n  }\n\n  $scope.$watch('node', function (node) {\n    if (node) {\n      node.labelled = node.labelled || [];\n      $('.labelEdit input').val('');\n      $scope.deleted = node.labels.indexOf('Deleted') > -1;\n    }\n  });\n\n  $scope.nodeTypes = [];\n\n  $scope.$watch('newPredicate', function (v) {\n    if (v) {\n      $scope.addRelationship({ lookup: v.toUpperCase().replace(/ /g, '_') });\n    }\n  });\n\n  $scope.addRelationship = function (item) {\n    var p = predicateFactory.create({ lookup: item.lookup, direction: 'out' }); // currently no way to select 'in' relationships\n    $scope.node.relationships = $scope.node.relationships || {};\n    if (!$scope.node.relationships[p.toString()]) {\n      $scope.node.relationships[p.toString()] = { predicate: p, items: [] };\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.node').controller('SearchCtrl', [\"$scope\", \"$state\", \"nodeService\", function ($scope, $state, nodeService) {\n  var vm = this;\n  vm.node = undefined;\n  $scope.$watch('vm.node', function (n) {\n    if (n && n.label) {\n      $state.go('admin.node', { node: n.label });\n    }\n  });\n\n  vm.newNode = newNode;\n  vm.addNodeToGraph = addNodeToGraph;\n\n  function addNodeToGraph(node) {\n\n    if (!$scope.views.Graph.data.nodes[node.id]) {\n      neo.getRelationships(node.id).then(function (g) {\n\n        var newData = {\n          edges: g.edges,\n          nodes: {}\n        };\n        newData.nodes[node.id] = node;\n\n        $scope.publish('dataUpdate', newData);\n\n        if (node.id === $scope.selection.selectedNode.id) {\n          $scope.publish('selected', { selection: { nodes: [node.id] } });\n          $scope.publish('focus', node.id);\n        }\n      });\n      $scope.activeView = graphView;\n    }\n  };\n\n  function newNode() {\n\n    var newNode = {\n      id: -1,\n      labels: [],\n      Type: '',\n      temp: {\n        tabs: ['Properties']\n      }\n    };\n\n    if (vm.nodeLookupText && (!vm.selection.selectedNode || vm.nodeLookupText != vm.selection.selectedNode.Lookup)) {\n      newNode.lookup = vm.nodeLookupText;\n    }\n    vm.selection.selectedNode = newNode;\n    vm.tabs = $scope.selection.selectedNode.temp.tabs;\n    vm.selectedTab = 'Properties';\n  }\n}]);\n'use strict';\n\nangular.module('neograph.node.wikipedia', ['neograph.neo']).factory('wikiservice', function () {\n  var wikiTabs = function wikiTabs(data, page) {\n    var tabs = [];\n    if (data.parse) {\n      var $wikiDOM = $('<document>' + data.parse.text['*'] + '</document>');\n      // Handle redirects\n      if ($wikiDOM.find('ul.redirectText').length > 0) {\n        tabs = { redirect: $wikiDOM.find('ul.redirectText li a').attr('title') };\n      } else {\n        var images = $('<div></div>');\n        $wikiDOM.find('.image').each(function (i, e) {\n          $(e).attr('href', $(e).attr('href').replace('/wiki/', 'https://en.wikipedia.org/wiki/' + page.replace(' ', '_') + '#/media/')).attr('target', '_blank').css({ 'padding-right': '5px', 'padding-bottom': '5px' });\n        });\n        $wikiDOM.find('.image').appendTo(images);\n        $wikiDOM.find('p').css({ 'margin-bottom': '4px', 'clear': 'left' });\n        $wikiDOM.find('p,.thumb,.thumbinner').css({ 'width': '100%' });\n        $wikiDOM.find('h2,h3,h4').css({ 'margin-top': '4px', 'margin-bottom': '2px', 'float': 'left', 'clear': 'left', 'width': '100%', 'overflow': 'hidden' });\n        $wikiDOM.find('#toc').remove();\n        $wikiDOM.find('.editsection').remove();\n        $wikiDOM.find('.magnify').remove();\n        $wikiDOM.find('.reflist').remove();\n        $wikiDOM.find('img').css({ 'display': 'block', 'float': 'left', 'margin-right': '3px', 'margin-bottom': '3px' });\n        $wikiDOM.find('.thumb,.thumbinner').css({ 'float': 'left', 'margin-right': '3px', 'margin-bottom': '3px' });\n        $wikiDOM.find('.thumbcaption').css({ 'font-size': '11px' });\n        $wikiDOM.find('.plainlinks').remove();\n        $wikiDOM.find('#navbox').remove();\n        $wikiDOM.find('.rellink').remove();\n        $wikiDOM.find('.references').remove();\n        $wikiDOM.find('.IPA').remove();\n        $wikiDOM.find('sup').remove();\n        $wikiDOM.find('dd,blockquote').css({ 'margin': '0px', 'width': '', 'font-size': '11px', 'margin-bottom': '10px', 'margin-top': '7px' });\n        $wikiDOM.find('blockquote p').css({ 'font-size': '11px' });\n        // NB this has interesting stuff in it\n        $wikiDOM.find('.navbox, .vertical-navbox').remove();\n        $wikiDOM.find('#persondata').remove();\n        $wikiDOM.find('#Footnotes').parent().remove();\n        $wikiDOM.find('#References').parent().remove();\n        $wikiDOM.find('#Bibliography').parent().remove();\n        $wikiDOM.find('.refbegin').remove();\n        $wikiDOM.find('.dablink').remove();\n        // A bit too radical?\n        $wikiDOM.find('small').remove();\n        $wikiDOM.find(\"img[alt='Wikisource-logo.svg'], img[alt='About this sound'], img[alt='Listen']\").remove();\n        $wikiDOM.find('.mediaContainer').remove();\n        // Remove links - (leave external links ?)\n        $wikiDOM.find('a').each(function () {\n          $(undefined).replaceWith($(undefined).html());\n        });\n        $wikiDOM.find('.gallery').find('p').css({ 'width': '', 'font-size': '11px', 'float': 'left', 'clear': 'left' });\n        $wikiDOM.find('.gallery').find('.thumb').css({ 'width': '' });\n        $wikiDOM.find('.gallerybox').css('height', '220px');\n        $wikiDOM.find('.gallerybox').css('float', 'left');\n        $wikiDOM.find('table').css({ 'background': 'none', 'width': '', 'max-width': '', 'color': '' });\n        $wikiDOM.find('.gallery').remove();\n        $wikiDOM.find('#gallery').parent().remove();\n        $wikiDOM.find('#notes').parent().remove();\n        $wikiDOM.find('#sources').parent().remove();\n        // Radical - remove all tables\n        $wikiDOM.find('table').remove();\n        $wikiDOM.find('h1,h2,h3,h4').next().css({ 'clear': 'left' });\n        $wikiDOM.find('dl').remove();\n        $wikiDOM.find('.thumb').remove();\n        $wikiDOM.find('ul,.cquote').css({ 'float': 'left', 'clear': 'left' });\n        $wikiDOM.find('.infobox, .vcard').remove();\n        $wikiDOM.find('.thumbimage').css({ 'max-width': '150px', 'height': 'auto' });\n        $wikiDOM.find('.mw-editsection').remove();\n        $wikiDOM.html($wikiDOM.html().replace('()', ''));\n        $wikiDOM.html($wikiDOM.html().replace('(; ', '('));\n        $wikiDOM.find('h2').css({ 'cursor': 'pointer', 'color': 'rgba(0,85,128,1)', 'font-size': '20px' });\n        $wikiDOM.find('h3').css({ 'font-size': '18px' });\n        $wikiDOM.find('#Gallery').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#See_also').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#Notes').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#External_links').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#Selected_works').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#Sources').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#Other_reading').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#Further_reading').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#Resources').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#Further_reading_and_sources').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#List_of_paintings').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#Self-portraits').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#Selected_paintings').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#References_and_sources').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#Partial_list_of_works').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('#Notes_and_references').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('[id^=Selected_works]').parent().nextUntil('h2').andSelf().remove();\n        $wikiDOM.find('[id^=Books]').parent().nextUntil('h2').andSelf().remove();\n\n        var $introTab = $('<div></div>');\n        $wikiDOM.find('p:first').nextUntil('h2').andSelf().appendTo($introTab);\n        if ($introTab.text().indexOf('Redirect') === -1 && $introTab.text().indexOf('may refer to') === -1) {\n          $introTab.find('ul').remove();\n        }\n        if ($introTab.html()) {\n          tabs.push({\n            header: 'Summary',\n            content: $introTab.html().replace('/; /g', '')\n          });\n        }\n\n        $wikiDOM.find('h2').each(function (i, e) {\n          var $tab = $('<div></div>');\n          $(e).nextUntil('h2').appendTo($tab);\n          if ($tab.html()) {\n            tabs.push({\n              header: $(e).text(),\n              content: $tab.html()\n            });\n          }\n        });\n\n        if (images.html()) {\n          images.find('img').css({ 'width': '250px', 'marginBottom': '5px' });\n          tabs.push({\n            header: 'Images',\n            content: images.html()\n          });\n        }\n      }\n    }\n    return tabs;\n  };\n\n  var getWiki = function getWiki(page, callback) {\n    $.getJSON('http://en.wikipedia.org/w/api.php?action=parse&format=json&callback=?', {\n      page: page,\n      prop: 'text',\n      uselang: 'en'\n    }, function (data) {\n      var tabs = wikiTabs(data, page);\n      if (tabs.redirect) {\n        getWiki(tabs.redirect, callback);\n      } else {\n        callback(tabs);\n      }\n    });\n  };\n\n  return {\n    getPage: function getPage(page, callback) {\n      return getWiki(page, callback);\n    }\n  };\n}).directive('wikipedia', [\"wikiservice\", \"neo\", function (wikiservice, neo) {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/node/wikipedia/node.wikipedia.html',\n    scope: {\n      node: '=',\n      window: '=',\n      active: '='\n    },\n    link: function link($scope, $element) {\n      $scope.tabs = [];\n\n      $scope.setActiveTab = function (tab) {\n        $scope.activeTab = tab;\n      };\n\n      var loaded = false;\n      $scope.$watch('node', function (node) {\n        if (node) {\n          loaded = false;\n          $scope.page = node.Wikipagename || node.Name || node.Title;\n        }\n      });\n\n      $scope.savePage = function () {\n        $scope.node.Wikipagename = $scope.page;\n        neo.saveWikipagename($scope.node).then(function (node) {\n          return $scope.page = node.Wikipagename;\n        });\n      };\n\n      var getPage = function getPage() {\n        wikiservice.getPage($scope.page, function (tabs) {\n          $scope.tabs = tabs;\n          $scope.activeTab = $scope.tabs[0];\n          $scope.$digest();\n          $($element).find('.wikidropdown').dropdown();\n          loaded = true;\n        });\n      };\n\n      $scope.$watch('page', function (page) {\n        if (page && $scope.active) {\n          getPage();\n        } else {\n          $scope.tabs = [];\n        }\n      });\n\n      $scope.$watch('active', function (active) {\n        if ($scope.page && active && !loaded) {\n          getPage();\n        }\n      });\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.query.generator.favouritesFilter', ['neograph.neo']).directive('favouritesFilter', [\"neo\", function (neo) {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/query/generator/favouritesFilter.html',\n    scope: {\n      options: '=',\n      generated: '='\n    },\n    link: function link($scope, $element, $attrs) {\n      $scope.filters = [];\n      $scope.node = {};\n      var labels = [];\n      $scope.$watch('options', function (options) {\n        if (options) {\n          $scope.node = options.user;\n        }\n      });\n\n      $scope.$watch('node', function (user) {\n        load();\n      });\n\n      var load = function load() {\n        if ($scope.node) {\n          labels = [$scope.node.Lookup, 'Favourite'];\n          getFilters();\n          $scope.enabledFilters = [];\n          $scope.process();\n        }\n      };\n\n      var getFilters = function getFilters() {\n        if (labels && labels.length) {\n          var labelQuery = 'match (a:' + labels.join(':') + ') - [] -> (b) return distinct(LABELS(b))';\n          neo.getDistinctLabelsQuery(labelQuery).then(function (l) {\n            // remove filter for this node as it is duplicating\n            angular.forEach(labels, function (lab) {\n              l.splice($.inArray(lab, l), 1);\n            });\n            $scope.filters = l;\n          });\n        }\n      };\n\n      $scope.process = function (labs) {\n        if ($scope.node) {\n          labs = labs || [];\n          var b = 'b';\n          if (labs.length) {\n            b += ':' + labs.join(':');\n          }\n          var q = 'match (a:' + labels.join(':') + ') - [] -> (' + b + ')';\n          $scope.generated = q + ' return b';\n          if (labs.length) {\n            neo.getDistinctLabelsQuery(q + '  return distinct(LABELS(b))').then(function (l) {\n              $scope.enabledFilters = l;\n            });\n          } else {\n            $scope.enabledFilters = [];\n          }\n        }\n      };\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.query.generator.nodeFilter', ['neograph.neo']).directive('nodeFilter', [\"neo\", function (neo) {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/query/generator/nodeFilter.html',\n    scope: {\n      options: '=',\n      generated: '=',\n      nodechanged: '&?'\n    },\n    link: function link($scope) {\n      $scope.filters = [];\n      $scope.node = {};\n      var labels = [];\n\n      var getFilters = function getFilters() {\n        if (labels && labels.length) {\n          neo.getDistinctLabels(labels).then(function (l) {\n            // Remove filter for this node as it is duplicating\n            labels.forEach(function (lab) {\n              l.splice(lab.indexOf(l), 1);\n            });\n            $scope.filters = l;\n          });\n        }\n      };\n\n      var load = function load() {\n        if ($scope.node) {\n          labels = [$scope.node.label, 'Picture'];\n          getFilters();\n          $scope.enabledFilters = [];\n          $scope.process();\n        }\n      };\n\n      $scope.$watch('options', function (options) {\n        $scope.node = options.node;\n      });\n\n      $scope.$watch('node', function (node) {\n        if ($scope.nodechanged) {\n          $scope.nodechanged({ node: node });\n        }\n        load();\n      });\n\n      $scope.openNode = function () {\n        if ($scope.node) {\n          $scope.publish('selected', { selection: { nodes: [$scope.node] } });\n        }\n      };\n\n      $scope.process = function (labs) {\n        if ($scope.node) {\n          if (!labs || !labs.length) {\n            labs = labels;\n          } else {\n            labs = labs.concat(labels);\n          }\n          $scope.generated = '\\n              match (a:' + labs.join(':') + ') return a \\n              order by a.Status desc limit 500\\n              ';\n          if (labs != labels) {\n            neo.getDistinctLabels(labs).then(function (l) {\n              $scope.enabledFilters = l;\n            });\n          } else {\n            $scope.enabledFilters = [];\n          }\n        }\n      };\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.query.generator.nodeGraph', ['neograph.neo']).directive('nodeGraph', [\"neo\", function (neo) {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/query/generator/nodeGraph.html',\n    scope: {\n      options: '=',\n      generated: '=',\n      nodechanged: '&?'\n    },\n    link: function link($scope) {\n      $scope.querys = [];\n      $scope.selected = '';\n      $scope.node = {};\n      $scope.$watch('options', function (options) {\n        $scope.node = options.node;\n      });\n\n      $scope.$watch('selected', function (sel) {\n        if (sel && sel.q) {\n          $scope.generated = sel.q;\n        }\n      });\n\n      $scope.$watch('node', function (node) {\n        if (node && node.id) {\n          if ($scope.nodechanged) {\n            $scope.nodechanged({ node: node });\n          }\n          neo.getNode(node.id, false).then(function (loaded) {\n            getQuerys(loaded);\n          });\n        }\n      });\n\n      $scope.openNode = function () {\n        if ($scope.node) {\n          $scope.publish('selected', { selection: { nodes: [$scope.node] } });\n        }\n      };\n\n      function getQuerys(node) {\n        if (node) {\n          (function () {\n            var querys = [];\n            var Lookup = node.Lookup;\n\n            querys.push({\n              name: 'All immediate relationships',\n              q: 'MATCH (c)-[r]-(d:Global) where ID(c) = ' + node.id + ' return c,d,r'\n            });\n\n            querys.push({\n              name: 'Self',\n              q: 'MATCH (c:' + node.Label + ')-[r]-(d:' + node.Label + ') return c,d,r'\n            });\n\n            if (node.labels.indexOf('Provenance') > -1) {\n              querys.push({\n                name: 'Provenance',\n                q: '\\n                  MATCH (c:Global:' + Lookup + ')-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) \\n                  and not d.Lookup=\\'' + Lookup + '\\' \\n                  and not c.Lookup=\\'' + Lookup + '\\'  return c,d,r\\n                  '\n              });\n            }\n\n            if (node.labels.indexOf('Period') > -1) {\n              querys.push({\n                name: 'Period',\n                q: '\\n                  MATCH (c:Global:' + Lookup + ')-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) \\n                  and not d.Lookup=\\'' + Lookup + '\\' and not c.Lookup=\\'' + Lookup + '\\'  return c,d,r\\n                  '\n              });\n            }\n\n            if (node.labels.indexOf('Theme') > -1) {\n              querys.push({\n                name: 'Theme',\n                q: '\\n                  MATCH (c:Global:' + Lookup + ')-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) \\n                  and not d.Lookup=\\'' + Lookup + '\\' and not c.Lookup=\\'' + Lookup + '\\'  return c,d,r\\n                  '\n              });\n            }\n\n            if (node.labels.indexOf('Person') > -1) {\n              querys.push({\n                name: 'Outbound Influence',\n                q: '\\n                  MATCH (c {Lookup:\\'' + Lookup + '\\'})-[r]->(d:Painter) \\n                  with c,d,r optional  match(d) -[s]->(e:Painter) return c,d,r,s,e ',\n                connectAll: true\n              });\n              querys.push({\n                name: 'Inbound Influence',\n                q: '\\n                  MATCH (c {Lookup:\\'' + Lookup + '\\'})<-[r]-(d:Painter) \\n                  with c,d,r optional  match(d) <-[s]-(e:Painter) return c,d,r,s,e \\n                  ',\n                connectAll: true\n              });\n            }\n\n            if (node.labels.indexOf('Group') > -1) {\n              querys.push({\n                name: 'Group',\n                q: '\\n                match (n {Lookup:\\'' + Lookup + '\\'}) -[r]-(m:Global) -[s]-(p:Global) \\n                where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) \\n                and (m:Painter or m:Group) and (p:Painter or p:Group) \\n                and not m:Provenance and not p:Provenance return n,r,m,s,p\\n                ',\n                connectAll: true\n              });\n            }\n\n            if (node.labels.indexOf('Iconography') > -1) {\n              querys.push({\n                name: 'Iconography',\n                q: '\\n                MATCH (c:Global:' + Lookup + ')-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  \\n                and not d.Lookup=\\'' + Lookup + '\\' and (d:' + Lookup + ' or d:Provenance or d:Group \\n                or d:Iconography or d:Place) return c,d,r\\n                ',\n                connectAll: true\n              });\n            }\n\n            if (node.YearFrom && node.YearTo) {\n              querys.push({\n                name: 'YearFromYearTo',\n                q: '\\n                MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and \\n                (\\n                  (c.YearTo >= ' + node.YearFrom + ' and c.YearTo<= ' + node.YearTo + ') \\n                  or (c.YearFrom >= ' + node.YearFrom + ' and c.YearFrom<= ' + node.YearTo + ')\\n                )\\n                and \\n                (\\n                  (d.YearTo >= ' + node.YearFrom + ' and d.YearTo<= ' + node.YearTo + ') \\n                  or (d.YearFrom >= ' + node.YearFrom + ' and d.YearFrom<= ' + node.YearTo + ')\\n                )\\n                return c,d,r\\n               ',\n                connectAll: true\n              });\n            }\n\n            var prevselection = $scope.selected.name;\n\n            $scope.querys = querys;\n            $scope.querys.forEach(function (e) {\n              if (e.name === prevselection) {\n                $scope.selected = e;\n              }\n            });\n          })();\n        }\n      }\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.query.generator', ['neograph.query.generator.favouritesFilter', 'neograph.query.generator.nodeFilter', 'neograph.query.generator.nodeGraph']);","angular.module('neograph.query.graph', ['ui.router', 'neograph.models.node'])\r\n .factory('graphService', nodeFactory => {\r\n   const graphNodeFromNeoNode = neoNode => {\r\n     neoNode = nodeFactory.create(neoNode);\r\n     const type = neoNode.class;\r\n     const yf = parseInt(neoNode.yearFrom, 10);\r\n     const yt = parseInt(neoNode.yearTo, 10);\r\n     let y = yt;\r\n     if (yf && yt) {\r\n       y = yt - ((yt - yf) / 2);\r\n     }\r\n     let level = 0;\r\n     const startYear = 1400;\r\n     const endYear = 2000;\r\n     const step = 5;\r\n     let cnt = 1;\r\n     for (let i = startYear; i < endYear; i += step) {\r\n       if (y >= i && y < i + step) {\r\n         level = cnt;\r\n       }\r\n       cnt += 1;\r\n     }\r\n     if (y > endYear) {\r\n       level = cnt;\r\n     }\r\n     const node = {\r\n       id: neoNode.id,\r\n       label: neoNode.label || neoNode.lookup,\r\n       size: neoNode.status / 10,\r\n       group: neoNode.class,\r\n       mass: type === 'Group' ? 0.5 : 1,\r\n       radius: neoNode.isPerson() ? neoNode.status : 1,\r\n       // for hiearchichal layout,\r\n       level,\r\n       borderWidth: 0\r\n     };\r\n\r\n     const image = (type === 'Painting' || type === 'Picture') ?\r\n      neoNode.temp.thumbUrl : null;\r\n\r\n     if (image) {\r\n       node.image = image;\r\n       node.shape = 'image';\r\n     } else if (type === 'Provenance') {\r\n       node.fontSize = 50;\r\n       node.fontColor = 'lightgray';\r\n       node.color = 'transparent';\r\n     } else if (type === 'Iconography' || type === 'Place') {\r\n       node.shape = 'ellipse';\r\n     } else if (type === 'Quotation') {\r\n       node.shape = 'box';\r\n       node.color = 'transparent';\r\n       node.label = neoNode.text;\r\n     } else if (type === 'User') {\r\n       node.shape = 'star';\r\n       node.size = 20;\r\n     } else if (type === 'Link') {\r\n       node.label = neoNode.name;\r\n       node.shape = 'box';\r\n       node.color = 'transparent';\r\n     } else if (neoNode.isPerson()) {\r\n       node.shape = 'dot';\r\n     } else if (neoNode.isProperty()) {\r\n       node.shape = 'circle';\r\n     } else {\r\n       node.shape = 'box';\r\n     }\r\n\r\n     node.color = { background: node.color || '#97C2FC', border: 'transparent' };\r\n     if (neoNode.isProperty()) {\r\n       node.color.background = 'lightgreen';\r\n     }\r\n     return node;\r\n   };\r\n\r\n   const graphEdgeFromNeoEdge = neoEdge => {\r\n     const type = neoEdge.type;\r\n     const symmetrical = type === 'ASSOCIATED_WITH';\r\n     const hideEdgeLabel =\r\n            type === 'BY' ||\r\n            type === 'INFLUENCES' ||\r\n            type === 'INSPIRES' ||\r\n            type === 'DEALS_WITH' ||\r\n            type === 'PART_OF' ||\r\n            type === 'MEMBER_OF' ||\r\n            type === 'ASSOCIATED_WITH' ||\r\n            type === 'ACTIVE_DURING' ||\r\n            type === 'FROM' ||\r\n            type === 'DEVELOPS' ||\r\n            type === 'LEADS' ||\r\n            type === 'FOUNDS' ||\r\n            type === 'DEPICTS' ||\r\n            type === 'WORKS_IN' ||\r\n            type === 'STUDIES' ||\r\n            type === 'STUDIES_AT' ||\r\n            type === 'TEACHES' ||\r\n            type === 'TEACHES_AT';\r\n\r\n     let colour;\r\n     switch (type) {\r\n       case 'FROM':\r\n         colour = '#EEE';\r\n         break;\r\n       case 'INFLUENCES':\r\n         colour = 'pink';\r\n         break;\r\n       case 'TEACHES':\r\n       case 'TEACHES_AT':\r\n       case 'PROPERTY':\r\n         colour = 'green';\r\n         break;\r\n       default:\r\n         colour = 'blue';\r\n     }\r\n\r\n     const hideEdge = type === 'FROM';\r\n     const edge = {\r\n       id: neoEdge.id,\r\n       from: neoEdge.startNode,\r\n       to: neoEdge.endNode,\r\n       label: (\r\n         type !== 'EXTENDS' &&\r\n         type !== 'PROPERTY' &&\r\n         type !== 'INFLUENCES' &&\r\n         type !== 'ASSOCIATED_WITH'\r\n         ) ? type.toLowerCase() : null,\r\n       fontColor: 'blue',\r\n       color: colour,\r\n       opacity: hideEdge ? 0 : 1, // type === \"INFLUENCES\" ? 1 : 0.7,\r\n       style: symmetrical ? 'dash-line' : 'arrow', // arrow-center' ,\r\n       type: ['curved'],\r\n       labelAlignment: 'line-center'\r\n     };\r\n     return edge;\r\n   };\r\n\r\n\r\n   return {\r\n     defaultEdgeType: (fromType, toType) => {\r\n       if (toType === 'Provenance') {\r\n         return 'FROM';\r\n       } else if (toType === 'Painter') {\r\n         return 'INFLUENCES';\r\n       }\r\n       return 'ASSOCIATED_WITH';\r\n     },\r\n     options: {\r\n       edges: { widthSelectionMultiplier: 4 },\r\n       hierarchicalLayout: {\r\n         enabled: false,\r\n         levelSeparation: 10, // make this inversely proportional to number of nodes\r\n         nodeSpacing: 200,\r\n         direction: 'UD', //LR\r\n                //    layout: \"hubsize\"\r\n       },\r\n       dataManipulation: {\r\n         enabled: true,\r\n         initiallyVisible: true\r\n       },\r\n            // stabilize: true,\r\n            // stabilizationIterations: 1000,\r\n       physics: {\r\n         barnesHut: {\r\n           enabled: true,\r\n           gravitationalConstant: -6000,\r\n           centralGravity: 1,\r\n           springLength: 20,\r\n           springConstant: 0.04,\r\n           damping: 0.09\r\n         },\r\n         repulsion: {\r\n           centralGravity: 0.1,\r\n           springLength: 0.5,\r\n           springConstant: 0.05,\r\n           nodeDistance: 100,\r\n           damping: 0.09\r\n         },\r\n         hierarchicalRepulsion: {\r\n           enabled: false,\r\n           centralGravity: 0,\r\n           springLength: 270,\r\n           springConstant: 0.01,\r\n           nodeDistance: 300,\r\n           damping: 0.09\r\n         }\r\n       },\r\n       onDelete: (data, callback) => {\r\n       }\r\n     },\r\n     // Transforms neo graph data object into object\r\n     // containing array of nodes and array of edges renderable by vis network\r\n     toGraphData: g => ({\r\n       nodes: Object.keys(g.nodes).map(key => graphNodeFromNeoNode(g.nodes[key])),\r\n       edges: Object.keys(g.edges).map(key => graphEdgeFromNeoEdge(g.edges[key]))\r\n     })\r\n   };\r\n }).\r\n directive('graph', (graphService, $state) => ({\r\n   restrict: 'E',\r\n   templateUrl: 'app/query/graph.html',\r\n   scope: {\r\n     data: '=',\r\n     active: '=',\r\n     network: '='\r\n   },\r\n   link: ($scope, $element) => {\r\n     const graph = {\r\n       nodes: new vis.DataSet(),\r\n       edges: new vis.DataSet()\r\n     };\r\n     const graphWidth = 1300;\r\n     const graphHeight = $(window).height() - 80;\r\n     const topBarHeight = 150;\r\n     const options = graphService.options;\r\n     options.onConnect = (data, callback) => {\r\n       const newEdge = {\r\n         start: $scope.data.nodes[data.from],\r\n         type: graphService.defaultEdgeType(\r\n                $scope.data.nodes[data.from].Type,\r\n                $scope.data.nodes[data.to].Type),\r\n         end: $scope.data.nodes[data.to],\r\n         properties: { Weight: 3 }\r\n       };\r\n       $scope.publish('newEdge', newEdge);\r\n     };\r\n     const network = new vis.Network($element.find('.graphContainer')[0], graph, options);\r\n     const getSelectedNodeId = () => {\r\n       const selectedNodes = network.getSelectedNodes();\r\n       if (selectedNodes.length === 1) {\r\n         return selectedNodes[0];\r\n       }\r\n       return undefined;\r\n     };\r\n\r\n     $scope.data = {\r\n       nodes: {},\r\n       edges: {}\r\n     };\r\n     $scope.$on('$stateChangeSuccess', () => {\r\n       if ($state.params.node) {\r\n         Object.keys($scope.data.nodes).forEach(key => {\r\n           if ($scope.data.nodes[key].label === $state.params.node) {\r\n             if ($scope.data.nodes[key].id !== getSelectedNodeId()) {\r\n               network.selectNodes([key]);\r\n               network.focusOnNode(key, {\r\n                 scale: 1.5,\r\n                 animation: {\r\n                   duration: 1000,\r\n                   easingFunction: 'easeOutCubic'\r\n                 }\r\n               });\r\n             }\r\n           }\r\n         });\r\n       }\r\n     });\r\n\r\n     // Set size to window size\r\n     $scope.$watch('window', () => { network.setSize(`${graphWidth}px`, `${graphHeight}px`); });\r\n\r\n     // Fit to screen on resize\r\n     network.on('resize', () => {\r\n       if (getSelectedNodeId()) {\r\n         network.focusOnNode(getSelectedNodeId(), {\r\n           scale: 1,\r\n           animation: {\r\n             duration: 1000,\r\n             easingFunction: 'easeOutCubic'\r\n           }\r\n         });\r\n       } else {\r\n         network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n       }\r\n     });\r\n\r\n     graph.nodes.on('*', () => {\r\n       if (graph.nodes.length) {\r\n         $('.network-manipulationUI.connect').css('display', 'inline-block');\r\n       } else {\r\n         $('.network-manipulationUI.connect').hide();\r\n       }\r\n     });\r\n\r\n     // Add event listeners\r\n     network.on('select', (params) => {\r\n       if (params.nodes.length === 1) {\r\n         const label = $scope.data.nodes[params.nodes[0]].label;\r\n         if (label) {\r\n           $state.go('admin.main.node.view', { node: label });\r\n         }\r\n       } else if (params.edges.length === 1) {\r\n         const id = params.edges[0];\r\n         const startNode = $scope.data.nodes[$scope.data.edges[id].startNode];\r\n         const endNode = $scope.data.nodes[$scope.data.edges[id].endNode];\r\n         const edge = {\r\n           id,\r\n           start: { lookup: startNode.lookup },\r\n           end: { lookup: endNode.lookup },\r\n           type: $scope.data.edges[id].type,\r\n           properties: $scope.data.edges[id].properties\r\n         };\r\n         $state.go('admin.main.edge.view', { edge: JSON.stringify(edge) });\r\n       }\r\n     });\r\n\r\n     $scope.subscribe('deleted', (params) => {\r\n       if (params.selection.nodes && params.selection.nodes.length) {\r\n         const nodeids = params.selection.nodes.map(n => n.id);\r\n         graph.nodes.remove(nodeids);\r\n       }\r\n       if (params.selection.edges && params.selection.edges.length) {\r\n         const edgeids = params.selection.edges.map(n => n.id);\r\n         graph.edges.remove(edgeids);\r\n       }\r\n     });\r\n\r\n     $scope.subscribe('focus', (nodeid) => {\r\n       network.focusOnNode(nodeid, {\r\n         scale: 1,\r\n         animation: {\r\n           duration: 1000,\r\n           easingFunction: 'easeOutCubic'\r\n         } });\r\n     });\r\n\r\n     $('.network-manipulationUI.connect').hide();\r\n\r\n     $scope.hoverNode = undefined;\r\n     $('.graphContainer').on('mousemove', event => {\r\n       const n = network._getNodeAt({\r\n         x: event.pageX,\r\n         y: event.pageY - topBarHeight - 55\r\n       });\r\n       $scope.$apply(() => {\r\n         if (n) {\r\n           const dataNode = $scope.data.nodes[n.id];\r\n           $scope.hoverNode = dataNode;\r\n           $scope.publish('hover', dataNode);\r\n         } else {\r\n           $scope.publish('hover', undefined);\r\n           $scope.hoverNode = undefined;\r\n         }\r\n       });\r\n     });\r\n\r\n     // Freeze simulation if not active\r\n     $scope.$watch('active', active => {\r\n       if (active !== undefined) {\r\n         network.freezeSimulation(!active);\r\n       }\r\n     });\r\n\r\n     $scope.$watch('data', () => {\r\n       if ($scope.active) {\r\n         graph.nodes.clear();\r\n         graph.edges.clear();\r\n         const gArr = graphService.toGraphData($scope.data);\r\n         graph.nodes.add(gArr.nodes);\r\n         graph.edges.add(gArr.edges);\r\n       }\r\n     });\r\n\r\n     // Update existing data (not replace)\r\n     $scope.subscribe('dataUpdate', g => {\r\n       if ($scope.active && $scope.data) {\r\n         Object.assign($scope.data.edges, g.edges);\r\n         Object.assign($scope.data.nodes, g.nodes);\r\n         const gArr = graphService.toGraphData(g);\r\n         graph.edges.update(gArr.edges);\r\n         graph.nodes.update(gArr.nodes);\r\n       }\r\n     });\r\n   }\r\n })\r\n);\r\n","angular.module('neograph.query',\r\n['neograph.query.presets', 'neograph.queryInput', 'neograph.query.graph'])\r\n.factory('queryFactory', queryPresets => {\r\n  function Query(key, render) {\r\n    this.key = key;\r\n    this.name = key;\r\n    this.render = render;\r\n    this.data = {\r\n      nodes: {},\r\n      edges: {}\r\n    };\r\n    this.body = { q: '', connectAll: false };\r\n    this.presets = queryPresets;\r\n    this.generators = {};\r\n\r\n    if (render === 'Graph') {\r\n      this.generators.nodeGraph = {\r\n        type: 'nodeGraph',\r\n        options: {}\r\n      };\r\n    }\r\n\r\n    if (render === 'Grid') {\r\n      this.generators.nodeFilter = {\r\n        type: 'nodeFilter',\r\n        options: {}\r\n      };\r\n      this.generators.favouritesFilter = {\r\n        type: 'favouritesFilter',\r\n        options: {}\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    create: (key, type) => new Query(key, type)\r\n  };\r\n}).\r\nfactory('queryService', queryFactory => {\r\n  let active = queryFactory.create('Query', 'Graph');\r\n  const queries = {};\r\n  queries[active.key] = active;\r\n\r\n  const listeners = [];\r\n  const publishChange = () => {\r\n    for (let i = 0; i < listeners.length; i ++) {\r\n      listeners[i](active);\r\n    }\r\n  };\r\n  return {\r\n    queries,\r\n    active,\r\n    update: key => {\r\n      active = queries[key];\r\n      publishChange();\r\n    },\r\n    subscribe: callback => listeners.push(callback)\r\n  };\r\n}).\r\ncontroller('QueryCtrl', ($scope, queryService) => {\r\n  queryService.subscribe(active => { $scope.active = active; });\r\n  $scope.queries = queryService.queries;\r\n  $scope.active = queryService.active;\r\n  $scope.selectedTab = $scope.active.key;\r\n  $scope.$watch('selectedTab', key => queryService.update(key));\r\n});\r\n","angular.module('neograph.query.presets', [])\r\n.factory('queryPresets', () =>\r\n   ({\r\n     Schema: {\r\n       q: 'match (n:Schema) optional match (n)-[r]-(m:Schema) return n,r,m'\r\n     },\r\n     AddedRecently: {\r\n       q: `\r\n      match (n:Global) where n.created is not null \r\n      return n order by n.created desc limit 100\r\n      `\r\n     },\r\n     AddedRecentlyPictures: {\r\n       q: `\r\n      MATCH  (p:Label) -- (i:Picture) where p.created is not null \r\n      return p.created,collect(i)[0..5],count(*) as count  \r\n      order by p.created desc limit 500\r\n      `\r\n     },\r\n     Overview: {\r\n       q: `\r\n      match (n) - [r] - (m) where (n:Global and m:Global) \r\n      and (n.Status is null or n.Status > 6) \r\n      and (m.Status is null or m.Status > 6) \r\n      and not (n-[:INSTANCE_OF]-m) RETURN r\r\n      `\r\n     },\r\n     OverViewDense: {\r\n       q: `\r\n      match (n) - [r] - (m) where (n:Global and m:Global) \r\n      and (n.Status is null or n.Status > 3) \r\n      and (m.Status is null or m.Status > 3) \r\n      and not (n-[:INSTANCE_OF]-m) RETURN r\r\n      `\r\n     },\r\n     BritishInfluence: {\r\n       q: `\r\n      MATCH (c:Global)-[r]-(d:Global) where (c:English or c:Scottish) \r\n      and not (c-[:INSTANCE_OF]-d) and not d.Lookup='English' \r\n      and not c.Lookup='English'  return c,d,r\r\n      `\r\n     },\r\n     BritishOnly: {\r\n       q: `\r\n      MATCH (c:Global)-[r]-(d:Global) where (c:English or c:Scottish) and  \r\n      (d:English or d:Scottish) and not (c-[:INSTANCE_OF]-d) \r\n      and not d.Lookup='English' and not c.Lookup='English'  return c,d,r\r\n      `,\r\n       connectAll: true\r\n     },\r\n     FrenchOnly: {\r\n       q: `\r\n      MATCH (c:Global:French)-[r]-(d:Global:French) where  not (c-[:INSTANCE_OF]-d) \r\n      and not d.Lookup='French' and not c.Lookup='French'  return c,d,r\r\n      `,\r\n       connectAll: true\r\n     },\r\n     FrenchPainterInfluence: {\r\n       q: `\r\n      MATCH (c:Global:French:Painter)-[r]-(d:Painter) \r\n      where not (c-[:INSTANCE_OF]-d) \r\n      and not d.Lookup='French' and not c.Lookup='French'  \r\n      return c,d,r\r\n      `,\r\n       connectAll: true\r\n     },\r\n     Cezanne3gen: {\r\n       q: `\r\n      MATCH (c {Lookup:'Cezanne'})-[r]-(d:Painter)  \r\n      -[s]-(e:Painter)  -[t]-(f:Painter) return c,d,e,f,r,s,t\r\n      `,\r\n       connectAll: true\r\n     },\r\n     Cezanne3genOutbound: {\r\n       q: `\r\n      MATCH (c {Lookup:'Cezanne'})\r\n      -[r]->(d:Painter)  -[s]->(e:Painter)  -[t]->(f:Painter) \r\n      return c,d,e,f,r,s,t\r\n      `,\r\n       connectAll: true\r\n     },\r\n     Cezanne3genInbound: {\r\n       q: `\r\n      MATCH (c {Lookup:'Cezanne'})\r\n      <-[r]-(d:Painter)  <-[s]-(e:Painter)  <-[t]-(f:Painter) \r\n      return c,d,e,f,r,s,t\r\n      `,\r\n       connectAll: true\r\n     },\r\n     FrenchEnglishPainters: {\r\n       q: `\r\n      MATCH (c:Global:French:Painter)-[r]-(d:Global:English:Painter) \r\n      where  not (c-[:INSTANCE_OF]-d) and \r\n      not d.Lookup='French' and not c.Lookup='French'  return c,d,r\r\n      `,\r\n       connectAll: true\r\n     },\r\n     German: {\r\n       q: `\r\n      MATCH (c:Global:German)-[r]-(d:Global) \r\n      where not (c-[:INSTANCE_OF]-d) and not \r\n      d.Lookup='German' and not c.Lookup='German'  return c,d,r\r\n      `\r\n     },\r\n     NorthernEurope: {\r\n       q: `\r\n       MATCH (c:Global)-[r]-(d:Global) where \r\n        (c:NorthernEurope or c:German or c:Dutch or c:English or c:Scottish) \r\n        and  \r\n        (d:NorthernEurope or d:German or d:Dutch or d:English or d:Scottish) \r\n        and not c:Provenance and not d:Provenance and not (c-[:INSTANCE_OF]-d) return c,d,r`\r\n     },\r\n     Italian: {\r\n       q: `\r\n      MATCH (c:Global:Italian)-[r]-(d:Global) where not (c-[:INSTANCE_OF]-d) \r\n      and not d.Lookup='Italian' and not c.Lookup='Italian'  return c,d,r\r\n      `\r\n     },\r\n     Spanish: {\r\n       q: `\r\n      MATCH (c:Global:Spanish)-[r]-(d:Global) \r\n      where  not (c-[:INSTANCE_OF]-d) and not d.Lookup='Spanish' \r\n      and not c.Lookup='Spanish'  return c,d,r\r\n      `\r\n     },\r\n     American: {\r\n       q: `\r\n      MATCH (c:Global:American)-[r]-(d:Global) where  not (c-[:INSTANCE_OF]-d) \r\n      and not d.Lookup='American' and not c.Lookup='American'  return c,d,r\r\n      `\r\n     },\r\n     Pop: {\r\n       q: `\r\n      match (n {Lookup:'Pop'}) -[r]-(m:Global) -[s]-(p:Global) \r\n      where not (n-[:INSTANCE_OF]-m) and not (m-[:INSTANCE_OF]-p) \r\n      and (m:Painter or m:Group) and (p:Painter or p:Group) \r\n      and not m:Provenance and not p:Provenance return n,r,m,s,p`\r\n     },\r\n     Impressionism: {\r\n       q: `\r\n      match (n {Lookup:'Impressionist'}) -[r]-(m:Global) -[s]-(p:Global) \r\n      where not (n-[:INSTANCE_OF]-m) and not (m-[:INSTANCE_OF]-p) \r\n      and (m:Painter or m:Group) and (p:Painter or p:Group) \r\n      and not m:Provenance and not p:Provenance return n,r,m,s,p\r\n      `,\r\n       connectAll: true\r\n     },\r\n     Landscape: {\r\n       q: `\r\n      MATCH (c:Global:Landscape)-[r]-(d:Global)  where not (c-[:INSTANCE_OF]-d) \r\n      and not d.Lookup='Landscape' and \r\n      (d:Landscape or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r`\r\n     },\r\n     Modern: {\r\n       q: `\r\n      MATCH (c:Global)-[r]-(d:Global) where  not (c-[:INSTANCE_OF]-d) \r\n      and c.YearTo > 1870  and d.YearTo > 1870 return c,d,r\r\n      `\r\n     },\r\n     Rennaissance: {\r\n       q: `\r\n      MATCH (c:Global)-[r]-(d:Global) where  not (c-[:INSTANCE_OF]-d) \r\n      and c.YearTo > 1400 and c.YearTo<1700 and d.YearTo > 1400 \r\n      and d.YearTo<1700 return c,d,r\r\n      `\r\n     }\r\n   })\r\n);\r\n","angular.module('neograph.queryInput',\r\n['neograph.neo', 'neograph.query.presets', 'neograph.query.generator'])\r\n.directive('queryinput', (neo, queryPresets) =>\r\n  ({\r\n    replace: true,\r\n    restrict: 'E',\r\n    templateUrl: 'app/query/queryInput.html',\r\n    scope: {\r\n      query: '=',\r\n      editable: '=?',\r\n      defaultpreset: '=?'\r\n    },\r\n    link: $scope => {\r\n      $scope.$watch('preset', preset => {\r\n        if (preset) {\r\n          $scope.query.body = preset;\r\n        }\r\n      });\r\n\r\n      if ($scope.defaultpreset) {\r\n        $scope.preset = queryPresets[$scope.defaultpreset];\r\n      }\r\n\r\n      $scope.$watch('query.body', (body) => {\r\n        if (body && body.q) {\r\n          $scope.getData();\r\n        }\r\n      });\r\n\r\n      $scope.generated = { q: '' };\r\n      $scope.$watch('generated', (generated) => {\r\n        if (generated) {\r\n          $scope.query.body = generated;\r\n        }\r\n      });\r\n\r\n      $scope.nodeChanged = (node) => {\r\n        if (node) {\r\n          $scope.query.name = node.Label || node.Lookup;\r\n        }\r\n      };\r\n\r\n      $scope.connectAll = () => neo.getAllRelationships($scope.query.data.nodes)\r\n                    .then(g => {\r\n                      // Add to cached data\r\n                      Object.assign($scope.query.data.edges, g.edges);\r\n                      $scope.publish('dataUpdate', g);\r\n                    });\r\n\r\n\r\n      $scope.getData = () => {\r\n        const body = $scope.query.body;\r\n        if (body && body.q) {\r\n        // If grid query then return results as array to preserve sort order\r\n          const returnArray = $scope.query.type === 'Grid';\r\n          neo.getGraph(body.q, returnArray).\r\n            then(g => {\r\n              if (body.connectAll) {\r\n                neo.getAllRelationships(g.nodes).\r\n                  then(g2 => Object.assign(g.edges, g2.edges));\r\n              } else {\r\n                $scope.query.data = g;\r\n              }\r\n            });\r\n        }\r\n      };\r\n    }\r\n  })\r\n);\r\n","angular.module('neograph.node.favourites', [])\r\n    .directive('favourites', function () {\r\n      return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/favourites/node.favourites.html',\r\n        scope: {\r\n          node: '=',\r\n          query: '='\r\n        }\r\n        ,\r\n        link: function ($scope) {\r\n\r\n\r\n\r\n\r\n          $scope.$watch('node', function (node) {\r\n\r\n            var querys = [];\r\n\r\n            if (node) {\r\n\r\n              querys.push(\r\n                {\r\n                  name: 'Pictures',\r\n                  view: node.Lookup + ' favourites',\r\n                  type:'Grid',\r\n                  queryGenerator: { id: 'favouritesFilter', options: { user: node } }\r\n                });\r\n\r\n\r\n              querys.push(\r\n                {\r\n                  name: 'People',\r\n                  q: 'MATCH (c:' + node.Lookup + ':Favourite)-[]->(d) - [] - (n:Person)    return n', // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                  connectAll: true,\r\n                  view: 'Graph'\r\n                });\r\n\r\n              querys.push(\r\n                {\r\n                  name: 'People + 1',\r\n                  q: 'MATCH (c:' + node.Lookup + ':Favourite)-[]->(d) - [] - (n:Person) -[]-(m:Person)   return n,m', // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                  connectAll: true,\r\n                  view: 'Graph'\r\n                });\r\n\r\n              querys.push(\r\n                {\r\n                  name: 'People and groups',\r\n                  q: 'MATCH (c:' + node.Lookup + ':Favourite)-[]->(d) - [] - (n) where (n:Person or n:Period or n:Group or n:Provenance)   return n', // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                  connectAll: true,\r\n                  view: 'Graph'\r\n                });\r\n\r\n              querys.push(\r\n                {\r\n                  name: 'People and groups + 1 ',\r\n                  q: 'MATCH (c:' + node.Lookup + ':Favourite)-[]->(d) - [] - (n) - [] - (m) where (n:Person or n:Period or n:Group or n:Provenance) and  (m:Person or m:Period or m:Group or m:Provenance)  return n,m', // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                  connectAll: true,\r\n                  view: 'Graph'\r\n                });\r\n\r\n\r\n\r\n              querys.push(\r\n                {\r\n                  name: 'Everything',\r\n                  q: 'MATCH (c:' + node.Lookup + ':Favourite)-[]->(d) - [] - (n:Global)  return n', // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                  connectAll: true,\r\n                  view: 'Graph'\r\n                });\r\n\r\n\r\n              querys.push(\r\n                {\r\n                  name: 'Everything + 1',\r\n                  q: 'MATCH (c:' + node.Lookup + ':Favourite)-[]->(d) - [] - (n:Global) - [] - (m:Global)   return n,m', // or MATCH (a:User {Lookup:'Julian'}) - [r:FAVOURITE] -> (f) - [] -> (d)  return d\r\n                  connectAll: true,\r\n                  view: 'Graph'\r\n                });\r\n\r\n\r\n\r\n            }\r\n\r\n            console.log(querys);\r\n\r\n            $scope.querys = querys;\r\n\r\n          });\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n      };\r\n    });\n","angular.module('neograph.node.freebase', ['neograph.neo'])\r\n    .factory('freebase.service',\r\n    function () {\r\n\r\n\r\n      var creationQueries = [];\r\n\r\n    // creationQueries.push({\r\n    //    name: \"Description\",\r\n    //    propname: \"description\",\r\n    //    query: {\r\n    //        \"type\": \"/common/topic\",\r\n    //        \"description\": [{ \"mid\": null, \"name\": null }]\r\n    //    }\r\n    // });\r\n    // creationQueries.push({\r\n    //    name: \"Image\",\r\n    //    propname: \"image\",\r\n    //    query: {\r\n    //        \"type\": \"/common/topic\",\r\n    //        \"image\": [{ \"mid\": null, \"name\": null }]\r\n    //    }\r\n    // });\r\n      creationQueries.push({\r\n        name: 'About',\r\n        propname: ['type', 'art_genre', '', 'art_subject', 'period_or_movement', 'locations', 'date_begun', 'date_completed'],\r\n        query: {\r\n          'type': '/visual_art/artwork',\r\n          'art_genre': [{ 'mid': null, 'name': null }],\r\n          'art_subject': [{ 'mid': null, 'name': null }],\r\n          'period_or_movement': [{ 'mid': null, 'name': null }],\r\n          'locations': [{ 'mid': null, 'name': null }],\r\n          'date_begun': null,\r\n          'date_completed': null\r\n        }\r\n      });\r\n\r\n    // creationQueries.push({\r\n    //    name: \"About\",\r\n    //    propname: [\"type\",\"art_genre\",\"\",\"art_subject\",\"period_or_movement\",\"locations\",\"date_begun\",\"date_completed\"],\r\n    //    query: {\r\n    //        \"type\": \"/visual_art/artwork\",\r\n    //        \"art_genre\": [{ \"mid\": null, \"name\": null }],\r\n    //        \"art_subject\": [{ \"mid\": null, \"name\": null }],\r\n    //        \"period_or_movement\": [{ \"mid\": null, \"name\": null }],\r\n    //        \"locations\": [{ \"mid\": null, \"name\": null }],\r\n    //        \"date_begun\": null,\r\n    //        \"date_completed\":null\r\n    //    }\r\n    // });\r\n\r\n    // /visual_art/artwork/art_genre\r\n    // /visual_art/artwork/art_subject\r\n    // /visual_art/artwork/period_or_movement\r\n    // /visual_art/artwork/dimensions_meters\r\n    // /visual_art/artwork/locations\r\n    // visual_art/artwork/date_begun\r\n    // visual_art/artwork/date_completed\r\n\r\n\r\n\r\n\r\n\r\n    // queries that return lists\r\n      var queries = [];\r\n\r\n    // queries.push({\r\n    //    name: \"Description\",\r\n    //    propname: \"description\",\r\n    //    query: {\r\n    //        \"type\": \"/common/topic/description\",\r\n    //        \"description\": [{ \"mid\": null, \"name\": null }]\r\n    //    }\r\n    // });\r\n    // queries.push({\r\n    //    name: \"Image\",\r\n    //    propname: \"image\",\r\n    //    query: {\r\n    //        \"type\": \"/common/topic/image\",\r\n    //        \"image\": [{ \"mid\": null, \"name\": null }]\r\n    //    }\r\n    // });\r\n\r\n\r\n\r\n      queries.push({\r\n        name: 'Artworks',\r\n        propname: 'artworks',\r\n        query: {\r\n          'type': '/visual_art/visual_artist',\r\n          'artworks': [{ 'mid': null, 'name': null }]\r\n        }\r\n      });\r\n\r\n\r\n      queries.push({\r\n        name: 'Quotations',\r\n        propname: 'quotations',\r\n        query: {\r\n          'type': '/people/person',\r\n          'quotations': [{ 'mid': null, 'name': null }]\r\n        }\r\n      });\r\n\r\n      queries.push({\r\n        name: 'Influence',\r\n        propname: 'influenced',\r\n        query: {\r\n          'type': '/influence/influence_node',\r\n          'influenced': [{ 'mid': null, 'name': null }]\r\n        }\r\n      });\r\n\r\n      queries.push({\r\n        name: 'Influenced by',\r\n        propname: 'influenced_by',\r\n        query: {\r\n          'type': '/influence/influence_node',\r\n          'influenced_by': [{ 'mid': null, 'name': null }]\r\n        }\r\n      });\r\n      queries.push({\r\n        name: 'Periods or Movements',\r\n        propname: 'associated_periods_or_movements',\r\n        query: {\r\n          'type': '/visual_art/visual_artist',\r\n          'associated_periods_or_movements': [{ 'mid': null, 'name': null }]\r\n        }\r\n      });\r\n      queries.push({\r\n        name: 'Peers',\r\n        propname: 'peers',\r\n        query: {\r\n          'type': '/influence/influence_node',\r\n          'peers': [{ 'mid': null, 'name': null }]\r\n        }\r\n      });\r\n\r\n\r\n\r\n    // queries for single-value results\r\n      queries.push({\r\n        name: 'Date of Birth',\r\n        propname: 'date_of_birth',\r\n        query: {\r\n          'type': '/people/person',\r\n          'date_of_birth': null\r\n        }\r\n      });\r\n\r\n      queries.push({\r\n        name: 'Date of Death',\r\n        propname: 'date_of_death',\r\n        query: {\r\n          'type': '/people/deceased_person',\r\n          'date_of_death': null\r\n        }\r\n      });\r\n\r\n\r\n      var getTopic = function (freebaseId, filter, callback) {\r\n\r\n        var service_url = 'https://www.googleapis.com/freebase/v1/topic';\r\n        var params = {\r\n          'key': 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE',\r\n          'filter': filter\r\n            //  , 'filter': 'suggest'\r\n        };\r\n\r\n        $.getJSON(service_url + freebaseId + '?callback=?', params, function (response) {\r\n\r\n          callback(response);\r\n\r\n\r\n\r\n\r\n\r\n        });\r\n\r\n      };\r\n\r\n\r\n\r\n      var runQuery = function (q, callback) {\r\n\r\n        var API_KEY = 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE';\r\n        var service_url = 'https://www.googleapis.com/freebase/v1/mqlread';\r\n\r\n\r\n        var params = {\r\n          'key': API_KEY,\r\n          'query': JSON.stringify(q)\r\n        };\r\n        // console.log(params);\r\n\r\n        $.getJSON(service_url + '?callback=?', params, function (response) {\r\n\r\n            // var out = { results: [], error: undefined };\r\n            // if (response.result && response.result[q.propname]) {\r\n            //    out.result = response.result[q.propname];\r\n            // }\r\n\r\n          callback(response.result);\r\n        });\r\n\r\n      };\r\n\r\n      var getPersonData = function (freebaseId, callback) {\r\n\r\n        var filters = [];\r\n\r\n        filters.push(\r\n          {\r\n            filter: '/visual_art/visual_artist',\r\n            props: [\r\n              'associated_periods_or_movements'\r\n            ]\r\n          }\r\n            );\r\n\r\n        filters.push({\r\n          filter: '/influence/influence_node',\r\n          props: ['influenced',\r\n                'peers,/influence/peer_relationship/peers',\r\n                'influenced_by'\r\n            ]\r\n\r\n        });\r\n\r\n        filters.push({\r\n          filter: '/people/person',\r\n          props: ['date_of_birth',\r\n                'gender',\r\n                'nationality',\r\n             //   \"parents\",\r\n                'place_of_birth',\r\n                'places_lived,/people/place_lived/location',\r\n            //    \"profession\",\r\n             //   \"religion\",\r\n             //   \"sibling_s,/people/sibling_relationship/sibling\",\r\n                'quotations'\r\n            ]\r\n\r\n        });\r\n\r\n        filters.push({\r\n          filter: '/people/deceased_person',\r\n          props: ['date_of_death'\r\n                , 'place_of_death']\r\n\r\n        });\r\n\r\n\r\n\r\n        var results = {};\r\n        var cnt = 0;\r\n\r\n\r\n        var out = {};\r\n\r\n        angular.forEach(filters, function (f) {\r\n\r\n          getTopic(freebaseId, f.filter, function (result) {\r\n\r\n            angular.forEach(f.props, function (p) {\r\n\r\n              arr = p.split(',');\r\n\r\n              var propname = f.filter + '/' + arr[0];\r\n\r\n\r\n              if (!result || !result.property || !result.property[propname])\r\n                    { console.log('property not available: ' + propname); }\r\n              else {\r\n                var val = result.property[propname];\r\n\r\n                if (val.valuetype == 'compound') {\r\n                  vals = [];\r\n                  angular.forEach(val.values, function (v) {\r\n                    vals.push(v.property[arr[1]].values[0].text);\r\n                  });\r\n\r\n                  out['FB_' + arr[0]] = vals;\r\n                }\r\n                else {\r\n\r\n                  vals = [];\r\n                  angular.forEach(val.values, function (v) {\r\n                    vals.push(v.text);\r\n                  });\r\n                  out['FB_' + arr[0]] = vals;\r\n                }\r\n\r\n                if (arr[0] == 'date_of_death' || arr[0] == 'place_of_death' || arr[0] == 'place_of_birth' || arr[0] == 'date_of_birth' || arr[0] == 'gender' || arr[0] == 'nationality') {\r\n                  out['FB_' + arr[0]] = out['FB_' + arr[0]][0];\r\n                }\r\n\r\n\r\n\r\n              }\r\n\r\n            });\r\n\r\n            cnt += 1;\r\n\r\n            if (cnt == filters.length) {\r\n\r\n              callback(out);\r\n            }\r\n\r\n\r\n          });\r\n        });\r\n\r\n\r\n      };\r\n\r\n\r\n\r\n\r\n      return {\r\n\r\n\r\n        getImage: function (freebaseId, width, height, callback) {\r\n\r\n            // first get image ids\r\n\r\n          getTopic(freebaseId, '/common/topic/image', function (prop) {\r\n            console.log(prop);\r\n            var imageId = prop.values[0].id;\r\n\r\n            var service_url = 'https://usercontent.googleapis.com/freebase/v1/image';\r\n\r\n            var params = {\r\n              'key': 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE'\r\n                    // maxwidth=225&maxheight=225&mode=fillcropmid\r\n            };\r\n            width = width || 225;\r\n            height = height || 400;\r\n\r\n            callback(service_url + imageId + '?mode=fillcropmid&maxwidth=' + width + '&maxheight=' + height);\r\n\r\n                // $.getJSON(service_url + imageId + '?callback=?', params, function (response) {\r\n\r\n                //    console.log(response);\r\n                //    callback(response);\r\n                // });\r\n\r\n\r\n          });\r\n\r\n        }\r\n        ,\r\n        getText: function (node, callback) {\r\n\r\n          var prop = '/common/topic/description';\r\n\r\n          var service_url = 'https://www.googleapis.com/freebase/v1/topic';\r\n          var params = {\r\n            'key': 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE',\r\n            'filter': prop\r\n                //  , 'filter': 'suggest'\r\n          };\r\n\r\n          $.getJSON(service_url + node.FB_ID + '?callback=?', params, function (response) {\r\n                // var out = { results: [], error: undefined };\r\n                // if (response.result && response.result[q.propname]) {\r\n                //    out.result = response.result[q.propname];\r\n                // }\r\n                // console.log(response);\r\n\r\n            if (!response['property'])\r\n                {\r\n              console.log('no blurb found for ' + node.Name);\r\n              callback({});\r\n            }\r\n            else {\r\n\r\n              console.log(response);\r\n\r\n              var blurb = response['property'][prop].values[0].value;\r\n\r\n              var allowedLength = 20;\r\n\r\n              var indIs = blurb.indexOf(' is ');\r\n              var indWas = blurb.indexOf(' was ');\r\n              if (indIs > -1 && (indIs < indWas || indWas == -1)) { indWas = indIs; }\r\n              if (indWas === -1) { indWas = 0; }\r\n\r\n              if ($.inArray('Person', node.labels) == -1) {\r\n                indWas = 0;\r\n              }\r\n\r\n\r\n              var stopSpc = blurb.substring(allowedLength + indWas, blurb.length).indexOf('. ') + 1;\r\n              var stopCr = blurb.substring(allowedLength + indWas, blurb.length).indexOf('.\\n') + 1;\r\n\r\n              var stop = (stopCr > 0 && stopCr < stopSpc) ? stopCr : stopSpc;\r\n\r\n                // console.log(blurb);\r\n                // console.log(indIs);\r\n                // console.log(indWas);\r\n                // console.log(stop);\r\n\r\n              var until = stop > 0 ? allowedLength + indWas + stop : blurb.length;\r\n\r\n\r\n              var shortname = node.Lookup;\r\n\r\n              if (shortname.replace(/ /g, '').toLowerCase() == node.Name.toLowerCase()) {\r\n                shortname = node.name;\r\n              }\r\n              else {\r\n                shortname = shortname.replace(/([A-Z])/g, ' $1').replace(/^./, function (str) { return str.toUpperCase(); });\r\n              }\r\n\r\n\r\n\r\n\r\n\r\n              var short = (indWas > 0 ? (shortname) : '') + blurb.substring(indWas, until);\r\n              var full = blurb.substring(until, blurb.length);\r\n\r\n              if (short != full)\r\n                {\r\n                callback(\r\n                  {\r\n                    'FB_blurb': short.trim(),\r\n                    'FB_blurb_full': full.trim()\r\n\r\n                  });\r\n              }\r\n              else {\r\n                callback(\r\n                  {\r\n                    'FB_blurb': short.trim(),\r\n                    'FB_blurb_full': null\r\n                  });\r\n              }\r\n\r\n\r\n            }\r\n\r\n          });\r\n\r\n        }\r\n        ,\r\n        getTopic: function (freebaseId, callback) {\r\n\r\n          getTopic(freebaseId, callback);\r\n\r\n        }\r\n        ,\r\n        getPersonData: function (freebaseId, callback) {\r\n\r\n\r\n          getPersonData(freebaseId, callback);\r\n\r\n        }\r\n         ,\r\n        getCreationData: function (freebaseId, callback) {\r\n\r\n          getData(freebaseId, creationQueries, callback);\r\n\r\n\r\n\r\n        }\r\n        ,\r\n        getId: function (node, callback) {\r\n\r\n\r\n          var API_KEY = 'AIzaSyDKAx-gsd84J-0ebWuGI3QMG2N7daVyqLE';\r\n          var service_url = 'https://www.googleapis.com/freebase/v1/search';\r\n\r\n          var ispicture = $.inArray('Picture', node.labels);\r\n\r\n          var params = {\r\n            'key': API_KEY,\r\n            'query': ispicture ? node.Title || node.Name : node.Lookup,\r\n\r\n            'limit': 100\r\n          };\r\n\r\n          if ($.inArray('Person', node.labels) > -1) {\r\n            params.filter = '(any type:/people/person type:/people/deceased_person type:/book/author type:/visual_art/visual_artist )';\r\n\r\n                // if ($.inArray(\"Painter\", node.labels) > -1) {\r\n                //    params.domain = \"/visual_art\";\r\n                // }\r\n\r\n          }\r\n          else if ($.inArray('Group', node.labels) > -1 || $.inArray('Period', node.labels) > -1) {\r\n\r\n            params.filter = '(any type:/visual_art/art_period_movement type:/architecture/architectural_style  type:/time/event   type:/book/book_subject)';\r\n\r\n          }\r\n            else if ($.inArray('Provenance', node.labels) > -1) {\r\n\r\n\r\n              params.filter = '(any type:/people/ethnicity type:/location/country )';\r\n              //  params.query = node.Name + \" people\";\r\n            }\r\n            else if (ispicture)\r\n            {\r\n              params.domain = '/visual_art';\r\n            }\r\n\r\n          var out = { id: undefined, error: undefined };\r\n\r\n          $.getJSON(service_url + '?callback=?', params, function (response) {\r\n\r\n            $(response.result).each(function (i, e) {\r\n\r\n\r\n              if (e.name === node.Name || e.name == node.Wikipagename || e.name.indexOf(node.Name) > -1 || e.name.indexOf(node.Lookup) > -1)\r\n                        {\r\n                out = e;\r\n                return false;\r\n              }\r\n                    // if (e.notable && (e.notable.name === type || e.notable.name.indexOf('Art') > -1)) {\r\n                    //    out = e.mid;\r\n                    //    return false;\r\n                    // }\r\n            });\r\n\r\n\r\n            out.response = response.result;\r\n\r\n            callback(out);\r\n\r\n          });\r\n\r\n\r\n\r\n\r\n        }\r\n      };\r\n\r\n\r\n    })\r\n    .directive('freebase', ['freebase.service', 'neo', function (service, neo) {\r\n      return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/freebase/node.freebase.html',\r\n        scope: {\r\n          node: '=',\r\n          active:'='\r\n        },\r\n        link: function ($scope) {\r\n\r\n          var getPersonData = function (node, callback) {\r\n\r\n            service.getPersonData(node.FB_ID, function (data) {\r\n\r\n              $.extend(node, data);\r\n              if (node.FB_date_of_birth && !node.YearFrom) {\r\n                node.YearFrom = parseInt(node.FB_date_of_birth.split('-')[0]);\r\n              }\r\n              if (node.FB_date_of_death && !node.YearTo) {\r\n                node.YearTo = parseInt(node.FB_date_of_death.split('-')[0]);\r\n              }\r\n              callback(node);\r\n\r\n            });\r\n\r\n          };\r\n\r\n          var getBlurb = function (node, callback) {\r\n\r\n\r\n            service.getText(node, function (blurb) {\r\n\r\n              $scope.$apply(function () {\r\n                $.extend(node, blurb);\r\n                if (node.FB_blurb && !node.Description) {\r\n                  node.Description = node.FB_blurb;\r\n                }\r\n                if (node.FB_blurb_full && !node.Text) {\r\n                  node.Text = node.FB_blurb_full;\r\n                }\r\n              });\r\n\r\n              callback(node);\r\n\r\n            });\r\n\r\n          };\r\n\r\n\r\n          var getData = function (node, blurbOnly) {\r\n\r\n            getBlurb(node, function (updated) {\r\n\r\n              if ($.inArray('Person', updated.labels) > -1 && !blurbOnly) {\r\n\r\n                getPersonData(updated, function (updatedPerson) {\r\n\r\n                  console.dir(updatedPerson);\r\n                  neo.saveProps(updatedPerson)\r\n                             .then(function (nid) {\r\n                               console.log(nid + ' saved');\r\n                             });\r\n                });\r\n              }\r\n              else {\r\n\r\n                neo.saveProps(updated)\r\n                         .then(function (nid) {\r\n                           console.log(nid + ' saved');\r\n                         });\r\n              }\r\n\r\n            });\r\n\r\n          };\r\n\r\n          $scope.reselect = function (node, mid, name) {\r\n\r\n            $scope.clear(node);\r\n\r\n            node.FB_ID = mid;\r\n            node.FB_name = name;\r\n            getData(node);\r\n\r\n\r\n          };\r\n\r\n          $scope.clear = function (node) {\r\n\r\n            node.FB_ID = null;\r\n\r\n            if (node.Text === node.FB_blurb_full) {\r\n              delete node.Text;\r\n            }\r\n\r\n            if (node.Description === node.FB_blurb) {\r\n              delete node.Description;\r\n            }\r\n\r\n            if (node.FB_date_of_birth && node.YearFrom == parseInt(node.FB_date_of_birth.split('-')[0])) {\r\n              delete node.YearFrom;\r\n            }\r\n\r\n            if (node.FB_date_of_death && node.YearTo == parseInt(node.FB_date_of_death.split('-')[0])) {\r\n              delete node.YearTo;\r\n            }\r\n\r\n            for (var prop in node) {\r\n              if (prop.indexOf('FB_') == 0) {\r\n                delete node[prop];\r\n              }\r\n            }\r\n\r\n            neo.saveProps(node)\r\n                           .then(function (nid) {\r\n                             console.log(nid + ' saved');\r\n                           });\r\n\r\n          };\r\n\r\n          var loaded = false;\r\n\r\n          var getFreebase = function () {\r\n\r\n            service.getId($scope.node, function (result) {\r\n\r\n              $scope.$apply(function () {\r\n                $scope.disambiguation = result.response;\r\n                loaded = true;\r\n              });\r\n\r\n            });\r\n\r\n\r\n          };\r\n\r\n          $scope.$watch('node', function (node) {\r\n\r\n            if (node) {\r\n\r\n              loaded = false;\r\n\r\n              if ($scope.active) {\r\n                getFreebase();\r\n              }\r\n\r\n            }\r\n          });\r\n\r\n          $scope.$watch('active', function (active) {\r\n\r\n            if (active && $scope.node && !loaded) {\r\n\r\n              getFreebase();\r\n            }\r\n\r\n\r\n          });\r\n\r\n\r\n\r\n\r\n        }\r\n      };\r\n    }]);\n","angular.module('neograph.node.graphpanel', ['neograph.neo', 'neograph.utils'])\r\n    .directive('nodegraphpanel', ['neo', 'utils', function (neo, utils) {\r\n      return {\r\n        replace: true,\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/graphpanel/node.graphpanel.html',\r\n        scope: {\r\n          node: '='\r\n                , active: '='\r\n                , window: '=?'\r\n                , width: '=?'\r\n                , height: '=?'\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n\r\n\r\n\r\n          var network;\r\n\r\n          var graph = {\r\n            nodes: new vis.DataSet(),\r\n            edges: new vis.DataSet()\r\n          };\r\n\r\n          $scope.view = utils.newView('NodeGraph', 'NodeGraph');\r\n\r\n          $scope.view.queryGenerator = {\r\n            type: 'nodeGraph',\r\n            options: { node: $scope.node }\r\n          };\r\n\r\n          $scope.$watch('node', function (n) {\r\n            $scope.view.queryGenerator.options = { node: n };\r\n          });\r\n\r\n          $scope.w = 200;\r\n          $scope.h = 200;\r\n\r\n          $scope.$watch('active', function (active) {\r\n            if (active && !network) {\r\n\r\n\r\n              if ($scope.width && $scope.height) {\r\n                $scope.w = $scope.width;\r\n                $scope.h = $scope.height;\r\n\r\n\r\n              }\r\n              else if ($scope.window) {\r\n                $scope.w = $scope.window.width;\r\n                $scope.h = $scope.window.height - 170;\r\n              }\r\n\r\n\r\n              network = new vis.Network($element.find('.graphContainer')[0], graph, utils.graphOptions);\r\n              network.setSize(($scope.w) + 'px', ($scope.h) + 'px');\r\n                        // fit to screen on resize\r\n              network.on('resize', function (params) {\r\n                network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n              });\r\n\r\n\r\n                    // network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n            }\r\n          });\r\n\r\n\r\n\r\n\r\n          $scope.$watch('view.data', function (data) {\r\n            if ($scope.active) {\r\n              console.log('drawing new graph');\r\n              graph.nodes.clear();\r\n              graph.edges.clear();\r\n              var gArr = utils.toGraphData(data);\r\n              graph.nodes.add(gArr.nodes);\r\n              graph.edges.add(gArr.edges);\r\n            }\r\n\r\n          });\r\n\r\n\r\n          $scope.$watch('window', function (w) {\r\n\r\n            if (network && w) {\r\n              network.setSize(($scope.window.width) + 'px', ($scope.window.height - 170) + 'px');\r\n              network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n            }\r\n\r\n\r\n          });\r\n\r\n\r\n          $scope.$watch('width', function () {\r\n\r\n            if (network) {\r\n              network.setSize(($scope.width) + 'px', ($scope.height - 170) + 'px');\r\n              network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n            }\r\n\r\n\r\n          });\r\n          $scope.$watch('height', function () {\r\n\r\n            if (network) {\r\n              network.setSize(($scope.width) + 'px', ($scope.height - 170) + 'px');\r\n              network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n            }\r\n\r\n\r\n          });\r\n\r\n\r\n\r\n        }\r\n      };\r\n    }]);\n","angular.module('node.graphTypes', ['neograph.neo'])\r\n.directive('graphTypes', function () {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'app/node/graphtypes/node.graphTypes.html',\r\n    scope: {\r\n      node: '=',\r\n      window: '='\r\n    }\r\n        ,\r\n    link: function ($scope) {\r\n\r\n\r\n\r\n\r\n      $scope.$watch('node', function (node) {\r\n\r\n\r\n        if (node) {\r\n\r\n          var querys = [];\r\n\r\n          var Lookup = node.Lookup;\r\n\r\n\r\n                    // if ($.inArray('User', node.labels) > -1 || $.inArray('Picture', node.labels) > -1 || $.inArray('Favourite', node.labels) > -1) {\r\n                    //    querys.push(\r\n                    //                          {\r\n                    //                              name: \"All immediate relationships\",\r\n                    //                              q: \"MATCH (c)-[r]-(d) where ID(c) = \" + node.id + \" return c,d,r\"\r\n                    //                          })\r\n                    // }\r\n                    // else {\r\n\r\n                    //    querys.push(\r\n                    //                          {\r\n                    //                              name: \"All immediate relationships\",\r\n                    //                              q: \"MATCH (c)-[r]-(d:Global) where ID(c) = \" + node.id + \" return c,d,r\"\r\n                    //                          })\r\n\r\n                    // }\r\n\r\n\r\n          if ($.inArray('Provenance', node.labels) > -1) {\r\n\r\n            querys.push(\r\n              {\r\n                name: 'Provenance',\r\n                q: 'MATCH (c:Global:' + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n              });\r\n          }\r\n\r\n          if ($.inArray('Period', node.labels) > -1) {\r\n\r\n            querys.push(\r\n              {\r\n                name: 'Period',\r\n                q: 'MATCH (c:Global:' + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n              });\r\n          }\r\n\r\n          if ($.inArray('Theme', node.labels) > -1) {\r\n\r\n            querys.push(\r\n              {\r\n                name: 'Theme',\r\n                q: 'MATCH (c:Global:' + Lookup + \")-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and not d.Lookup='\" + Lookup + \"' and not c.Lookup='\" + Lookup + \"'  return c,d,r\"\r\n              });\r\n          }\r\n\r\n          if ($.inArray('Person', node.labels) > -1) {\r\n\r\n            querys.push(\r\n              {\r\n                name: 'Outbound Influence',\r\n                              //  q: \"MATCH (c {Lookup:'\" + Lookup + \"'})-[r]->(d:Painter)  -[s]->(e:Painter)  -[t]->(f:Painter) return c,d,e,f,r,s,t\",\r\n                q:\"MATCH (c {Lookup:'\" + Lookup + \"'})-[r]->(d:Painter) with c,d,r optional  match(d) -[s]->(e:Painter) return c,d,r,s,e \",\r\n                connectAll: true\r\n              });\r\n\r\n            querys.push(\r\n              {\r\n                name: 'Inbound Influence',\r\n                          //    q: \"MATCH (c {Lookup:'\" + Lookup + \"'})<-[r]-(d:Painter)  <-[s]-(e:Painter)  <-[t]-(f:Painter) return c,d,e,f,r,s,t\",\r\n                q: \"MATCH (c {Lookup:'\" + Lookup + \"'})<-[r]-(d:Painter) with c,d,r optional  match(d) <-[s]-(e:Painter) return c,d,r,s,e \",\r\n                connectAll: true\r\n              });\r\n\r\n          }\r\n\r\n          if ($.inArray('Group', node.labels) > -1) {\r\n\r\n            querys.push({\r\n              name: 'Group',\r\n              q: \"match (n {Lookup:'\" + Lookup + \"'}) -[r]-(m:Global) -[s]-(p:Global) where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) and (m:Painter or m:Group) and (p:Painter or p:Group) and not m:Provenance and not p:Provenance return n,r,m,s,p\"\r\n    ,\r\n              connectAll: true\r\n            });\r\n\r\n          }\r\n\r\n\r\n          if ($.inArray('Iconography', node.labels) > -1) {\r\n\r\n\r\n            querys.push({\r\n              name: 'Iconography',\r\n              q: 'MATCH (c:Global:' + Lookup + \")-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  and not d.Lookup='\" + Lookup + \"' and (d:\" + Lookup + ' or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r'\r\n                          ,\r\n              connectAll: true\r\n            });\r\n\r\n          }\r\n\r\n          if (!node.temp.isPicture && node.YearFrom && node.YearTo) {\r\n\r\n            var yq = 'MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and ';\r\n            yq += '((c.YearTo >= ' + node.YearFrom + ' and c.YearTo<= ' + node.YearTo + ') or (c.YearFrom >= ' + node.YearFrom + ' and c.YearFrom<= ' + node.YearTo + '))';\r\n            yq += 'and ((d.YearTo >= ' + node.YearFrom + ' and d.YearTo<= ' + node.YearTo + ') or (d.YearFrom >= ' + node.YearFrom + ' and d.YearFrom<= ' + node.YearTo + '))';\r\n            yq += ' return c,d,r';\r\n            querys.push({\r\n              name: 'YearFromYearTo',\r\n              q: yq\r\n\r\n                         ,\r\n              connectAll: true\r\n            });\r\n\r\n          }\r\n\r\n          angular.forEach(querys, function (query) {\r\n\r\n            query.view = node.Lookup + ' - ' + query.name;\r\n            query.type = 'Graph';\r\n\r\n          });\r\n\r\n\r\n          $scope.querys = querys;\r\n\r\n\r\n        }\r\n        else {\r\n\r\n          $scope.querys = [];\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n      });\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n  };\r\n});\n","angular.module('node.imageRelationships', ['neograph.neo'])\r\n    .directive('imageRelationships', ['neo', function (neo) {\r\n      return {\r\n        restrict: 'E',\r\n        templateUrl: '/app/node/imageRelationships/node.imageRelationships.html',\r\n        scope: {\r\n          node: '=',\r\n          query: '=',\r\n          window:'='\r\n        }\r\n        ,\r\n        link: function ($scope) {\r\n\r\n\r\n\r\n\r\n          $scope.$watch('node', function (node) {\r\n\r\n\r\n            if (node) {\r\n\r\n\r\n\r\n              var querys = [];\r\n\r\n              querys.push(\r\n                {\r\n                  name: 'Linked pictures',\r\n                  q: 'MATCH (c)-[r]-(d:Picture) where ID(c) = ' + node.id + ' return d'\r\n                });\r\n\r\n\r\n              if (node.YearFrom || node.YearTo) {\r\n                var yq;\r\n\r\n                if (node.YearFrom && node.YearTo) {\r\n                  yq = {\r\n                    q: 'MATCH (c:Picture) where  (c.YearTo >= ' + node.YearTo + ' and c.YearTo<= ' + node.YearTo + ') or (c.YearFrom >= ' + node.YearFrom + ' and c.YearFrom<= ' + node.YearFrom + ') return c'\r\n                  };\r\n                }\r\n                else if (node.YearTo) {\r\n                  yq = {\r\n                    q: 'MATCH (c:Picture) where  (c.YearTo = ' + node.YearTo + ' ) or (c.YearFrom = ' + node.YearTo + ' ) return c'\r\n                  };\r\n                }\r\n                        else if (node.YearFrom) {\r\n                          yq = {\r\n                            q: 'MATCH (c:Picture) where  (c.YearTo = ' + node.YearFrom + ') or (c.YearFrom = ' + node.YearFrom + ' ) return c'\r\n                          };\r\n                        }\r\n                yq.name = 'Contemporaneous';\r\n                yq.type = 'Grid';\r\n\r\n\r\n                yq.preview = yq.q + ' limit 3';\r\n                querys.push(yq);\r\n\r\n              }\r\n\r\n\r\n              angular.forEach(node.labels, function (label) {\r\n\r\n                if (label != 'Picture' && label != 'Painting') {\r\n                  querys.push(\r\n                    {\r\n                      isLabel:true,\r\n                      name:  label,\r\n                      q: 'MATCH (c:Picture:' + label + ') return c',\r\n                      preview: 'MATCH (c:Picture:' + label + ')  where ID(c)<>' + node.id + '  return c limit 3',\r\n                      view: label,\r\n                      type:'Grid',\r\n                      queryGenerator: { id: 'nodeFilter', options: { node: { Lookup: label } } }\r\n                    });\r\n\r\n                }\r\n\r\n              });\r\n\r\n\r\n                    // if (node.YearFrom && node.YearTo) {\r\n\r\n                    //    var yq = \"MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and \";\r\n                    //    yq += \"((c.YearTo >= \" + node.YearFrom + \" and c.YearTo<= \" + node.YearTo + \") or (c.YearFrom >= \" + node.YearFrom + \" and c.YearFrom<= \" + node.YearTo + \"))\";\r\n                    //    yq += \"and ((d.YearTo >= \" + node.YearFrom + \" and d.YearTo<= \" + node.YearTo + \") or (d.YearFrom >= \" + node.YearFrom + \" and d.YearFrom<= \" + node.YearTo + \"))\";\r\n                    //    yq += \" return c,d,r\";\r\n                    //    querys.push({\r\n                    //        name: 'YearFromYearTo',\r\n                    //        q: yq\r\n\r\n                    //     ,\r\n                    //        connectAll: true\r\n                    //    });\r\n\r\n                    // }\r\n\r\n\r\n\r\n              $scope.querys = querys;\r\n\r\n              angular.forEach(querys, function (query) {\r\n\r\n                neo.getGraph(query.preview || query.q)\r\n                       .then(function (g) {\r\n\r\n                         query.hasData = !$.isEmptyObject(g.nodes);\r\n\r\n\r\n                         query.data = g;\r\n                       });\r\n              });\r\n\r\n\r\n                    //   console.log(querys);\r\n\r\n            }\r\n            else {\r\n\r\n              $scope.querys = [];\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n          });\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n      };\r\n    }]);\n","(function() {\r\n  'use strict';\r\n\r\n  angular.module('neograph.node.images', ['neograph.neo'])\r\n    .controller('NodeImagesCtrl', controller);\r\n\r\n  function controller(neo) {\r\n    $scope.images = [];\r\n\r\n    if ($stateParams.node) {\r\n      nodeService.get($stateParams.node, true).then(function (node) {\r\n        $scope.node = node;\r\n      });\r\n    }\r\n\r\n    var loaded = false;\r\n\r\n          // load images on active change or on node change if active\r\n    $scope.$watch('active', function (active) {\r\n\r\n      if ($scope.node && active && !loaded) {\r\n        getImages();\r\n      }\r\n    });\r\n\r\n    $scope.$watch('node', function (node) {\r\n      loaded = false;\r\n      if (!$scope.active) {\r\n        $scope.images = [];\r\n      }\r\n      if (node && $scope.active) {\r\n        getImages();\r\n      }\r\n    });\r\n\r\n    var getImages = function () {\r\n\r\n      neo.getImages($scope.node).then(function (images) {\r\n        $scope.images = images;\r\n        loaded = true;\r\n      });\r\n\r\n    };\r\n\r\n    $scope.openGridTab = function (node) {\r\n\r\n      $scope.publish('query', {\r\n        view: node.Lookup,\r\n        type: 'Grid',\r\n        queryGenerator: { id: 'nodeFilter', options: { node: node } }\r\n      });\r\n\r\n    };\r\n  }\r\n})();","angular.module('neograph.node.multiple', ['neograph.neo', 'neograph.utils'])\r\n    .directive('multiple', ['neo', 'utils', function (neo, utils) {\r\n      return {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/multiple/node.multiple.html',\r\n        scope: {\r\n          nodes: '='\r\n        },\r\n        link: function ($scope) {\r\n\r\n          $scope.$watch('nodes', function (nodes) {\r\n\r\n            if (nodes) {\r\n              var allLabels = nodes.map(function (node) {\r\n                return node.labels;\r\n              });\r\n\r\n              $scope.labels = allLabels.shift().filter(function (v) {\r\n                return allLabels.every(function (a) {\r\n                  return a.indexOf(v) !== -1;\r\n                });\r\n              });\r\n\r\n              $scope.originalLabels = angular.copy($scope.labels);// store for saving so we know what to change\r\n\r\n            }\r\n\r\n          });\r\n\r\n          $scope.addLabel = function (item) {\r\n\r\n            if ($scope.labels.indexOf(item.Label) === -1) {\r\n              $scope.labels.push(item.Label);\r\n            }\r\n          };\r\n          $scope.removeLabel = function (label) {\r\n\r\n            var ind = $scope.labels.indexOf(label);\r\n            if (ind > -1) {\r\n              $scope.labels.splice(ind, 1);\r\n            }\r\n\r\n          };\r\n\r\n          $scope.save = function () {\r\n            neo.saveMultiple({\r\n              nodes: $scope.nodes,\r\n              labels: $scope.labels,\r\n              originalLabels: $scope.originalLabels\r\n            });\r\n          };\r\n\r\n          $scope.restore = function () {\r\n            var restored = [];\r\n            angular.forEach($scope.nodes, function (node) {\r\n              neo.restoreNode(node).then(function () {\r\n                restored.push(node);\r\n                if (restored.length === $scope.nodes.length) {\r\n                  $scope.publish('restored', { selection: { nodes: restored } });\r\n                  $scope.selection.multiple = undefined;\r\n                  $scope.tabs = [];\r\n                }\r\n              });\r\n            });\r\n          };\r\n\r\n          $scope.delete = function () {\r\n            var deleted = [];\r\n            angular.forEach($scope.nodes, function (node) {\r\n              neo.deleteNode(node).then(function () {\r\n                deleted.push(node);\r\n                if (deleted.length === $scope.nodes.length) {\r\n                  $scope.publish('deleted', { selection: { nodes: deleted } });\r\n                  $scope.selection.multiple = undefined;\r\n                  $scope.tabs = [];\r\n                }\r\n              });\r\n            });\r\n          };\r\n\r\n          $scope.destroy = function () {\r\n            var deleted = [];\r\n            angular.forEach($scope.nodes, function (node) {\r\n              neo.destroyNode(node).then(function () {\r\n                deleted.push(node);\r\n                if (deleted.length === $scope.nodes.length) {\r\n                  $scope.publish('deleted', { selection: { nodes: deleted } });\r\n                  $scope.selection.multiple = undefined;\r\n                  $scope.tabs = [];\r\n                }\r\n              });\r\n            });\r\n          };\r\n\r\n\r\n            // $scope.selection.multiple = new (function (nodes, labels) {\r\n            //    var self = this;\r\n            //    this.nodes = nodes;\r\n            //    this.labels = labels;\r\n\r\n\r\n\r\n\r\n\r\n            // })(params.selection.nodes, labels);\r\n\r\n        }\r\n      };\r\n    }]);\n","(function() {\r\n  'use strict';\r\n\r\n  angular.module('neograph.node.properties', ['neograph.node.service', 'neograph.session', 'neograph.utils'])\r\n      .controller('EditPropertiesCtrl', controller);\r\n\r\n  function controller(nodeService, session, utils, $scope, $stateParams) {\r\n    if ($stateParams.node) {\r\n      nodeService.get($stateParams.node, true).then(node => {\r\n        $scope.node = node;\r\n      });\r\n    }\r\n\r\n    $scope.deleteNode = n => {\r\n      nodeService.delete(n)\r\n        .then(deleted => {\r\n          $scope.selection.selectedNode = deleted;\r\n          // this assumes that the current view is not of deleted items, otherwise this would be inconsistent\r\n          // let view handle its own data ?\r\n          delete $scope.activeView.data.nodes[n.id];\r\n          $scope.publish('deleted', { selection: { nodes: [n] } });\r\n        });\r\n    };\r\n\r\n    $scope.destroyNode = n => {\r\n      nodeService.destroy(n)\r\n        .then(deleted => {\r\n          $scope.selection.selectedNode = undefined;\r\n          // this assumes that the current view is not of deleted items, otherwise this would be inconsistent\r\n          // let view handle its own data ?\r\n          delete $scope.activeView.data.nodes[n.id];\r\n          $scope.publish('deleted', { selection: { nodes: [n] } });\r\n        });\r\n\r\n    };\r\n\r\n    $scope.saveNode = n => {\r\n      nodeService.save(n, session.user)\r\n        .then(node => {\r\n          $scope.node = node;\r\n          var newData = {};\r\n          newData[node.id] = node;\r\n          $scope.publish('dataUpdate', newData);\r\n          // if type, refresh types\r\n          if (node.class == 'Type') {\r\n            utils.refreshTypes();\r\n          }\r\n          $(node.temp.links).each((i, e) => { e.editing = undefined; });\r\n        });\r\n    };\r\n\r\n    $scope.restoreNode = n => {\r\n      nodeService.restore(n)\r\n        .then(node => {\r\n          $scope.node = node;\r\n          var newData = {};\r\n          newData[node.id] = node;\r\n          $scope.publish('dataUpdate', newData);\r\n      });\r\n    };\r\n\r\n    // tie label value to lookup if empty or the same already\r\n    $scope.$watch('node.lookup', function (lookup, beforechange) {\r\n      if (lookup) {\r\n        if ($scope.node.label != undefined && $scope.node.label.trim() == '' || $scope.node.label == beforechange) {\r\n          $scope.node.label = lookup;\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n    $scope.nodeTypes = [];\r\n    $scope.$watchCollection('node.labels', labels => {\r\n      if (labels) {\r\n        const selectedTypes = [];\r\n        angular.forEach($scope.node.labels, function (l) {\r\n          if (utils.types[l]) {\r\n            selectedTypes.push({ lookup: l, class: 'Type' });\r\n          }\r\n        });\r\n        $scope.nodeTypes = selectedTypes;\r\n        if (!$scope.node.class && $scope.nodeTypes.length === 1) {\r\n          $scope.node.class = $scope.nodeTypes[0].lookup; // for types the lookup will always be the label\r\n        }\r\n      }\r\n    });\r\n\r\n    // Can be called from clicking label,\r\n    // in which case item is text value,\r\n    // or from the typeahead in which case it is an object with Lookup property\r\n    $scope.setType = item => {\r\n      if (utils.isType(item.label)) {\r\n        $scope.node.class = item.label;\r\n      }\r\n    };\r\n\r\n    $scope.$watch('newPredicate', v => {\r\n      if (v) {\r\n        $scope.addRelationship({ lookup: v.toUpperCase().replace(/ /g, '_') });\r\n      }\r\n    });\r\n\r\n    $scope.addRelationship = item => {\r\n      const p = predicateFactory.create({ lookup: item.lookup, direction: 'out' });// currently no way to select 'in' relationships\r\n      $scope.node.relationships = $scope.node.relationships || {};\r\n      if (!$scope.node.relationships[p.toString()]) {\r\n        $scope.node.relationships[p.toString()] = { predicate: p, items: [] };\r\n      }\r\n    };\r\n  }\r\n})();\r\n","angular.module('neograph.node.relationships', ['neograph.node.service', 'neograph.session', 'neograph.utils', 'neograph.models.predicate'])\r\n    .controller('EditRelationshipsCtrl', (nodeService, session, utils, $scope, $stateParams, predicateFactory) => {\r\n      if ($stateParams.node) {\r\n        nodeService.get($stateParams.node, true).then(node => {\r\n          $scope.node = node;\r\n        });\r\n      }\r\n\r\n      $scope.$watch('node', node => {\r\n        if (node) {\r\n          node.labelled = node.labelled || [];\r\n          $('.labelEdit input').val('');\r\n          $scope.deleted = node.labels.indexOf('Deleted') > -1;\r\n        }\r\n      });\r\n\r\n      $scope.nodeTypes = [];\r\n\r\n      $scope.$watch('newPredicate', v => {\r\n        if (v) {\r\n          $scope.addRelationship({ lookup: v.toUpperCase().replace(/ /g, '_') });\r\n        }\r\n      });\r\n\r\n      $scope.addRelationship = item => {\r\n        const p = predicateFactory.create({ lookup:item.lookup, direction: 'out' });// currently no way to select 'in' relationships\r\n        $scope.node.relationships = $scope.node.relationships || {};\r\n        if (!$scope.node.relationships[p.toString()]) {\r\n          $scope.node.relationships[p.toString()] = { predicate: p, items: [] };\r\n        }\r\n      };\r\n    });\r\n","angular.module('neograph.node')\r\n  .controller('SearchCtrl', function ($scope, $state, nodeService) {\r\n    var vm = this;\r\n    vm.node = undefined;\r\n    $scope.$watch('vm.node', function (n) {\r\n      if (n && n.label) {\r\n        $state.go('admin.node', { node: n.label });\r\n      }\r\n    });\r\n\r\n\r\n    vm.newNode = newNode;\r\n    vm.addNodeToGraph = addNodeToGraph;\r\n\r\n    function addNodeToGraph(node) {\r\n    \r\n      if (!$scope.views.Graph.data.nodes[node.id]) {\r\n        neo.getRelationships(node.id).then(function (g) {\r\n\r\n          var newData = {\r\n            edges: g.edges,\r\n            nodes: {}\r\n          };\r\n          newData.nodes[node.id] = node;\r\n\r\n          $scope.publish('dataUpdate', newData);\r\n\r\n          if (node.id === $scope.selection.selectedNode.id) {\r\n            $scope.publish('selected', { selection: { nodes: [node.id] } });\r\n            $scope.publish('focus', node.id);\r\n          }\r\n\r\n        });\r\n        $scope.activeView = graphView;\r\n      }\r\n    };\r\n\r\n    function newNode() {\r\n\r\n      var newNode = {\r\n        id: -1,\r\n        labels: [],\r\n        Type: '',\r\n        temp: {\r\n          tabs: ['Properties']\r\n        }\r\n      };\r\n\r\n      if (vm.nodeLookupText && (!vm.selection.selectedNode || vm.nodeLookupText != vm.selection.selectedNode.Lookup)) {\r\n        newNode.lookup = vm.nodeLookupText;\r\n      }\r\n      vm.selection.selectedNode = newNode;\r\n      vm.tabs = $scope.selection.selectedNode.temp.tabs;\r\n      vm.selectedTab = 'Properties';\r\n    }\r\n  });\r\n","angular.module('neograph.node.wikipedia', ['neograph.neo'])\r\n    .factory('wikiservice', () => {\r\n      const wikiTabs = (data, page) => {\r\n        let tabs = [];\r\n        if (data.parse) {\r\n          const $wikiDOM = $(`<document>${data.parse.text['*']}</document>`);\r\n          // Handle redirects\r\n          if ($wikiDOM.find('ul.redirectText').length > 0) {\r\n            tabs = { redirect: $wikiDOM.find('ul.redirectText li a').attr('title') };\r\n          } else {\r\n            const images = $('<div></div>');\r\n            $wikiDOM.find('.image').each((i, e) => {\r\n              $(e).\r\n                attr('href', $(e).attr('href').\r\n                  replace('/wiki/', `https://en.wikipedia.org/wiki/${page.replace(' ', '_')}#/media/`)).\r\n                attr('target', '_blank').css({ 'padding-right': '5px', 'padding-bottom': '5px' });\r\n            });\r\n            $wikiDOM.find('.image').appendTo(images);\r\n            $wikiDOM.find('p').css({ 'margin-bottom': '4px', 'clear': 'left' });\r\n            $wikiDOM.find('p,.thumb,.thumbinner').css({ 'width': '100%' });\r\n            $wikiDOM.find('h2,h3,h4').css({ 'margin-top': '4px', 'margin-bottom': '2px', 'float': 'left', 'clear': 'left', 'width': '100%', 'overflow': 'hidden' });\r\n            $wikiDOM.find('#toc').remove();\r\n            $wikiDOM.find('.editsection').remove();\r\n            $wikiDOM.find('.magnify').remove();\r\n            $wikiDOM.find('.reflist').remove();\r\n            $wikiDOM.find('img').css({ 'display': 'block', 'float': 'left', 'margin-right': '3px', 'margin-bottom': '3px' });\r\n            $wikiDOM.find('.thumb,.thumbinner').css({ 'float': 'left', 'margin-right': '3px', 'margin-bottom': '3px' });\r\n            $wikiDOM.find('.thumbcaption').css({ 'font-size': '11px' });\r\n            $wikiDOM.find('.plainlinks').remove();\r\n            $wikiDOM.find('#navbox').remove();\r\n            $wikiDOM.find('.rellink').remove();\r\n            $wikiDOM.find('.references').remove();\r\n            $wikiDOM.find('.IPA').remove();\r\n            $wikiDOM.find('sup').remove();\r\n            $wikiDOM.find('dd,blockquote').css({ 'margin': '0px', 'width': '', 'font-size': '11px', 'margin-bottom': '10px', 'margin-top': '7px' });\r\n            $wikiDOM.find('blockquote p').css({ 'font-size': '11px' });\r\n            // NB this has interesting stuff in it\r\n            $wikiDOM.find('.navbox, .vertical-navbox').remove();\r\n            $wikiDOM.find('#persondata').remove();\r\n            $wikiDOM.find('#Footnotes').parent().remove();\r\n            $wikiDOM.find('#References').parent().remove();\r\n            $wikiDOM.find('#Bibliography').parent().remove();\r\n            $wikiDOM.find('.refbegin').remove();\r\n            $wikiDOM.find('.dablink').remove();\r\n            // A bit too radical?\r\n            $wikiDOM.find('small').remove();\r\n            $wikiDOM.find(\"img[alt='Wikisource-logo.svg'], img[alt='About this sound'], img[alt='Listen']\").remove();\r\n            $wikiDOM.find('.mediaContainer').remove();\r\n            // Remove links - (leave external links ?)\r\n            $wikiDOM.find('a').each(() => { $(this).replaceWith($(this).html()); });\r\n            $wikiDOM.find('.gallery').find('p').css({ 'width': '', 'font-size': '11px', 'float': 'left', 'clear': 'left' });\r\n            $wikiDOM.find('.gallery').find('.thumb').css({ 'width': '' });\r\n            $wikiDOM.find('.gallerybox').css('height', '220px');\r\n            $wikiDOM.find('.gallerybox').css('float', 'left');\r\n            $wikiDOM.find('table').css({ 'background': 'none', 'width': '', 'max-width': '', 'color': '' });\r\n            $wikiDOM.find('.gallery').remove();\r\n            $wikiDOM.find('#gallery').parent().remove();\r\n            $wikiDOM.find('#notes').parent().remove();\r\n            $wikiDOM.find('#sources').parent().remove();\r\n            // Radical - remove all tables\r\n            $wikiDOM.find('table').remove();\r\n            $wikiDOM.find('h1,h2,h3,h4').next().css({ 'clear': 'left' });\r\n            $wikiDOM.find('dl').remove();\r\n            $wikiDOM.find('.thumb').remove();\r\n            $wikiDOM.find('ul,.cquote').css({ 'float': 'left', 'clear': 'left' });\r\n            $wikiDOM.find('.infobox, .vcard').remove();\r\n            $wikiDOM.find('.thumbimage').css({ 'max-width': '150px', 'height': 'auto' });\r\n            $wikiDOM.find('.mw-editsection').remove();\r\n            $wikiDOM.html($wikiDOM.html().replace('()', ''));\r\n            $wikiDOM.html($wikiDOM.html().replace('(; ', '('));\r\n            $wikiDOM.find('h2').css({ 'cursor': 'pointer', 'color': 'rgba(0,85,128,1)', 'font-size': '20px' });\r\n            $wikiDOM.find('h3').css({ 'font-size': '18px' });\r\n            $wikiDOM.find('#Gallery').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#See_also').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#Notes').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#External_links').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#Selected_works').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#Sources').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#Other_reading').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#Further_reading').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#Resources').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#Further_reading_and_sources').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#List_of_paintings').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#Self-portraits').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#Selected_paintings').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#References_and_sources').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#Partial_list_of_works').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('#Notes_and_references').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('[id^=Selected_works]').parent().nextUntil('h2').andSelf().remove();\r\n            $wikiDOM.find('[id^=Books]').parent().nextUntil('h2').andSelf().remove();\r\n\r\n            const $introTab = $('<div></div>');\r\n            $wikiDOM.find('p:first').nextUntil('h2').andSelf().appendTo($introTab);\r\n            if ($introTab.text().indexOf('Redirect') === -1 && $introTab.text().indexOf('may refer to') === -1) {\r\n              $introTab.find('ul').remove();\r\n            }\r\n            if ($introTab.html()) {\r\n              tabs.push({\r\n                header: 'Summary',\r\n                content: $introTab.html().replace('/; /g', '')\r\n              });\r\n            }\r\n\r\n            $wikiDOM.find('h2').each((i, e) => {\r\n              const $tab = $('<div></div>');\r\n              $(e).nextUntil('h2').appendTo($tab);\r\n              if ($tab.html()) {\r\n                tabs.push({\r\n                  header: $(e).text(),\r\n                  content: $tab.html()\r\n                });\r\n              }\r\n            });\r\n\r\n            if (images.html()) {\r\n              images.find('img').css({ 'width': '250px', 'marginBottom': '5px' });\r\n              tabs.push({\r\n                header: 'Images',\r\n                content: images.html()\r\n              });\r\n            }\r\n          }\r\n        }\r\n        return tabs;\r\n      };\r\n\r\n      const getWiki = (page, callback) => {\r\n        $.getJSON('http://en.wikipedia.org/w/api.php?action=parse&format=json&callback=?',\r\n          {\r\n            page,\r\n            prop: 'text',\r\n            uselang: 'en'\r\n          },\r\n            data => {\r\n              const tabs = wikiTabs(data, page);\r\n              if (tabs.redirect) {\r\n                getWiki(tabs.redirect, callback);\r\n              } else {\r\n                callback(tabs);\r\n              }\r\n            });\r\n      };\r\n\r\n      return {\r\n        getPage: (page, callback) => getWiki(page, callback)\r\n      };\r\n    })\r\n    .directive('wikipedia', (wikiservice, neo) => (\r\n      {\r\n        restrict: 'E',\r\n        templateUrl: 'app/node/wikipedia/node.wikipedia.html',\r\n        scope: {\r\n          node: '=',\r\n          window: '=',\r\n          active: '='\r\n        },\r\n        link: ($scope, $element) => {\r\n          $scope.tabs = [];\r\n\r\n          $scope.setActiveTab = tab => {\r\n            $scope.activeTab = tab;\r\n          };\r\n\r\n          let loaded = false;\r\n          $scope.$watch('node', node => {\r\n            if (node) {\r\n              loaded = false;\r\n              $scope.page = node.Wikipagename || node.Name || node.Title;\r\n            }\r\n          });\r\n\r\n          $scope.savePage = () => {\r\n            $scope.node.Wikipagename = $scope.page;\r\n            neo.saveWikipagename($scope.node).then(node => $scope.page = node.Wikipagename);\r\n          };\r\n\r\n          const getPage = () => {\r\n            wikiservice.getPage($scope.page, tabs => {\r\n              $scope.tabs = tabs;\r\n              $scope.activeTab = $scope.tabs[0];\r\n              $scope.$digest();\r\n              $($element).find('.wikidropdown').dropdown();\r\n              loaded = true;\r\n            }); };\r\n\r\n          $scope.$watch('page', page => {\r\n            if (page && $scope.active) {\r\n              getPage();\r\n            }\r\n            else {\r\n              $scope.tabs = [];\r\n            }\r\n          });\r\n\r\n          $scope.$watch('active', active => {\r\n            if ($scope.page && active && !loaded) {\r\n              getPage();\r\n            }\r\n          });\r\n        }\r\n      })\r\n);\r\n","angular.module('neograph.query.generator.favouritesFilter', ['neograph.neo'])\r\n.directive('favouritesFilter', neo => ({\r\n  restrict: 'E',\r\n  templateUrl: 'app/query/generator/favouritesFilter.html',\r\n  scope: {\r\n    options: '=',\r\n    generated: '='\r\n  },\r\n  link: ($scope, $element, $attrs) => {\r\n    $scope.filters = [];\r\n    $scope.node = {};\r\n    let labels = [];\r\n    $scope.$watch('options', function (options) {\r\n      if (options) {\r\n        $scope.node = options.user;\r\n      }\r\n    });\r\n\r\n    $scope.$watch('node', function (user) {\r\n      load();\r\n    });\r\n\r\n    const load = function () {\r\n      if ($scope.node) {\r\n        labels = [$scope.node.Lookup, 'Favourite'];\r\n        getFilters();\r\n        $scope.enabledFilters = [];\r\n        $scope.process();\r\n      }\r\n\r\n    };\r\n\r\n    const getFilters = function () {\r\n      if (labels && labels.length) {\r\n        const labelQuery = `match (a:${labels.join(':')}) - [] -> (b) return distinct(LABELS(b))`;\r\n        neo.getDistinctLabelsQuery(labelQuery).\r\n            then(l => {\r\n                // remove filter for this node as it is duplicating\r\n              angular.forEach(labels, function (lab) {\r\n                l.splice($.inArray(lab, l), 1);\r\n              });\r\n              $scope.filters = l;\r\n            });\r\n      }\r\n    };\r\n\r\n    $scope.process = labs => {\r\n      if ($scope.node) {\r\n        labs = labs || [];\r\n        let b = 'b';\r\n        if (labs.length) {\r\n          b += `:${labs.join(':')}`;\r\n        }\r\n        const q = `match (a:${labels.join(':')}) - [] -> (${b})`;\r\n        $scope.generated = `${q} return b`;\r\n        if (labs.length) {\r\n          neo.getDistinctLabelsQuery(`${q}  return distinct(LABELS(b))`).\r\n              then(l => { $scope.enabledFilters = l; });\r\n        } else {\r\n          $scope.enabledFilters = [];\r\n        }\r\n      }\r\n    };\r\n  }\r\n})\r\n);\r\n","angular.module('neograph.query.generator.nodeFilter', ['neograph.neo'])\r\n    .directive('nodeFilter', neo => ({\r\n      restrict: 'E',\r\n      templateUrl: 'app/query/generator/nodeFilter.html',\r\n      scope: {\r\n        options: '=',\r\n        generated: '=',\r\n        nodechanged: '&?'\r\n      },\r\n      link: ($scope) => {\r\n        $scope.filters = [];\r\n        $scope.node = {};\r\n        let labels = [];\r\n\r\n        const getFilters = () => {\r\n          if (labels && labels.length) {\r\n            neo.getDistinctLabels(labels).\r\n                then(l => {\r\n                  // Remove filter for this node as it is duplicating\r\n                  labels.forEach(lab => { l.splice(lab.indexOf(l), 1); });\r\n                  $scope.filters = l;\r\n                });\r\n          }\r\n        };\r\n\r\n        const load = () => {\r\n          if ($scope.node) {\r\n            labels = [$scope.node.label, 'Picture'];\r\n            getFilters();\r\n            $scope.enabledFilters = [];\r\n            $scope.process();\r\n          }\r\n        };\r\n\r\n        $scope.$watch('options', options => {\r\n          $scope.node = options.node;\r\n        });\r\n\r\n        $scope.$watch('node', node => {\r\n          if ($scope.nodechanged) {\r\n            $scope.nodechanged({ node });\r\n          }\r\n          load();\r\n        });\r\n\r\n        $scope.openNode = () => {\r\n          if ($scope.node) {\r\n            $scope.publish('selected', { selection:{ nodes:[$scope.node] } });\r\n          }\r\n        };\r\n\r\n        $scope.process = labs => {\r\n          if ($scope.node) {\r\n            if (!labs || !labs.length) {\r\n              labs = labels;\r\n            } else {\r\n              labs = labs.concat(labels);\r\n            }\r\n            $scope.generated = `\r\n              match (a:${labs.join(':')}) return a \r\n              order by a.Status desc limit 500\r\n              `;\r\n            if (labs != labels) {\r\n              neo.getDistinctLabels(labs).\r\n                  then(l => { $scope.enabledFilters = l; });\r\n            } else {\r\n              $scope.enabledFilters = [];\r\n            }\r\n          }\r\n        };\r\n      }\r\n    })\r\n);\r\n","angular.module('neograph.query.generator.nodeGraph', ['neograph.neo'])\r\n    .directive('nodeGraph', neo => ({\r\n      restrict: 'E',\r\n      templateUrl: 'app/query/generator/nodeGraph.html',\r\n      scope: {\r\n        options: '=',\r\n        generated: '=',\r\n        nodechanged: '&?'\r\n      },\r\n      link: ($scope) => {\r\n        $scope.querys = [];\r\n        $scope.selected = '';\r\n        $scope.node = {};\r\n        $scope.$watch('options', options => {\r\n          $scope.node = options.node;\r\n        });\r\n\r\n        $scope.$watch('selected', sel => {\r\n          if (sel && sel.q) {\r\n            $scope.generated = sel.q;\r\n          }\r\n        });\r\n\r\n        $scope.$watch('node', node => {\r\n          if (node && node.id) {\r\n            if ($scope.nodechanged) {\r\n              $scope.nodechanged({ node });\r\n            }\r\n            neo.getNode(node.id, false).\r\n              then(loaded => {\r\n                getQuerys(loaded);\r\n              });\r\n          }\r\n        });\r\n\r\n        $scope.openNode = () => {\r\n          if ($scope.node) {\r\n            $scope.publish('selected', { selection: { nodes: [$scope.node] } });\r\n          }\r\n        };\r\n\r\n        function getQuerys(node) {\r\n          if (node) {\r\n            const querys = [];\r\n            const Lookup = node.Lookup;\r\n\r\n            querys.push({\r\n              name: 'All immediate relationships',\r\n              q: `MATCH (c)-[r]-(d:Global) where ID(c) = ${node.id} return c,d,r`\r\n            });\r\n\r\n            querys.push({\r\n              name: 'Self',\r\n              q: `MATCH (c:${node.Label})-[r]-(d:${node.Label}) return c,d,r`\r\n            });\r\n\r\n            if (node.labels.indexOf('Provenance') > -1) {\r\n              querys.push(\r\n                {\r\n                  name: 'Provenance',\r\n                  q: `\r\n                  MATCH (c:Global:${Lookup})-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) \r\n                  and not d.Lookup='${Lookup}' \r\n                  and not c.Lookup='${Lookup}'  return c,d,r\r\n                  `\r\n                });\r\n            }\r\n\r\n            if (node.labels.indexOf('Period') > -1) {\r\n              querys.push({\r\n                name: 'Period',\r\n                q: `\r\n                  MATCH (c:Global:${Lookup})-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) \r\n                  and not d.Lookup='${Lookup}' and not c.Lookup='${Lookup}'  return c,d,r\r\n                  `\r\n              });\r\n            }\r\n\r\n            if (node.labels.indexOf('Theme') > -1) {\r\n              querys.push({\r\n                name: 'Theme',\r\n                q: `\r\n                  MATCH (c:Global:${Lookup})-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) \r\n                  and not d.Lookup='${Lookup}' and not c.Lookup='${Lookup}'  return c,d,r\r\n                  `\r\n              });\r\n            }\r\n\r\n            if (node.labels.indexOf('Person') > -1) {\r\n              querys.push({\r\n                name: 'Outbound Influence',\r\n                q: `\r\n                  MATCH (c {Lookup:'${Lookup}'})-[r]->(d:Painter) \r\n                  with c,d,r optional  match(d) -[s]->(e:Painter) return c,d,r,s,e `,\r\n                connectAll: true\r\n              });\r\n              querys.push({\r\n                name: 'Inbound Influence',\r\n                q: `\r\n                  MATCH (c {Lookup:'${Lookup}'})<-[r]-(d:Painter) \r\n                  with c,d,r optional  match(d) <-[s]-(e:Painter) return c,d,r,s,e \r\n                  `,\r\n                connectAll: true\r\n              });\r\n            }\r\n\r\n            if (node.labels.indexOf('Group') > -1) {\r\n              querys.push({\r\n                name: 'Group',\r\n                q: `\r\n                match (n {Lookup:'${Lookup}'}) -[r]-(m:Global) -[s]-(p:Global) \r\n                where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) \r\n                and (m:Painter or m:Group) and (p:Painter or p:Group) \r\n                and not m:Provenance and not p:Provenance return n,r,m,s,p\r\n                `,\r\n                connectAll: true\r\n              });\r\n            }\r\n\r\n            if (node.labels.indexOf('Iconography') > -1) {\r\n              querys.push({\r\n                name: 'Iconography',\r\n                q: `\r\n                MATCH (c:Global:${Lookup})-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  \r\n                and not d.Lookup='${Lookup}' and (d:${Lookup} or d:Provenance or d:Group \r\n                or d:Iconography or d:Place) return c,d,r\r\n                `,\r\n                connectAll: true\r\n              });\r\n            }\r\n\r\n            if (node.YearFrom && node.YearTo) {\r\n              querys.push({\r\n                name: 'YearFromYearTo',\r\n                q: `\r\n                MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and \r\n                (\r\n                  (c.YearTo >= ${node.YearFrom} and c.YearTo<= ${node.YearTo}) \r\n                  or (c.YearFrom >= ${node.YearFrom} and c.YearFrom<= ${node.YearTo})\r\n                )\r\n                and \r\n                (\r\n                  (d.YearTo >= ${node.YearFrom} and d.YearTo<= ${node.YearTo}) \r\n                  or (d.YearFrom >= ${node.YearFrom} and d.YearFrom<= ${node.YearTo})\r\n                )\r\n                return c,d,r\r\n               `,\r\n                connectAll: true\r\n              });\r\n            }\r\n\r\n            const prevselection = $scope.selected.name;\r\n\r\n            $scope.querys = querys;\r\n            $scope.querys.forEach(e => {\r\n              if (e.name === prevselection) {\r\n                $scope.selected = e;\r\n              }\r\n            });\r\n          }\r\n        }\r\n      }\r\n    })\r\n);\r\n","angular.module('neograph.query.generator', [\r\n  'neograph.query.generator.favouritesFilter',\r\n  'neograph.query.generator.nodeFilter',\r\n  'neograph.query.generator.nodeGraph',\r\n]);\n"],"sourceRoot":"/source/"}