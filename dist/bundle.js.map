{"version":3,"sources":["app.js","publishSubscribe.js","settings.js","common/common.js","common/filter.js","common/filters.js","common/images.js","common/labels.js","common/network.js","common/nodeArray.js","common/typeahead.js","common/typeaheadSimple.js","edge/edge.js","interaction/draggable.js","interaction/interaction.js","interaction/resizable.js","interaction/selectable.js","layout/layout.js","models/node.js","models/predicate.js","node/node.controller.js","bundle.js","node/node.module.js","node/node.routes.js","node/node.service.js","neo/neo.client.js","neo/neo.js","neo/session.js","neo/utils.js","query/graph.js","query/query.js","query/query.presets.js","query/queryInput.js","node/multiple/node.multiple.js","node/images/node.images.js","node/properties/node.properties.edit.js","node/relationships/node.relationships.edit.js","node/wikipedia/node.wikipedia.js","node/search/search.controller.js","query/generator/favouritesFilter.js","query/generator/nodeFilter.js","query/generator/nodeGraph.js","query/generator/query.generator.js"],"names":["angular","module","app","config","$stateProvider","$urlRouterProvider","state","url","controller","views","@","templateUrl","search@admin","query@admin","otherwise","$scope","$stateParams","neo","queryPresets","utils","session","$watch","console","log","edge","selection","selectedNode","undefined","multiple","images","subscribe","node","saveFavourite","user","newEdge","$apply","selectedEdge","tabs","selectedTab","run","$rootScope","PubSubService","init","service","scope","publishEventMap","constructor","prototype","publish","_this","this","args","slice","call","arguments","evnt","splice","forEach","handlerMap","handler","apply","_this2","handlers","push","$id","$on","i","l","length","factory","apiRoot","directive","replace","restrict","enabled","process","link","$element","$attrs","filters","labels","f","getFilterClass","value","toggleFilter","label","$","inArray","filter","input","editing","nodes","active","updatemasonry","$ul","find","items","removeClass","applyMasonry","hasClass","masonry","setTimeout","nodeselector","addClass","navigate","name","view","type","queryGenerator","id","options","Label","selectAll","selected","map","e","params","removeItems","sel","remove","refreshContent","filterBy","selectedNodes","sender","makeFavourite","navpath","highlight","x","getClass","getLabelClass","template","graph","network","width","height","vis","Network","setSize","onselected","directbinding","directBinding","lookup","on","focus","clickable","nodeClicked","item","indexOf","ind","each","addNode","removeNode","nodeService","choice","watchvalue","text","autosize","element","attrs","getSource","source","key","types","JSON","stringify","predicates","nodeSource","placeholderDefault","$input","attr","n","val","css","typeahead","matcher","obj","parse","toLowerCase","query","sorter","aItem","beginswith","caseSensitive","caseInsensitive","shift","concat","highlighter","out","Predicate","ToString","RegExp","$1","match","updater","itemSelected","keyCode","isArray","d","search","then","data","ngModel","edgeHeader@admin","edge@admin","selectTab","tab","properties@admin.main.edge","editproperties@admin.main.edge","predicateType","Lookup","deleteEdge","activeView","startNode","endNode","edges","saveEdge","g","initLeft","position","left","draggable","axis","drag","change","window","tabsWidth","$window","w","getWindowDimensions","tabsWidthInner","graphWidth","graphHeight","topBarHeight","tabsHeight","newValue","oldValue","bind","selectable","stop","event","ui","parseInt","cancel","transclude","panes","self","select","pane","add","p","require","title","visible","tabsCtrl","stopPropagation","predicateFactory","Node","Object","assign","relKey","relationships","rel","predicate","create","isPicture","isPerson","isProperty","isCustomField","setDirection","direction","toString","symmetrical","reverse","toUpperCase","flip","isDirectional","activate","get","vm","hoverNode","$inject","panel@admin","properties@admin.node","relationships@admin.node","images@admin.node","neoClient","$q","nodeFactory","lastLoadedNode","api","setPropsAndTabsFromLabels","setPropsAndTabs","$promise","toJSON","addrelprops","getWithRels","when","getList","q","limit","saveWikipagename","Wikipagename","getImages","temp","isGroup","saveProps","getProps","save","trimmed","saveRels","destroy","delete","deferred","resolve","restore","promise","txt","$resource","settings","root","method","getRelationships","getOne","saveMultiple","del","getImageRelationships","getAll","getDistinctLabels","that","getGraph","returnArray","dir","getAllRelationships","nodeIds","getIds","returnType","join","getUser","userLookup","getDistinctLabelsQuery","anonUser","roles","Public","signedIn","signingIn","signIn","username","password","authenticate","localStorage","PreReg","failMessage","reject","signOut","presets","Array","diff","a","ids","hasAny","unique","current","refreshTypes","refreshPredicates","isType","isSystemInfo","Type","personTypes","pictureTypes","tabSettings","graphNodeFromNeoNode","neoNode","yf","yearFrom","yt","yearTo","y","level","startYear","endYear","step","cnt","size","status","group","mass","radius","borderWidth","image","thumbUrl","shape","fontSize","fontColor","color","background","border","graphEdgeFromNeoEdge","neoEdge","colour","hideEdge","from","to","opacity","style","labelAlignment","defaultEdgeType","fromType","toType","widthSelectionMultiplier","hierarchicalLayout","levelSeparation","nodeSpacing","dataManipulation","initiallyVisible","physics","barnesHut","gravitationalvarant","centralGravity","springLength","springvarant","damping","repulsion","nodeDistance","hierarchicalRepulsion","onDelete","callback","toGraphData","keys","graphService","$state","DataSet","onConnect","start","end","properties","Weight","getSelectedNodeId","getSelectedNodes","selectNodes","focusOnNode","scale","animation","duration","easingFunction","zoomExtent","hide","go","nodeids","edgeids","nodeid","_getNodeAt","pageX","pageY","dataNode","freezeSimulation","clear","gArr","update","Query","render","body","connectAll","generators","nodeGraph","nodeFilter","favouritesFilter","queryFactory","queries","listeners","publishChange","queryService","Schema","AddedRecently","AddedRecentlyPictures","Overview","OverViewDense","BritishInfluence","BritishOnly","FrenchOnly","FrenchPainterInfluence","Cezanne3gen","Cezanne3genOutbound","Cezanne3genInbound","FrenchEnglishPainters","German","NorthernEurope","Italian","Spanish","American","Pop","Impressionism","Landscape","Modern","Rennaissance","editable","defaultpreset","preset","getData","generated","nodeChanged","g2","allLabels","v","every","originalLabels","copy","addLabel","removeLabel","restored","restoreNode","deleted","deleteNode","destroyNode","loaded","saveNode","newData","links","beforechange","trim","nodeTypes","$watchCollection","selectedTypes","class","setType","addRelationship","labelled","wikiTabs","page","$wikiDOM","redirect","padding-right","padding-bottom","appendTo","margin-bottom","margin-top","float","overflow","display","margin-right","font-size","margin","parent","replaceWith","html","max-width","next","cursor","nextUntil","andSelf","$introTab","header","content","$tab","marginBottom","getWiki","getJSON","prop","uselang","getPage","wikiservice","setActiveTab","activeTab","Name","Title","savePage","$digest","dropdown","addNodeToGraph","Graph","graphView","newNode","nodeLookupText","load","getFilters","enabledFilters","labelQuery","lab","labs","b","nodechanged","openNode","getQuerys","querys","YearFrom","YearTo","prevselection","getNode"],"mappings":"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","file":"bundle.js","sourcesContent":["angular.module('templates', []);\r\nvar app = angular\r\n  .module('Neograph',\r\n  [\r\n    'templates',\r\n    'publishSubscribe',\r\n    'ui.router',\r\n    'ngSanitize',\r\n    'neograph.common',\r\n    'neograph.edge',\r\n    'neograph.interaction',\r\n    'neograph.layout',\r\n    'neograph.neo',\r\n    'neograph.node',\r\n    'neograph.query'\r\n  ]).\r\n  config(function($stateProvider, $urlRouterProvider) {\r\n    $stateProvider\r\n        .state('admin', { \r\n          url:'/admin?querypreset',\r\n          controller: 'AdminCtrl as vm',\r\n          views: {\r\n            '@': {\r\n              templateUrl:'app/partials/admin.html'\r\n            }, \r\n            'search@admin':{\r\n              controller:'SearchCtrl as vm',\r\n              templateUrl:'app/node/search/search.html'\r\n            }, \r\n            'query@admin':{\r\n              controller:'QueryCtrl',\r\n              templateUrl:'app/query/query.html'\r\n            }\r\n          }\r\n        })\r\n        .state('search', {\r\n          url:'/search',\r\n          templateUrl:'app/partials/search.html'\r\n        });\r\n\r\n    $urlRouterProvider.otherwise('/admin');\r\n  })\r\n  .controller('AdminCtrl', function($scope, $stateParams, neo, queryPresets, utils, session) {\r\n  \r\n    var vm = this;\r\n\r\n    $scope.$watch('$stateParams.node',function(state) {\r\n      console.log(state);\r\n    })\r\n\r\n    function shouldEnabledAddToGraph() {\r\n      $scope.enableAddToGraph = $scope.selection.selectedNode &&\r\n      $scope.selection.selectedNode.id &&\r\n      $scope.activeView.type === 'Graph' &&\r\n      !$scope.activeView.data.nodes[$scope.selection.selectedNode.id];\r\n    }\r\n\r\n    $scope.$watch('selection.selectedEdge', edge => {\r\n      if (edge) {\r\n        $scope.selection.selectedNode = undefined;\r\n        $scope.selection.multiple = undefined;\r\n        $scope.selection.images = [];\r\n      }\r\n    });\r\n\r\n    $scope.subscribe('favourite', function(node) {\r\n      neo.saveFavourite(node, session.user);\r\n    });\r\n\r\n    $scope.subscribe('newEdge', function(newEdge) {\r\n      $scope.$apply(function() {\r\n        $scope.selection.selectedEdge = newEdge;\r\n        $scope.tabs = ['Properties'];\r\n        $scope.selectedTab = 'Properties';\r\n      });\r\n    });\r\n\r\n  })\r\n  .run(function($rootScope, PubSubService) {\r\n    PubSubService.init($rootScope);\r\n  });\r\n\r\n\r\n","angular.module('publishSubscribe', [])\r\n.service('PubSubService', () => ({\r\n  init: scope => {\r\n    // Keep a dictionary to store the events and its subscriptions\r\n    const publishEventMap = {};\r\n    // Register publish events\r\n    scope.constructor.prototype.publish = function publish() {\r\n      // Get event and rest of the data\r\n      const args = [].slice.call(arguments);\r\n      const evnt = args.splice(0, 1);\r\n      if (!publishEventMap[evnt]) {\r\n        publishEventMap[evnt] = [];\r\n      }\r\n      // Loop though each handlerMap and invoke the handler\r\n      publishEventMap[evnt].forEach(handlerMap => {\r\n        handlerMap.handler.apply(this, args);\r\n      });\r\n    };\r\n    // Register Subscribe events\r\n    scope.constructor.prototype.subscribe = function subscribe(evnt, handler) {\r\n      const handlers = (publishEventMap[evnt] = publishEventMap[evnt] || []);\r\n      // Just keep the scopeid for reference later for cleanup\r\n      handlers.push({ $id: this.$id, handler });\r\n      // When scope is destroy remove the handlers that it has subscribed.\r\n      this.$on('$destroy', () => {\r\n        for (let i = 0, l = handlers.length; i < l; i++) {\r\n          if (handlers[i].$id === this.$id) {\r\n            handlers.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      });\r\n    };\r\n  }\r\n})\r\n);\r\n","angular.module('neograph.settings', [])\r\n.factory('settings', () => ({ apiRoot: 'http://localhost:1337' }));\r\n\r\n","angular.module('neograph.common', [\r\n  'neograph.common.filter',\r\n  'neograph.common.filters',\r\n  'neograph.common.images',\r\n  'neograph.common.labels',\r\n  'neograph.common.network',\r\n  'neograph.common.nodeArray',\r\n  'neograph.common.typeahead',\r\n  'neograph.common.typeaheadSimple'\r\n]);\n","angular.module('neograph.common.filter', [])\r\n.directive('filter', function () {\r\n  return {\r\n    replace: true,\r\n    restrict: 'E',\r\n    templateUrl: 'app/common/filter.html',\r\n    scope: {\r\n\r\n      init: '='// an array of labels\r\n            ,\r\n      enabled: '='\r\n            ,\r\n      process: '&'\r\n\r\n\r\n\r\n\r\n    },\r\n    link: function ($scope, $element, $attrs) {\r\n\r\n      $scope.filters = {};\r\n\r\n      $scope.$watch('init', function (labels) {\r\n\r\n        var filters = {};\r\n        angular.forEach(labels, function (f) {\r\n          filters[f] = 0;\r\n        });\r\n\r\n        $scope.filters = filters;\r\n\r\n      });\r\n\r\n      $scope.getFilterClass = function (value) {\r\n\r\n        if (value === 1)\r\n          return 'label-success';\r\n        else if (value === 0)\r\n          return 'label-info';\r\n                else return '';\r\n      };\r\n\r\n      $scope.toggleFilter = function (label) {\r\n        if ($scope.filters[label] == 1) {\r\n          $scope.filters[label] = 0;\r\n\r\n        }\r\n        else if ($scope.filters[label] == 0) {\r\n          $scope.filters[label] = 1;\r\n\r\n        }\r\n                else if ($scope.filters[label] == -1) {\r\n                  for (var f in $scope.filters) {\r\n                    $scope.filters[f] = 0;\r\n                  }\r\n                  $scope.filters[label] = 1;\r\n                }\r\n\r\n        var labels = [];\r\n        for (var f in $scope.filters) {\r\n\r\n          if ($scope.filters[f] === 1) {\r\n            labels.push(f);\r\n          }\r\n\r\n        }\r\n\r\n\r\n        $scope.process({ labels: labels });\r\n\r\n\r\n\r\n      };\r\n\r\n\r\n      $scope.$watch('enabled', function (labels) { // labels = selectable labels following filtering\r\n\r\n        if (labels && labels.length) {\r\n          for (var f in $scope.filters) {\r\n\r\n            if ($.inArray(f, labels) == -1) { // disable filter if not in list\r\n              $scope.filters[f] = -1;\r\n            }\r\n            else if ($scope.filters[f] == -1) { // enable filter if in list and previously disabled\r\n              $scope.filters[f] = 0;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n\r\n          for (var f in $scope.filters) {\r\n            $scope.filters[f] = 0;\r\n          }\r\n        }\r\n\r\n      });\r\n\r\n\r\n\r\n\r\n    }\r\n  };\r\n});\n","angular.module('neograph.common.filters', []).filter('checkmark', function () {\r\n  return function (input) {\r\n    return input ? '\\u2713' : '\\u2718';\r\n  };\r\n}).filter('predicate', function () {\r\n  return function (input) {\r\n    return input ? '\\u2713' : '\\u2718';\r\n  };\r\n});\n","angular.module('neograph.common.images', ['neograph.neo', 'neograph.session'])\r\n.directive('images', ['neo', 'session', function (neo) {\r\n  return {\r\n    replace: true,\r\n    restrict: 'E',\r\n    templateUrl: 'app/common/images.html',\r\n    scope: {\r\n      editing: '='\r\n            , nodes: '=' // must be an array to preserve sort order\r\n            , active: '='\r\n            , updatemasonry: '='// required to update masonry on resize\r\n\r\n    },\r\n    link: function ($scope, $element, $attrs) {\r\n\r\n      var $ul = $($element).find('ul');\r\n\r\n      $scope.items = {};\r\n\r\n      $scope.$watch('nodes', function (nodes) {\r\n        $ul.removeClass('masonryLoaded');\r\n        $scope.items = nodes;\r\n        applyMasonry();\r\n\r\n      });\r\n\r\n      $scope.$watch('updatemasonry', function () {\r\n        if ($ul.hasClass('masonry')) {\r\n          $ul.masonry('reload');\r\n        }\r\n      });\r\n\r\n      $scope.$watch('active', applyMasonry);\r\n\r\n      var applyMasonry = function () {\r\n\r\n            //    if ($scope.updatemasonry) {\r\n\r\n        setTimeout(function () {\r\n\r\n          if ($ul.hasClass('masonry')) {\r\n            $ul.masonry('reload');\r\n          }\r\n          else {\r\n            $ul.masonry({\r\n              nodeselector: 'li'\r\n                                // ,\r\n                                // columnWidth: 1,\r\n                                // \"isFitWidth\": true\r\n            });\r\n          }\r\n\r\n          $ul.addClass('masonryLoaded');\r\n\r\n\r\n        }, 100);\r\n             //   }\r\n           //     else {\r\n                 //   $ul.addClass('masonryLoaded');\r\n           // /     }\r\n      };\r\n\r\n      $scope.navigate = function (label) {\r\n        $scope.publish('query', {\r\n          name: label,\r\n          view: label,\r\n          type: 'Grid',\r\n          queryGenerator: { id: 'nodeFilter', options: { node: { Label: label } } }\r\n        });\r\n\r\n      };\r\n\r\n      $scope.selectAll = function () {\r\n\r\n        if ($ul.find('li.ui-selected').length < $ul.find('li').length) {\r\n          $ul.find('li').addClass('ui-selected');\r\n          $scope.selected = $scope.nodes.map(function (e, i) { return i; });\r\n        }\r\n        else {\r\n          $ul.find('li').removeClass('ui-selected');\r\n          $scope.selected = [];\r\n        }\r\n      };\r\n\r\n            // this assumes that we are looking at a view of not deleted items\r\n      $scope.subscribe('deleted', function (params) {\r\n\r\n                // alternatively i could have a deep watch on nodearray and update that\r\n        removeItems(params.selection.nodes);\r\n      });\r\n\r\n            // this assumes that we are looking at a view of deleted items\r\n      $scope.subscribe('restored', function (params) {\r\n\r\n                // alternatively i could have a deep watch on nodearray and update that\r\n        removeItems(params.selection.nodes);\r\n      });\r\n\r\n\r\n      var removeItems = function (items) {\r\n\r\n        if (items && items.length) {\r\n          angular.forEach(items, function (node) {\r\n            var sel = \"li[nodeid='\" + node.id + \"']\";\r\n            console.log(sel);\r\n            $ul.find(sel).remove();\r\n          });\r\n          applyMasonry();\r\n\r\n        }\r\n      };\r\n\r\n\r\n\r\n      $scope.getFilterClass = function (value) {\r\n\r\n        if (value === 1)\r\n          return 'label-success';\r\n        else if (value === 0)\r\n          return 'label-info';\r\n                else return '';\r\n      };\r\n\r\n      $scope.toggleFilter = function (label) {\r\n        if ($scope.filters[label] == 1) {\r\n          $scope.filters[label] = 0;\r\n          refreshContent();\r\n        }\r\n        else if ($scope.filters[label] == 0) {\r\n          $scope.filters[label] = 1;\r\n          refreshContent();\r\n        }\r\n                else if ($scope.filters[label] == -1) {\r\n                  for (var f in $scope.filters) {\r\n                    $scope.filters[f] = 0;\r\n                  }\r\n\r\n                  $scope.filters[label] = 1;\r\n                  refreshContent();\r\n                }\r\n\r\n\r\n      };\r\n\r\n            // triggered by selecting a filter\r\n      $scope.$watch('filterBy', function (label) {\r\n        if (label) {\r\n          $scope.filters[label] = 1;\r\n          $scope.filterBy = undefined;\r\n          refreshContent();\r\n        }\r\n\r\n      });\r\n\r\n\r\n\r\n            // triggered by selecting one or more images\r\n      $scope.$watch('selected', function (selected) { // NB selected is now an array of node indexes\r\n\r\n        if (selected && selected.length) {\r\n\r\n\r\n          var selectedNodes = selected.map(function (i) {\r\n            return $scope.nodes[i];\r\n          });\r\n\r\n            // NB if there are multiple instances of the images directive (as typically) it wont be possible ot know which one the event was sent from\r\n                    // but mainly we need to know that it wasnt sent from the graph or controller, as images currently doesnt substribe to selected event\r\n          $scope.publish('selected', { sender: 'Images', selection: { nodes: selectedNodes } });\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n      });\r\n\r\n      $scope.makeFavourite = function (node) {\r\n        console.log(node);\r\n        $scope.publish('favourite', node);\r\n\r\n      };\r\n\r\n\r\n    }\r\n  };\r\n}]);\n","angular.module('neograph.common.labels', ['neograph.neo', 'neograph.utils'])\r\n.directive('labels', ['neo', 'utils', function (neo, utils) {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'app/common/labels.html',\r\n    scope: {\r\n      node: '=?'\r\n            ,\r\n      labels: '=?'\r\n            ,\r\n      items: '=?'\r\n            ,\r\n      navpath: '@'\r\n            ,\r\n      highlight:'@?'\r\n    },\r\n    link: function ($scope, $element, $attrs) {\r\n\r\n      $scope.$watch('node', function (node) {\r\n        if (node) {\r\n          $scope.labels = $scope.node.labels;\r\n        }\r\n\r\n      });\r\n\r\n      $scope.$watch('items', function (items) {\r\n        if (items) {\r\n          $scope.labels = $scope.items.map(function (x) { return x.label; });\r\n        }\r\n\r\n      });\r\n\r\n\r\n\r\n\r\n      $scope.getClass = function (label) {\r\n        if (label === $attrs['highlight']) {\r\n          return 'label-warning';\r\n        }\r\n        else\r\n                return utils.getLabelClass($scope.node, label);\r\n      };\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n  };\r\n}]);\n","angular.module('neograph.common.network', [])\r\n.directive('network', function () {\r\n  return {\r\n\r\n    restrict:'E',\r\n    template:'<div></div>',\r\n    scope:{\r\n      graph:'=',\r\n      options:'=',\r\n      network:'=',\r\n      width:'@',\r\n      height:'@'\r\n    }\r\n        ,\r\n    link:function ($scope, $element) {\r\n\r\n      $scope.network = new vis.Network($element, $scope.graph, $scope.options);\r\n      $scope.network.setSize($scope.width + 'px', $scope.height + 'px');\r\n    }\r\n\r\n\r\n  };\r\n\r\n});\n","angular.module('neograph.common.nodeArray', ['neograph.utils'])\r\n    .directive('nodeArray', ['utils', function (utils) {\r\n      return {\r\n        replace: true,\r\n        restrict: 'EA',\r\n        templateUrl: 'app/common/nodeArray.html',\r\n        scope: {\r\n\r\n          items: '='// an array of string or  items with label property\r\n            ,\r\n          enabled: '='\r\n            ,\r\n          onselected: '&?'\r\n            ,\r\n          node: '=?'\r\n            ,\r\n          directbinding: '@?'// set this to false if passing in array of strings\r\n            ,\r\n          width: '@?'\r\n\r\n        },\r\n        link: function ($scope, $element, $attrs) {\r\n\r\n          var directBinding = $attrs['directbinding'] == 'false' ? false : true;\r\n\r\n          $scope.nodes = [];\r\n\r\n\r\n\r\n          $scope.$watch('items', function (items) {\r\n\r\n            if (items && items.length) {\r\n              console.log(items);\r\n\r\n\r\n              if (items[0] && (items[0].label || items[0].lookup)) {\r\n\r\n                $scope.nodes = items;\r\n\r\n              }\r\n              else {\r\n                directBinding = false;\r\n                $scope.nodes = items.map(function (e) { return { label: e }; });\r\n\r\n\r\n              }\r\n\r\n              console.log($scope.nodes);\r\n\r\n\r\n            }\r\n            else {\r\n              if (directBinding) {\r\n                $scope.nodes = items;\r\n              }\r\n              else {\r\n                $scope.nodes = [];\r\n              }\r\n\r\n            }\r\n          });\r\n\r\n          $($element).on('click', function () {\r\n            $($element).find('input').focus();\r\n          });\r\n\r\n            // //update items array (needed as items can be array of text items not nodes)\r\n            // $scope.$watch('nodes', function (nodes) {\r\n            //    if (!directBinding) {\r\n            //        mappingNodesToItems = true;\r\n            //        $scope.items = nodes.map(function (n) { return n.Label; })\r\n            //        mappingNodesToItems = false;\r\n            //    }\r\n\r\n            // }, true)\r\n\r\n            // $scope.getWidth = function () {\r\n            //    if ($scope.nodes) {\r\n            //        return $attrs[\"width\"] ? $attrs[\"width\"] : $scope.nodes.length > 5 ? '495px' : '230px'\r\n            //    }\r\n            //    else {\r\n            //        return null;\r\n            //    }\r\n            // }\r\n\r\n          $scope.getClass = function (node) {\r\n            return utils.getLabelClass($scope.node, node.label);\r\n          };\r\n\r\n          $scope.clickable = $attrs['onselected'] != undefined;\r\n\r\n          $scope.nodeClicked = function (node) {\r\n\r\n            if ($attrs['onselected']) {\r\n\r\n              $scope.onselected({ item: node });\r\n\r\n            }\r\n          };\r\n\r\n          var indexOf = function (node) {\r\n\r\n            var ind = -1;\r\n\r\n            $($scope.nodes).each(function (i, e) {\r\n\r\n              if ((node.label && e.label === node.label) || node.lookup && e.lookup == node.lookup) {\r\n                ind = i;\r\n                return;\r\n              }\r\n            });\r\n\r\n            return ind;\r\n\r\n          };\r\n\r\n          $scope.addNode = function (node) {\r\n            console.log(node);\r\n            console.log(directBinding);\r\n            if (indexOf(node) == -1) {\r\n              console.log('node adding');\r\n              $scope.nodes.push(node);\r\n\r\n              if (!directBinding) {\r\n                console.log('item adding');\r\n                $scope.items.push(node.label);\r\n\r\n              }\r\n\r\n            }\r\n\r\n\r\n                // else highlight the node momentarily\r\n\r\n\r\n          };\r\n\r\n          $scope.removeNode = function (node) {\r\n            console.log(node);\r\n            var ind = indexOf(node);\r\n            console.log(ind);\r\n            if (ind > -1) {\r\n              $scope.nodes.splice(ind, 1);\r\n\r\n              if (!directBinding) {\r\n                $scope.items.splice($scope.items.indexOf(node.label || node.lookup), 1);\r\n              }\r\n\r\n            }\r\n\r\n          };\r\n\r\n\r\n        }\r\n      };\r\n    }]);\n","angular.module('neograph.common.typeahead', ['neograph.utils', 'neograph.node.service'])\r\n    .directive('typeahead', ['utils', 'nodeService', function (utils, nodeService) {\r\n      return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n          choice: '=?',   // the choice should be an object for 2 way binding with label property\r\n          watchvalue: '=?',  // watchvalue should be a text string  -just for updating the textbox value when the value changes, not fed back\r\n          text: '=?', // to feed back the text value when it changes (when no item has been selected)\r\n          restrict: '=?', // options to retrict the items that can be selected = Type,Predicate,User,custom object array with label property\r\n          onselected: '&?',\r\n          autosize:'@?'\r\n        },\r\n        template: '<input type=\"text\" class=\"form-control\" />',\r\n        link: function ($scope, element, attrs) {\r\n\r\n          var placeholderDefault = 'Node...';\r\n\r\n          var $input = $(element);// .find('input');\r\n          $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\r\n\r\n          $scope.$watch('choice', function (n) {\r\n            if (n) {\r\n              $input.val(n.Label || n.label);\r\n            }\r\n          });\r\n\r\n          if (!attrs['choice']) {\r\n            $scope.$watch('watchvalue', function (n) {\r\n              $input.val(n);\r\n            });\r\n          }\r\n\r\n          if (attrs['autosize']) {\r\n\r\n            $input.css({ width: '10px' });\r\n            $input.attr('placeholder', '+');\r\n            $input.on('focus', function () {\r\n              $input.css({ width: '100px' });\r\n              $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\r\n              setTimeout(function () {\r\n                $input.css({ width: '100px' });\r\n                $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\r\n              }, 100);\r\n\r\n            });\r\n            $input.on('blur', function () {\r\n              $input.css({ width: '10px' });\r\n              $input.attr('placeholder', '+');\r\n              $input.val('');\r\n            });\r\n\r\n          }\r\n\r\n          $input.typeahead({\r\n            source: getSource(),\r\n            matcher: function (obj) {\r\n              var item = JSON.parse(obj);\r\n              return ~item.label.toLowerCase().indexOf(this.query.toLowerCase());\r\n            },\r\n            sorter: function (items) {\r\n              var beginswith = [], caseSensitive = [], caseInsensitive = [], aItem, item;\r\n              while (aItem = items.shift()) {\r\n                var item = JSON.parse(aItem);\r\n                if (!item.label.toLowerCase().indexOf(this.query.toLowerCase())) {\r\n                  beginswith.push(JSON.stringify(item));\r\n                } else if (~item.label.indexOf(this.query)) {\r\n                  caseSensitive.push(JSON.stringify(item));\r\n                } else { \r\n                  caseInsensitive.push(JSON.stringify(item));\r\n                }\r\n              }\r\n              return beginswith.concat(caseSensitive, caseInsensitive);\r\n            },\r\n            highlighter: function (obj) {\r\n              var item = JSON.parse(obj);\r\n              var query = this.query.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n              var out;\r\n              if (attrs['restrict'] === 'Predicate') {\r\n                out = new utils.Predicate(item.label).ToString().replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\r\n                  return '<strong>' + match + '</strong>';\r\n                });\r\n              } else {\r\n                out = item.label.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\r\n                  return '<strong>' + match + '</strong>';\r\n                }) + \" <div style='float:right;margin-left:8px;color:#ccc'>\" + item.type + '</div>';\r\n              }\r\n              return out;\r\n            },\r\n            updater: function (obj) {\r\n\r\n              itemSelected = true;\r\n\r\n              var item = JSON.parse(obj);\r\n\r\n              $scope.$apply(function () {\r\n\r\n                if (attrs['choice']) {\r\n                  $scope.choice = item;\r\n                }\r\n\r\n                if (attrs['onselected']) {\r\n                  $scope.onselected({ item: item });\r\n                }\r\n\r\n              });\r\n\r\n              if (!attrs['clearonselect']) {\r\n                return item.label;\r\n              }\r\n\r\n            }\r\n          });\r\n\r\n          var itemSelected = false;\r\n\r\n          $input.on('keydown', function (e) {\r\n            itemSelected = false;\r\n            if (e.keyCode == 13) { // enter\r\n\r\n              setTimeout(function () {\r\n\r\n                $scope.$apply(function () {\r\n                  if (!itemSelected) {\r\n                    $scope.text = $input.val();\r\n                    $input.val('');\r\n                  }\r\n                });\r\n              }, 100);\r\n            }\r\n          });\r\n\r\n          function getSource() {\r\n            if (attrs['restrict'] == 'Type') {\r\n              // convert types object to array\r\n              var source = [];\r\n              for (var key in utils.types) {\r\n                source.push(JSON.stringify(utils.types[key]));\r\n              }\r\n              return source;\r\n            } else if (attrs['restrict'] == 'Predicate') {\r\n              // convert predicates object to array\r\n              var source = [];\r\n              for (var key in utils.predicates) {\r\n                source.push(JSON.stringify(utils.predicates[key]));\r\n              }\r\n              return source;\r\n            } else { \r\n              return nodeSource;\r\n            }\r\n          }\r\n\r\n            // Globals & users or one or the other depending on value of restrict\r\n          var nodeSource = function (query, process) {\r\n\r\n            if ($scope.restrict && $.isArray($scope.restrict) && $scope.restrict.length > 0) {\r\n\r\n              if ($scope.restrict[0].label) {\r\n                return $scope.restrict.map(function (d) { return JSON.stringify(d); });\r\n              }\r\n              else {\r\n                return $scope.restrict.map(function (d) { return JSON.stringify({ label: d }); });\r\n              }\r\n            }\r\n            else {\r\n              nodeService.search(query, attrs['restrict']).then(function (nodes) {\r\n                process(nodes.map(function (d) {\r\n                  return JSON.stringify(d);\r\n                }));\r\n              });\r\n            }\r\n\r\n          };\r\n\r\n          $scope.$watch('restrict', function () {\r\n            $input.data('typeahead').source = getSource();\r\n          }, true);\r\n        }\r\n      };\r\n  }]);\r\n","angular.module('neograph.common.typeaheadSimple', [])\r\n.directive('typeaheadSimple', [function () {\r\n  return {\r\n    restrict: 'E',\r\n    replace: true,\r\n    scope: {\r\n      ngModel: '=?',   // the choice should be an object for 2 way binding with Lookup property\r\n      source: '='\r\n    },\r\n    template: '<input type=\"text\" />',\r\n    link: function ($scope, element, attrs) {\r\n\r\n      var placeholderDefault = '';\r\n\r\n      var $input = $(element);// .find('input');\r\n      $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\r\n\r\n\r\n      $input.typeahead({\r\n        source: $scope.source,\r\n        updater: function (item) {\r\n\r\n\r\n          $scope.$apply(function () {\r\n\r\n\r\n            $scope.ngModel = item;\r\n\r\n\r\n          });\r\n\r\n\r\n\r\n          return item;\r\n\r\n\r\n        }\r\n      });\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n  };\r\n}]);\r\n","angular.module('neograph.edge', ['neograph.neo', 'neograph.utils', 'ui.router'])\r\n    .config(function ($stateProvider) {\r\n      $stateProvider.state('admin.main.edge', {\r\n        url:'/edge/:edge',\r\n            // abstract:true,\r\n        views:{\r\n          'edgeHeader@admin':{\r\n            controller:function ($scope, $stateParams) {\r\n              if ($stateParams.edge) {\r\n                $scope.edge = JSON.parse($stateParams.edge);\r\n              }\r\n            },\r\n            templateUrl:'app/edge/edge.header.html'\r\n          }\r\n                    ,\r\n          'edge@admin':{\r\n            controller:function ($scope) {\r\n              $scope.tabs = ['Properties'];\r\n              $scope.selectedTab = 'Properties';\r\n              $scope.selectTab = function (tab) {\r\n                $scope.selectedTab = tab;\r\n              };\r\n            }\r\n                        ,\r\n            templateUrl:'app/edge/edge.html'\r\n          }\r\n        }\r\n\r\n      })\r\n        .state('admin.main.edge.view', {\r\n          url:'/view',\r\n          views:{\r\n            'properties@admin.main.edge':{\r\n              templateUrl:'app/edge/properties.html',\r\n              controller:function ($scope, $stateParams) {\r\n                if ($stateParams.edge) {\r\n                  $scope.edge = JSON.parse($stateParams.edge);\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n        })\r\n        .state('admin.main.edge.edit', {\r\n          url:'/edit',\r\n          views:{\r\n\r\n            'editproperties@admin.main.edge':{\r\n              templateUrl:'app/edge/properties.edit.html',\r\n              controller:'EditEdgeCtrl'\r\n            }\r\n\r\n          }\r\n\r\n        });\r\n\r\n    })\r\n\r\n    .controller('EditEdgeCtrl', function (neo, utils, $stateParams, $scope) {\r\n\r\n\r\n      if ($stateParams.edge) {\r\n        $scope.edge = JSON.parse($stateParams.edge);\r\n        $scope.predicateType = utils.predicates[$scope.edge.type];\r\n      }\r\n\r\n      $scope.$watch('predicateType', function (predicateType) {\r\n        if (predicateType) {\r\n          $scope.edge.type = predicateType.Lookup;\r\n        }\r\n      });\r\n\r\n      $scope.deleteEdge = function (e) {\r\n\r\n        neo.deleteEdge(e,\r\n                           $scope.activeView.data.nodes[e.startNode],\r\n                           $scope.activeView.data.nodes[e.endNode])\r\n                   .then(function () {\r\n\r\n\r\n                       // let view handle its own data ?\r\n                     delete $scope.activeView.data.edges[e.id];\r\n                     if ($scope.selection.selectedEdge && $scope.selection.selectedEdge.id === e.id) {\r\n                       $scope.selection.selectedEdge = null;\r\n                     }\r\n\r\n                     $scope.publish('deleted', { selection: { edges: [e] } });\r\n\r\n                   });\r\n\r\n      };\r\n\r\n      $scope.saveEdge = function (e) {\r\n\r\n        neo.saveEdge(e)\r\n               .then(\r\n                   function (g) {\r\n\r\n                     $scope.publish('dataUpdate', g);\r\n\r\n                       // update cache\r\n                     for (key in g.nodes) {\r\n                       $scope.activeView.data.nodes[key] = g.nodes[key];\r\n                     }\r\n\r\n                     for (key in g.edges) {\r\n                       $scope.activeView.data.edges[key] = g.edges[key];\r\n\r\n                       if ($scope.selection.selectedEdge && (key === $scope.selection.selectedEdge.id || !$scope.selection.selectedEdge.id)) {\r\n                         $scope.selection.selectedEdge = g.edges[key];\r\n                       }\r\n\r\n                     }\r\n                   });\r\n      };\r\n\r\n    });\r\n\r\n","angular.module('neograph.interaction.draggable', [])\r\n    .directive('draggable', function () {\r\n      return {\r\n\r\n        link: function ($scope, element, attrs) {\r\n\r\n          var initLeft = $(element).position().left;\r\n\r\n          $(element).draggable({\r\n            axis: 'x',\r\n            drag: function () {\r\n\r\n              var change = initLeft - $(element).position().left;\r\n\r\n              $scope.$apply(function () {\r\n                $scope.window.tabsWidth = $scope.window.tabsWidth + change;\r\n              });\r\n\r\n\r\n              initLeft = $(element).position().left;\r\n\r\n            }\r\n          });\r\n        }\r\n      };\r\n    });\r\n","angular.module('neograph.interaction', [\r\n  'neograph.interaction.draggable',\r\n  'neograph.interaction.resizable',\r\n  'neograph.interaction.selectable'\r\n]);\n","angular.module('neograph.interaction.resizable', [])\r\n.directive('resizable', function ($window) {\r\n  return {\r\n    scope: {\r\n      window: '='\r\n    },\r\n    controller: function ($scope, $element) {\r\n\r\n      var w = angular.element($window);\r\n      var getWindowDimensions = function () {\r\n        var width = w.width();\r\n        var height = w.height();\r\n        return {\r\n          'height': height,\r\n          'width': width,\r\n          'tabsWidth': $scope.window.tabsWidth,\r\n          'tabsWidthInner': $scope.window.tabsWidth - 10,\r\n          'graphWidth': width - $scope.window.tabsWidth,\r\n          'graphHeight': height - $scope.window.topBarHeight,\r\n          'topBarHeight': $scope.window.topBarHeight,\r\n          'tabsHeight': height - $scope.window.topBarHeight\r\n        };\r\n      };\r\n\r\n      $scope.window = getWindowDimensions();\r\n\r\n      $scope.$watch(getWindowDimensions, function (newValue, oldValue) {\r\n\r\n        $scope.window = newValue;\r\n\r\n      }, true);\r\n\r\n      w.bind('resize', function () {\r\n        $scope.$apply();\r\n      });\r\n\r\n            // w.bind(\"debouncedresize\", function (event) {\r\n            //    $scope.$apply();\r\n\r\n            // });\r\n\r\n    }\r\n  };\r\n});\r\n\r\n","angular.module('neograph.interaction.selectable', [])\r\n.directive('selectable', function () {\r\n  return {\r\n    scope: {\r\n      selected: '='\r\n\r\n    },\r\n    link: function ($scope, element, attrs) {\r\n\r\n      $scope.$watch($(element).find('li.ui-selected').length, function (i) {\r\n\r\n\r\n\r\n\r\n\r\n\r\n        $(element).selectable({\r\n          filter: 'li',\r\n          stop: function (event, ui) {\r\n\r\n\r\n            var selected = [];\r\n\r\n\r\n            $(element).find('li.ui-selected').each(function (i, e) {\r\n              selected.push(parseInt($(e).attr('nodeindex')));\r\n            });\r\n\r\n            $scope.$apply(function () {\r\n\r\n              $scope.selected = selected;\r\n\r\n            });\r\n\r\n          }\r\n                    ,\r\n          cancel: '.badge, .label'\r\n\r\n\r\n\r\n        });\r\n\r\n\r\n      });\r\n\r\n\r\n    }\r\n  };\r\n});\r\n\r\n\r\n\r\n\r\n\r\n","angular.module('neograph.layout', [])\r\n.directive('tabs', function () {\r\n  return {\r\n    restrict: 'E',\r\n    transclude: true,\r\n    scope: {\r\n      tabs:'=', // required to remove panes no longer available\r\n      selected: '=?'\r\n    },\r\n    controller: function ($scope) {\r\n      var panes = $scope.panes = [];\r\n      var self = this;\r\n\r\n      $scope.select = function (pane) {\r\n        angular.forEach(panes, function (pane) {\r\n          pane.selected = false;\r\n        });\r\n        pane.selected = true;\r\n        $scope.selected = pane.key;\r\n      };\r\n\r\n      this.add = function (pane) {\r\n        if (panes.length === 0) {\r\n          $scope.select(pane);\r\n        }\r\n        panes.push(pane);\r\n      };\r\n\r\n      this.remove = function (pane) {\r\n                // console.log('remove')\r\n                // console.log(pane);\r\n        angular.forEach(panes, function (p, i) {\r\n          if (pane.key == p.key) {\r\n            panes.splice(i, 1);\r\n            if (pane.selected) {\r\n              pane.selected = false;\r\n              $scope.select($scope.panes[0]);\r\n            }\r\n\r\n\r\n          }\r\n        });\r\n\r\n      };\r\n\r\n      $scope.$watch('selected', function (key) { // the title of the selected pane\r\n\r\n        if (key) {\r\n          angular.forEach(panes, function (pane) {\r\n\r\n            pane.selected = pane.key === key;\r\n          });\r\n        }\r\n\r\n      });\r\n\r\n\r\n            // remove tabs not in list (child pane only adds them)\r\n      $scope.$watch('tabs', function (tabs) { // the title of the selected pane\r\n\r\n        if (tabs) {\r\n          angular.forEach(panes, function (pane) {\r\n\r\n            if (tabs.indexOf(pane.key) === -1) {\r\n\r\n              self.remove(pane);\r\n            }\r\n          });\r\n        }\r\n\r\n      });\r\n\r\n\r\n    },\r\n    templateUrl: 'app/layout/tabs.html'\r\n  };\r\n})\r\n.directive('tabPane', function () {\r\n  return {\r\n    require: '^tabs',\r\n    restrict: 'E',\r\n    transclude: true,\r\n    scope: {\r\n      key:'@',\r\n      title: '=',\r\n      visible: '=',\r\n      active: '=?',\r\n      window:'='\r\n    },\r\n    link: function ($scope, element, attrs, tabsCtrl) {\r\n\r\n\r\n      tabsCtrl.add($scope);\r\n\r\n\r\n            // $scope.$watch('visible', function (visible) {\r\n\r\n            //    if (visible) {\r\n            //        tabsCtrl.addPane($scope);\r\n            //    }\r\n            //    else {\r\n            //        tabsCtrl.removePane($scope);\r\n\r\n            //    }\r\n\r\n            // });\r\n\r\n\r\n      $scope.$watch('active', function (active) { // the title of the selected pane\r\n\r\n        $scope.selected = active;\r\n\r\n      });\r\n\r\n\r\n    },\r\n    templateUrl: 'app/layout/tabPane.html'\r\n  };\r\n})\r\n.directive('noBubble', function () {\r\n  return {\r\n\r\n    link: function ($scope, element, attrs, tabsCtrl) {\r\n\r\n\r\n\r\n      $(element).on('keydown', function (event) {\r\n\r\n        event.stopPropagation();\r\n      });\r\n\r\n    },\r\n    templateUrl: 'app/layout/tabPane.html'\r\n  };\r\n\r\n\r\n});\n","  angular.module('neograph.models.node', ['neograph.models.predicate'])\r\n  .factory('nodeFactory', function (predicateFactory) {\r\n\r\n    function Node(data) {\r\n\r\n      this.labels = [];\r\n\r\n      Object.assign(this, data);\r\n\r\n        // instead i think i should call the service to get the reverse\r\n      for (var relKey in this.relationships) {\r\n        var rel = this.relationships[relKey];\r\n        rel.predicate = predicateFactory.create(rel.predicate);\r\n      }\r\n\r\n      if (!this.label && this.lookup) {\r\n        this.label = this.lookup;\r\n      }\r\n\r\n\r\n    }\r\n\r\n    Node.prototype.isPicture = function () {\r\n\r\n      return this.labels.indexOf('Picture') > -1;\r\n\r\n    };\r\n\r\n    Node.prototype.isPerson = function () {\r\n\r\n      return this.labels.indexOf('Person') > -1;\r\n\r\n    };\r\n\r\n    Node.prototype.isProperty = function () {\r\n\r\n      return this.labels.indexOf('Property') > -1;\r\n\r\n    };\r\n\r\n\r\n\r\n    Node.prototype.isCustomField = function (key) {\r\n\r\n      return key != 'lookup'\r\n            && key != 'class'\r\n            && key != 'label'\r\n            && key != 'description'\r\n            && key != 'text' &&\r\n            key != 'name' &&\r\n            key != 'systemInfo' &&\r\n            key != 'labels' &&\r\n            key != 'id' &&\r\n            key != 'created' &&\r\n            key != 'image' &&\r\n            key != 'relationships' &&\r\n            key != 'labelled';\r\n\r\n    };\r\n\r\n\r\n    return {\r\n      create:function (data) {\r\n        return new Node(data);\r\n      }\r\n    };\r\n\r\n\r\n  });\r\n\r\n\r\n\n","  angular.module('neograph.models.predicate', [])\r\n  .factory('predicateFactory', function () {\r\n\r\n    function Predicate(data) {\r\n\r\n      Object.assign(this, data);\r\n\r\n    }\r\n\r\n    Predicate.prototype.setDirection = function (direction) {\r\n      this.direction = direction;\r\n      return this;\r\n    };\r\n\r\n    Predicate.prototype.toString = function () {\r\n      if (this.direction === 'in' && !this.symmetrical) {\r\n        if (this.reverse) { // use reverse if present\r\n          return this.reverse.replace(/_/g, ' ').toLowerCase();\r\n        }\r\n        else {\r\n          var lookup = this.lookup.toUpperCase();\r\n          if (lookup === 'CREATED' || lookup === 'CREATES')\r\n            return 'created by';\r\n          else if (lookup === 'INFLUENCES')\r\n            return 'influenced by';\r\n                else if (lookup === 'INSPIRES')\r\n                  return 'inspired by';\r\n                else if (lookup === 'ANTICIPATES')\r\n                  return 'anticipated by';\r\n                else if (lookup === 'DEVELOPS')\r\n                  return 'developed by';\r\n                else if (lookup === 'DEPICTS')\r\n                  return 'depicted by';\r\n                else if (lookup === 'TYPE_OF')\r\n                  return 'type(s)';\r\n                else\r\n                    return '(' + this.lookup.replace(/_/g, ' ').toLowerCase() + ')';\r\n        }\r\n      }\r\n\r\n       // if (!this.isDirectional || !this.direction || this.direction === \"out\") {\r\n      return this.lookup.replace(/_/g, ' ').toLowerCase();\r\n\r\n\r\n    };\r\n\r\n    Predicate.prototype.flip = function () {\r\n\r\n      if (!this.isDirectional) {\r\n        return;\r\n      }\r\n      if (this.direction === 'in') {\r\n        this.setDirection('out');\r\n      }\r\n      else {\r\n        this.setDirection('in');\r\n      }\r\n      return this;\r\n\r\n    };\r\n\r\n    return {\r\n      create:function (data) {\r\n        return new Predicate(data);\r\n      }\r\n    };\r\n\r\n\r\n  });\r\n\r\n\r\n\n","(function() {\r\n  'use strict';\r\n\r\n  angular.module('neograph.node.controller',[])\r\n    .controller('NodeCtrl', controller);\r\n\r\n  function controller($scope, $stateParams, nodeService) {\r\n    var vm = this;\r\n    vm.selection = {\r\n      selectedNode: null,\r\n      selectedEdge: null,\r\n      hoverNode: null\r\n    };\r\n    vm.tabs = ['Properties', 'Relationships', 'Images'];\r\n    vm.selectedTab = 'Properties';\r\n    vm.selectTab = function (tab) {\r\n      vm.selectedTab = tab;\r\n    };\r\n    activate();\r\n    function activate() {\r\n      if ($stateParams.node) {\r\n        nodeService.get($stateParams.node, true).then(function (node) {\r\n          vm.selection.selectedNode = node;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n})();","'use strict';\n\nangular.module('templates', []);\nvar app = angular.module('Neograph', ['templates', 'publishSubscribe', 'ui.router', 'ngSanitize', 'neograph.common', 'neograph.edge', 'neograph.interaction', 'neograph.layout', 'neograph.neo', 'neograph.node', 'neograph.query']).config([\"$stateProvider\", \"$urlRouterProvider\", function ($stateProvider, $urlRouterProvider) {\n  $stateProvider.state('admin', {\n    url: '/admin?querypreset',\n    controller: 'AdminCtrl as vm',\n    views: {\n      '@': {\n        templateUrl: 'app/partials/admin.html'\n      },\n      'search@admin': {\n        controller: 'SearchCtrl as vm',\n        templateUrl: 'app/node/search/search.html'\n      },\n      'query@admin': {\n        controller: 'QueryCtrl',\n        templateUrl: 'app/query/query.html'\n      }\n    }\n  }).state('search', {\n    url: '/search',\n    templateUrl: 'app/partials/search.html'\n  });\n\n  $urlRouterProvider.otherwise('/admin');\n}]).controller('AdminCtrl', [\"$scope\", \"$stateParams\", \"neo\", \"queryPresets\", \"utils\", \"session\", function ($scope, $stateParams, neo, queryPresets, utils, session) {\n\n  var vm = this;\n\n  $scope.$watch('$stateParams.node', function (state) {\n    console.log(state);\n  });\n\n  function shouldEnabledAddToGraph() {\n    $scope.enableAddToGraph = $scope.selection.selectedNode && $scope.selection.selectedNode.id && $scope.activeView.type === 'Graph' && !$scope.activeView.data.nodes[$scope.selection.selectedNode.id];\n  }\n\n  $scope.$watch('selection.selectedEdge', function (edge) {\n    if (edge) {\n      $scope.selection.selectedNode = undefined;\n      $scope.selection.multiple = undefined;\n      $scope.selection.images = [];\n    }\n  });\n\n  $scope.subscribe('favourite', function (node) {\n    neo.saveFavourite(node, session.user);\n  });\n\n  $scope.subscribe('newEdge', function (newEdge) {\n    $scope.$apply(function () {\n      $scope.selection.selectedEdge = newEdge;\n      $scope.tabs = ['Properties'];\n      $scope.selectedTab = 'Properties';\n    });\n  });\n}]).run([\"$rootScope\", \"PubSubService\", function ($rootScope, PubSubService) {\n  PubSubService.init($rootScope);\n}]);\n'use strict';\n\nangular.module('publishSubscribe', []).service('PubSubService', function () {\n  return {\n    init: function init(scope) {\n      // Keep a dictionary to store the events and its subscriptions\n      var publishEventMap = {};\n      // Register publish events\n      scope.constructor.prototype.publish = function publish() {\n        var _this = this;\n\n        // Get event and rest of the data\n        var args = [].slice.call(arguments);\n        var evnt = args.splice(0, 1);\n        if (!publishEventMap[evnt]) {\n          publishEventMap[evnt] = [];\n        }\n        // Loop though each handlerMap and invoke the handler\n        publishEventMap[evnt].forEach(function (handlerMap) {\n          handlerMap.handler.apply(_this, args);\n        });\n      };\n      // Register Subscribe events\n      scope.constructor.prototype.subscribe = function subscribe(evnt, handler) {\n        var _this2 = this;\n\n        var handlers = publishEventMap[evnt] = publishEventMap[evnt] || [];\n        // Just keep the scopeid for reference later for cleanup\n        handlers.push({ $id: this.$id, handler: handler });\n        // When scope is destroy remove the handlers that it has subscribed.\n        this.$on('$destroy', function () {\n          for (var i = 0, l = handlers.length; i < l; i++) {\n            if (handlers[i].$id === _this2.$id) {\n              handlers.splice(i, 1);\n              break;\n            }\n          }\n        });\n      };\n    }\n  };\n});\n'use strict';\n\nangular.module('neograph.settings', []).factory('settings', function () {\n  return { apiRoot: 'http://localhost:1337' };\n});\n'use strict';\n\nangular.module('neograph.common', ['neograph.common.filter', 'neograph.common.filters', 'neograph.common.images', 'neograph.common.labels', 'neograph.common.network', 'neograph.common.nodeArray', 'neograph.common.typeahead', 'neograph.common.typeaheadSimple']);\n'use strict';\n\nangular.module('neograph.common.filter', []).directive('filter', function () {\n  return {\n    replace: true,\n    restrict: 'E',\n    templateUrl: 'app/common/filter.html',\n    scope: {\n\n      init: '=' // an array of labels\n\n      , enabled: '=',\n\n      process: '&'\n\n    },\n    link: function link($scope, $element, $attrs) {\n\n      $scope.filters = {};\n\n      $scope.$watch('init', function (labels) {\n\n        var filters = {};\n        angular.forEach(labels, function (f) {\n          filters[f] = 0;\n        });\n\n        $scope.filters = filters;\n      });\n\n      $scope.getFilterClass = function (value) {\n\n        if (value === 1) return 'label-success';else if (value === 0) return 'label-info';else return '';\n      };\n\n      $scope.toggleFilter = function (label) {\n        if ($scope.filters[label] == 1) {\n          $scope.filters[label] = 0;\n        } else if ($scope.filters[label] == 0) {\n          $scope.filters[label] = 1;\n        } else if ($scope.filters[label] == -1) {\n          for (var f in $scope.filters) {\n            $scope.filters[f] = 0;\n          }\n          $scope.filters[label] = 1;\n        }\n\n        var labels = [];\n        for (var f in $scope.filters) {\n\n          if ($scope.filters[f] === 1) {\n            labels.push(f);\n          }\n        }\n\n        $scope.process({ labels: labels });\n      };\n\n      $scope.$watch('enabled', function (labels) {\n        // labels = selectable labels following filtering\n\n        if (labels && labels.length) {\n          for (var f in $scope.filters) {\n\n            if ($.inArray(f, labels) == -1) {\n              // disable filter if not in list\n              $scope.filters[f] = -1;\n            } else if ($scope.filters[f] == -1) {\n              // enable filter if in list and previously disabled\n              $scope.filters[f] = 0;\n            }\n          }\n        } else {\n\n          for (var f in $scope.filters) {\n            $scope.filters[f] = 0;\n          }\n        }\n      });\n    }\n  };\n});\n'use strict';\n\nangular.module('neograph.common.filters', []).filter('checkmark', function () {\n  return function (input) {\n    return input ? '✓' : '✘';\n  };\n}).filter('predicate', function () {\n  return function (input) {\n    return input ? '✓' : '✘';\n  };\n});\n'use strict';\n\nangular.module('neograph.common.images', ['neograph.neo', 'neograph.session']).directive('images', ['neo', 'session', function (neo) {\n      return {\n            replace: true,\n            restrict: 'E',\n            templateUrl: 'app/common/images.html',\n            scope: {\n                  editing: '=',\n                  nodes: '=' // must be an array to preserve sort order\n                  , active: '=',\n                  updatemasonry: '=' // required to update masonry on resize\n\n            },\n            link: function link($scope, $element, $attrs) {\n\n                  var $ul = $($element).find('ul');\n\n                  $scope.items = {};\n\n                  $scope.$watch('nodes', function (nodes) {\n                        $ul.removeClass('masonryLoaded');\n                        $scope.items = nodes;\n                        applyMasonry();\n                  });\n\n                  $scope.$watch('updatemasonry', function () {\n                        if ($ul.hasClass('masonry')) {\n                              $ul.masonry('reload');\n                        }\n                  });\n\n                  $scope.$watch('active', applyMasonry);\n\n                  var applyMasonry = function applyMasonry() {\n\n                        //    if ($scope.updatemasonry) {\n\n                        setTimeout(function () {\n\n                              if ($ul.hasClass('masonry')) {\n                                    $ul.masonry('reload');\n                              } else {\n                                    $ul.masonry({\n                                          nodeselector: 'li'\n                                          // ,\n                                          // columnWidth: 1,\n                                          // \"isFitWidth\": true\n                                    });\n                              }\n\n                              $ul.addClass('masonryLoaded');\n                        }, 100);\n                        //   }\n                        //     else {\n                        //   $ul.addClass('masonryLoaded');\n                        // /     }\n                  };\n\n                  $scope.navigate = function (label) {\n                        $scope.publish('query', {\n                              name: label,\n                              view: label,\n                              type: 'Grid',\n                              queryGenerator: { id: 'nodeFilter', options: { node: { Label: label } } }\n                        });\n                  };\n\n                  $scope.selectAll = function () {\n\n                        if ($ul.find('li.ui-selected').length < $ul.find('li').length) {\n                              $ul.find('li').addClass('ui-selected');\n                              $scope.selected = $scope.nodes.map(function (e, i) {\n                                    return i;\n                              });\n                        } else {\n                              $ul.find('li').removeClass('ui-selected');\n                              $scope.selected = [];\n                        }\n                  };\n\n                  // this assumes that we are looking at a view of not deleted items\n                  $scope.subscribe('deleted', function (params) {\n\n                        // alternatively i could have a deep watch on nodearray and update that\n                        removeItems(params.selection.nodes);\n                  });\n\n                  // this assumes that we are looking at a view of deleted items\n                  $scope.subscribe('restored', function (params) {\n\n                        // alternatively i could have a deep watch on nodearray and update that\n                        removeItems(params.selection.nodes);\n                  });\n\n                  var removeItems = function removeItems(items) {\n\n                        if (items && items.length) {\n                              angular.forEach(items, function (node) {\n                                    var sel = \"li[nodeid='\" + node.id + \"']\";\n                                    console.log(sel);\n                                    $ul.find(sel).remove();\n                              });\n                              applyMasonry();\n                        }\n                  };\n\n                  $scope.getFilterClass = function (value) {\n\n                        if (value === 1) return 'label-success';else if (value === 0) return 'label-info';else return '';\n                  };\n\n                  $scope.toggleFilter = function (label) {\n                        if ($scope.filters[label] == 1) {\n                              $scope.filters[label] = 0;\n                              refreshContent();\n                        } else if ($scope.filters[label] == 0) {\n                              $scope.filters[label] = 1;\n                              refreshContent();\n                        } else if ($scope.filters[label] == -1) {\n                              for (var f in $scope.filters) {\n                                    $scope.filters[f] = 0;\n                              }\n\n                              $scope.filters[label] = 1;\n                              refreshContent();\n                        }\n                  };\n\n                  // triggered by selecting a filter\n                  $scope.$watch('filterBy', function (label) {\n                        if (label) {\n                              $scope.filters[label] = 1;\n                              $scope.filterBy = undefined;\n                              refreshContent();\n                        }\n                  });\n\n                  // triggered by selecting one or more images\n                  $scope.$watch('selected', function (selected) {\n                        // NB selected is now an array of node indexes\n\n                        if (selected && selected.length) {\n\n                              var selectedNodes = selected.map(function (i) {\n                                    return $scope.nodes[i];\n                              });\n\n                              // NB if there are multiple instances of the images directive (as typically) it wont be possible ot know which one the event was sent from\n                              // but mainly we need to know that it wasnt sent from the graph or controller, as images currently doesnt substribe to selected event\n                              $scope.publish('selected', { sender: 'Images', selection: { nodes: selectedNodes } });\n                        }\n                  });\n\n                  $scope.makeFavourite = function (node) {\n                        console.log(node);\n                        $scope.publish('favourite', node);\n                  };\n            }\n      };\n}]);\n'use strict';\n\nangular.module('neograph.common.labels', ['neograph.neo', 'neograph.utils']).directive('labels', ['neo', 'utils', function (neo, utils) {\n      return {\n            restrict: 'E',\n            templateUrl: 'app/common/labels.html',\n            scope: {\n                  node: '=?',\n\n                  labels: '=?',\n\n                  items: '=?',\n\n                  navpath: '@',\n\n                  highlight: '@?'\n            },\n            link: function link($scope, $element, $attrs) {\n\n                  $scope.$watch('node', function (node) {\n                        if (node) {\n                              $scope.labels = $scope.node.labels;\n                        }\n                  });\n\n                  $scope.$watch('items', function (items) {\n                        if (items) {\n                              $scope.labels = $scope.items.map(function (x) {\n                                    return x.label;\n                              });\n                        }\n                  });\n\n                  $scope.getClass = function (label) {\n                        if (label === $attrs['highlight']) {\n                              return 'label-warning';\n                        } else return utils.getLabelClass($scope.node, label);\n                  };\n            }\n      };\n}]);\n'use strict';\n\nangular.module('neograph.common.network', []).directive('network', function () {\n  return {\n\n    restrict: 'E',\n    template: '<div></div>',\n    scope: {\n      graph: '=',\n      options: '=',\n      network: '=',\n      width: '@',\n      height: '@'\n    },\n\n    link: function link($scope, $element) {\n\n      $scope.network = new vis.Network($element, $scope.graph, $scope.options);\n      $scope.network.setSize($scope.width + 'px', $scope.height + 'px');\n    }\n\n  };\n});\n'use strict';\n\nangular.module('neograph.common.nodeArray', ['neograph.utils']).directive('nodeArray', ['utils', function (utils) {\n  return {\n    replace: true,\n    restrict: 'EA',\n    templateUrl: 'app/common/nodeArray.html',\n    scope: {\n\n      items: '=' // an array of string or  items with label property\n\n      , enabled: '=',\n\n      onselected: '&?',\n\n      node: '=?',\n\n      directbinding: '@?' // set this to false if passing in array of strings\n\n      , width: '@?'\n\n    },\n    link: function link($scope, $element, $attrs) {\n\n      var directBinding = $attrs['directbinding'] == 'false' ? false : true;\n\n      $scope.nodes = [];\n\n      $scope.$watch('items', function (items) {\n\n        if (items && items.length) {\n          console.log(items);\n\n          if (items[0] && (items[0].label || items[0].lookup)) {\n\n            $scope.nodes = items;\n          } else {\n            directBinding = false;\n            $scope.nodes = items.map(function (e) {\n              return { label: e };\n            });\n          }\n\n          console.log($scope.nodes);\n        } else {\n          if (directBinding) {\n            $scope.nodes = items;\n          } else {\n            $scope.nodes = [];\n          }\n        }\n      });\n\n      $($element).on('click', function () {\n        $($element).find('input').focus();\n      });\n\n      // //update items array (needed as items can be array of text items not nodes)\n      // $scope.$watch('nodes', function (nodes) {\n      //    if (!directBinding) {\n      //        mappingNodesToItems = true;\n      //        $scope.items = nodes.map(function (n) { return n.Label; })\n      //        mappingNodesToItems = false;\n      //    }\n\n      // }, true)\n\n      // $scope.getWidth = function () {\n      //    if ($scope.nodes) {\n      //        return $attrs[\"width\"] ? $attrs[\"width\"] : $scope.nodes.length > 5 ? '495px' : '230px'\n      //    }\n      //    else {\n      //        return null;\n      //    }\n      // }\n\n      $scope.getClass = function (node) {\n        return utils.getLabelClass($scope.node, node.label);\n      };\n\n      $scope.clickable = $attrs['onselected'] != undefined;\n\n      $scope.nodeClicked = function (node) {\n\n        if ($attrs['onselected']) {\n\n          $scope.onselected({ item: node });\n        }\n      };\n\n      var indexOf = function indexOf(node) {\n\n        var ind = -1;\n\n        $($scope.nodes).each(function (i, e) {\n\n          if (node.label && e.label === node.label || node.lookup && e.lookup == node.lookup) {\n            ind = i;\n            return;\n          }\n        });\n\n        return ind;\n      };\n\n      $scope.addNode = function (node) {\n        console.log(node);\n        console.log(directBinding);\n        if (indexOf(node) == -1) {\n          console.log('node adding');\n          $scope.nodes.push(node);\n\n          if (!directBinding) {\n            console.log('item adding');\n            $scope.items.push(node.label);\n          }\n        }\n\n        // else highlight the node momentarily\n      };\n\n      $scope.removeNode = function (node) {\n        console.log(node);\n        var ind = indexOf(node);\n        console.log(ind);\n        if (ind > -1) {\n          $scope.nodes.splice(ind, 1);\n\n          if (!directBinding) {\n            $scope.items.splice($scope.items.indexOf(node.label || node.lookup), 1);\n          }\n        }\n      };\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.common.typeahead', ['neograph.utils', 'neograph.node.service']).directive('typeahead', ['utils', 'nodeService', function (utils, nodeService) {\n  return {\n    restrict: 'E',\n    replace: true,\n    scope: {\n      choice: '=?', // the choice should be an object for 2 way binding with label property\n      watchvalue: '=?', // watchvalue should be a text string  -just for updating the textbox value when the value changes, not fed back\n      text: '=?', // to feed back the text value when it changes (when no item has been selected)\n      restrict: '=?', // options to retrict the items that can be selected = Type,Predicate,User,custom object array with label property\n      onselected: '&?',\n      autosize: '@?'\n    },\n    template: '<input type=\"text\" class=\"form-control\" />',\n    link: function link($scope, element, attrs) {\n\n      var placeholderDefault = 'Node...';\n\n      var $input = $(element); // .find('input');\n      $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\n\n      $scope.$watch('choice', function (n) {\n        if (n) {\n          $input.val(n.Label || n.label);\n        }\n      });\n\n      if (!attrs['choice']) {\n        $scope.$watch('watchvalue', function (n) {\n          $input.val(n);\n        });\n      }\n\n      if (attrs['autosize']) {\n\n        $input.css({ width: '10px' });\n        $input.attr('placeholder', '+');\n        $input.on('focus', function () {\n          $input.css({ width: '100px' });\n          $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\n          setTimeout(function () {\n            $input.css({ width: '100px' });\n            $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\n          }, 100);\n        });\n        $input.on('blur', function () {\n          $input.css({ width: '10px' });\n          $input.attr('placeholder', '+');\n          $input.val('');\n        });\n      }\n\n      $input.typeahead({\n        source: getSource(),\n        matcher: function matcher(obj) {\n          var item = JSON.parse(obj);\n          return ~item.label.toLowerCase().indexOf(this.query.toLowerCase());\n        },\n        sorter: function sorter(items) {\n          var beginswith = [],\n              caseSensitive = [],\n              caseInsensitive = [],\n              aItem,\n              item;\n          while (aItem = items.shift()) {\n            var item = JSON.parse(aItem);\n            if (!item.label.toLowerCase().indexOf(this.query.toLowerCase())) {\n              beginswith.push(JSON.stringify(item));\n            } else if (~item.label.indexOf(this.query)) {\n              caseSensitive.push(JSON.stringify(item));\n            } else {\n              caseInsensitive.push(JSON.stringify(item));\n            }\n          }\n          return beginswith.concat(caseSensitive, caseInsensitive);\n        },\n        highlighter: function highlighter(obj) {\n          var item = JSON.parse(obj);\n          var query = this.query.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n          var out;\n          if (attrs['restrict'] === 'Predicate') {\n            out = new utils.Predicate(item.label).ToString().replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\n              return '<strong>' + match + '</strong>';\n            });\n          } else {\n            out = item.label.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {\n              return '<strong>' + match + '</strong>';\n            }) + \" <div style='float:right;margin-left:8px;color:#ccc'>\" + item.type + '</div>';\n          }\n          return out;\n        },\n        updater: function updater(obj) {\n\n          itemSelected = true;\n\n          var item = JSON.parse(obj);\n\n          $scope.$apply(function () {\n\n            if (attrs['choice']) {\n              $scope.choice = item;\n            }\n\n            if (attrs['onselected']) {\n              $scope.onselected({ item: item });\n            }\n          });\n\n          if (!attrs['clearonselect']) {\n            return item.label;\n          }\n        }\n      });\n\n      var itemSelected = false;\n\n      $input.on('keydown', function (e) {\n        itemSelected = false;\n        if (e.keyCode == 13) {\n          // enter\n\n          setTimeout(function () {\n\n            $scope.$apply(function () {\n              if (!itemSelected) {\n                $scope.text = $input.val();\n                $input.val('');\n              }\n            });\n          }, 100);\n        }\n      });\n\n      function getSource() {\n        if (attrs['restrict'] == 'Type') {\n          // convert types object to array\n          var source = [];\n          for (var key in utils.types) {\n            source.push(JSON.stringify(utils.types[key]));\n          }\n          return source;\n        } else if (attrs['restrict'] == 'Predicate') {\n          // convert predicates object to array\n          var source = [];\n          for (var key in utils.predicates) {\n            source.push(JSON.stringify(utils.predicates[key]));\n          }\n          return source;\n        } else {\n          return nodeSource;\n        }\n      }\n\n      // Globals & users or one or the other depending on value of restrict\n      var nodeSource = function nodeSource(query, process) {\n\n        if ($scope.restrict && $.isArray($scope.restrict) && $scope.restrict.length > 0) {\n\n          if ($scope.restrict[0].label) {\n            return $scope.restrict.map(function (d) {\n              return JSON.stringify(d);\n            });\n          } else {\n            return $scope.restrict.map(function (d) {\n              return JSON.stringify({ label: d });\n            });\n          }\n        } else {\n          nodeService.search(query, attrs['restrict']).then(function (nodes) {\n            process(nodes.map(function (d) {\n              return JSON.stringify(d);\n            }));\n          });\n        }\n      };\n\n      $scope.$watch('restrict', function () {\n        $input.data('typeahead').source = getSource();\n      }, true);\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.common.typeaheadSimple', []).directive('typeaheadSimple', [function () {\n  return {\n    restrict: 'E',\n    replace: true,\n    scope: {\n      ngModel: '=?', // the choice should be an object for 2 way binding with Lookup property\n      source: '='\n    },\n    template: '<input type=\"text\" />',\n    link: function link($scope, element, attrs) {\n\n      var placeholderDefault = '';\n\n      var $input = $(element); // .find('input');\n      $input.attr('placeholder', attrs['placeholder'] || placeholderDefault);\n\n      $input.typeahead({\n        source: $scope.source,\n        updater: function updater(item) {\n\n          $scope.$apply(function () {\n\n            $scope.ngModel = item;\n          });\n\n          return item;\n        }\n      });\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.edge', ['neograph.neo', 'neograph.utils', 'ui.router']).config([\"$stateProvider\", function ($stateProvider) {\n  $stateProvider.state('admin.main.edge', {\n    url: '/edge/:edge',\n    // abstract:true,\n    views: {\n      'edgeHeader@admin': {\n        controller: [\"$scope\", \"$stateParams\", function controller($scope, $stateParams) {\n          if ($stateParams.edge) {\n            $scope.edge = JSON.parse($stateParams.edge);\n          }\n        }],\n        templateUrl: 'app/edge/edge.header.html'\n      },\n\n      'edge@admin': {\n        controller: [\"$scope\", function controller($scope) {\n          $scope.tabs = ['Properties'];\n          $scope.selectedTab = 'Properties';\n          $scope.selectTab = function (tab) {\n            $scope.selectedTab = tab;\n          };\n        }],\n\n        templateUrl: 'app/edge/edge.html'\n      }\n    }\n\n  }).state('admin.main.edge.view', {\n    url: '/view',\n    views: {\n      'properties@admin.main.edge': {\n        templateUrl: 'app/edge/properties.html',\n        controller: [\"$scope\", \"$stateParams\", function controller($scope, $stateParams) {\n          if ($stateParams.edge) {\n            $scope.edge = JSON.parse($stateParams.edge);\n          }\n        }]\n      }\n    }\n\n  }).state('admin.main.edge.edit', {\n    url: '/edit',\n    views: {\n\n      'editproperties@admin.main.edge': {\n        templateUrl: 'app/edge/properties.edit.html',\n        controller: 'EditEdgeCtrl'\n      }\n\n    }\n\n  });\n}]).controller('EditEdgeCtrl', [\"neo\", \"utils\", \"$stateParams\", \"$scope\", function (neo, utils, $stateParams, $scope) {\n\n  if ($stateParams.edge) {\n    $scope.edge = JSON.parse($stateParams.edge);\n    $scope.predicateType = utils.predicates[$scope.edge.type];\n  }\n\n  $scope.$watch('predicateType', function (predicateType) {\n    if (predicateType) {\n      $scope.edge.type = predicateType.Lookup;\n    }\n  });\n\n  $scope.deleteEdge = function (e) {\n\n    neo.deleteEdge(e, $scope.activeView.data.nodes[e.startNode], $scope.activeView.data.nodes[e.endNode]).then(function () {\n\n      // let view handle its own data ?\n      delete $scope.activeView.data.edges[e.id];\n      if ($scope.selection.selectedEdge && $scope.selection.selectedEdge.id === e.id) {\n        $scope.selection.selectedEdge = null;\n      }\n\n      $scope.publish('deleted', { selection: { edges: [e] } });\n    });\n  };\n\n  $scope.saveEdge = function (e) {\n\n    neo.saveEdge(e).then(function (g) {\n\n      $scope.publish('dataUpdate', g);\n\n      // update cache\n      for (key in g.nodes) {\n        $scope.activeView.data.nodes[key] = g.nodes[key];\n      }\n\n      for (key in g.edges) {\n        $scope.activeView.data.edges[key] = g.edges[key];\n\n        if ($scope.selection.selectedEdge && (key === $scope.selection.selectedEdge.id || !$scope.selection.selectedEdge.id)) {\n          $scope.selection.selectedEdge = g.edges[key];\n        }\n      }\n    });\n  };\n}]);\n'use strict';\n\nangular.module('neograph.interaction.draggable', []).directive('draggable', function () {\n  return {\n\n    link: function link($scope, element, attrs) {\n\n      var initLeft = $(element).position().left;\n\n      $(element).draggable({\n        axis: 'x',\n        drag: function drag() {\n\n          var change = initLeft - $(element).position().left;\n\n          $scope.$apply(function () {\n            $scope.window.tabsWidth = $scope.window.tabsWidth + change;\n          });\n\n          initLeft = $(element).position().left;\n        }\n      });\n    }\n  };\n});\n'use strict';\n\nangular.module('neograph.interaction', ['neograph.interaction.draggable', 'neograph.interaction.resizable', 'neograph.interaction.selectable']);\n'use strict';\n\nangular.module('neograph.interaction.resizable', []).directive('resizable', [\"$window\", function ($window) {\n  return {\n    scope: {\n      window: '='\n    },\n    controller: [\"$scope\", \"$element\", function controller($scope, $element) {\n\n      var w = angular.element($window);\n      var getWindowDimensions = function getWindowDimensions() {\n        var width = w.width();\n        var height = w.height();\n        return {\n          'height': height,\n          'width': width,\n          'tabsWidth': $scope.window.tabsWidth,\n          'tabsWidthInner': $scope.window.tabsWidth - 10,\n          'graphWidth': width - $scope.window.tabsWidth,\n          'graphHeight': height - $scope.window.topBarHeight,\n          'topBarHeight': $scope.window.topBarHeight,\n          'tabsHeight': height - $scope.window.topBarHeight\n        };\n      };\n\n      $scope.window = getWindowDimensions();\n\n      $scope.$watch(getWindowDimensions, function (newValue, oldValue) {\n\n        $scope.window = newValue;\n      }, true);\n\n      w.bind('resize', function () {\n        $scope.$apply();\n      });\n\n      // w.bind(\"debouncedresize\", function (event) {\n      //    $scope.$apply();\n\n      // });\n    }]\n  };\n}]);\n'use strict';\n\nangular.module('neograph.interaction.selectable', []).directive('selectable', function () {\n  return {\n    scope: {\n      selected: '='\n\n    },\n    link: function link($scope, element, attrs) {\n\n      $scope.$watch($(element).find('li.ui-selected').length, function (i) {\n\n        $(element).selectable({\n          filter: 'li',\n          stop: function stop(event, ui) {\n\n            var selected = [];\n\n            $(element).find('li.ui-selected').each(function (i, e) {\n              selected.push(parseInt($(e).attr('nodeindex')));\n            });\n\n            $scope.$apply(function () {\n\n              $scope.selected = selected;\n            });\n          },\n\n          cancel: '.badge, .label'\n\n        });\n      });\n    }\n  };\n});\n'use strict';\n\nangular.module('neograph.layout', []).directive('tabs', function () {\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      tabs: '=', // required to remove panes no longer available\n      selected: '=?'\n    },\n    controller: [\"$scope\", function controller($scope) {\n      var panes = $scope.panes = [];\n      var self = this;\n\n      $scope.select = function (pane) {\n        angular.forEach(panes, function (pane) {\n          pane.selected = false;\n        });\n        pane.selected = true;\n        $scope.selected = pane.key;\n      };\n\n      this.add = function (pane) {\n        if (panes.length === 0) {\n          $scope.select(pane);\n        }\n        panes.push(pane);\n      };\n\n      this.remove = function (pane) {\n        // console.log('remove')\n        // console.log(pane);\n        angular.forEach(panes, function (p, i) {\n          if (pane.key == p.key) {\n            panes.splice(i, 1);\n            if (pane.selected) {\n              pane.selected = false;\n              $scope.select($scope.panes[0]);\n            }\n          }\n        });\n      };\n\n      $scope.$watch('selected', function (key) {\n        // the title of the selected pane\n\n        if (key) {\n          angular.forEach(panes, function (pane) {\n\n            pane.selected = pane.key === key;\n          });\n        }\n      });\n\n      // remove tabs not in list (child pane only adds them)\n      $scope.$watch('tabs', function (tabs) {\n        // the title of the selected pane\n\n        if (tabs) {\n          angular.forEach(panes, function (pane) {\n\n            if (tabs.indexOf(pane.key) === -1) {\n\n              self.remove(pane);\n            }\n          });\n        }\n      });\n    }],\n    templateUrl: 'app/layout/tabs.html'\n  };\n}).directive('tabPane', function () {\n  return {\n    require: '^tabs',\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      key: '@',\n      title: '=',\n      visible: '=',\n      active: '=?',\n      window: '='\n    },\n    link: function link($scope, element, attrs, tabsCtrl) {\n\n      tabsCtrl.add($scope);\n\n      // $scope.$watch('visible', function (visible) {\n\n      //    if (visible) {\n      //        tabsCtrl.addPane($scope);\n      //    }\n      //    else {\n      //        tabsCtrl.removePane($scope);\n\n      //    }\n\n      // });\n\n      $scope.$watch('active', function (active) {\n        // the title of the selected pane\n\n        $scope.selected = active;\n      });\n    },\n    templateUrl: 'app/layout/tabPane.html'\n  };\n}).directive('noBubble', function () {\n  return {\n\n    link: function link($scope, element, attrs, tabsCtrl) {\n\n      $(element).on('keydown', function (event) {\n\n        event.stopPropagation();\n      });\n    },\n    templateUrl: 'app/layout/tabPane.html'\n  };\n});\n'use strict';\n\nangular.module('neograph.models.node', ['neograph.models.predicate']).factory('nodeFactory', [\"predicateFactory\", function (predicateFactory) {\n\n    function Node(data) {\n\n        this.labels = [];\n\n        Object.assign(this, data);\n\n        // instead i think i should call the service to get the reverse\n        for (var relKey in this.relationships) {\n            var rel = this.relationships[relKey];\n            rel.predicate = predicateFactory.create(rel.predicate);\n        }\n\n        if (!this.label && this.lookup) {\n            this.label = this.lookup;\n        }\n    }\n\n    Node.prototype.isPicture = function () {\n\n        return this.labels.indexOf('Picture') > -1;\n    };\n\n    Node.prototype.isPerson = function () {\n\n        return this.labels.indexOf('Person') > -1;\n    };\n\n    Node.prototype.isProperty = function () {\n\n        return this.labels.indexOf('Property') > -1;\n    };\n\n    Node.prototype.isCustomField = function (key) {\n\n        return key != 'lookup' && key != 'class' && key != 'label' && key != 'description' && key != 'text' && key != 'name' && key != 'systemInfo' && key != 'labels' && key != 'id' && key != 'created' && key != 'image' && key != 'relationships' && key != 'labelled';\n    };\n\n    return {\n        create: function create(data) {\n            return new Node(data);\n        }\n    };\n}]);\n'use strict';\n\nangular.module('neograph.models.predicate', []).factory('predicateFactory', function () {\n\n  function Predicate(data) {\n\n    Object.assign(this, data);\n  }\n\n  Predicate.prototype.setDirection = function (direction) {\n    this.direction = direction;\n    return this;\n  };\n\n  Predicate.prototype.toString = function () {\n    if (this.direction === 'in' && !this.symmetrical) {\n      if (this.reverse) {\n        // use reverse if present\n        return this.reverse.replace(/_/g, ' ').toLowerCase();\n      } else {\n        var lookup = this.lookup.toUpperCase();\n        if (lookup === 'CREATED' || lookup === 'CREATES') return 'created by';else if (lookup === 'INFLUENCES') return 'influenced by';else if (lookup === 'INSPIRES') return 'inspired by';else if (lookup === 'ANTICIPATES') return 'anticipated by';else if (lookup === 'DEVELOPS') return 'developed by';else if (lookup === 'DEPICTS') return 'depicted by';else if (lookup === 'TYPE_OF') return 'type(s)';else return '(' + this.lookup.replace(/_/g, ' ').toLowerCase() + ')';\n      }\n    }\n\n    // if (!this.isDirectional || !this.direction || this.direction === \"out\") {\n    return this.lookup.replace(/_/g, ' ').toLowerCase();\n  };\n\n  Predicate.prototype.flip = function () {\n\n    if (!this.isDirectional) {\n      return;\n    }\n    if (this.direction === 'in') {\n      this.setDirection('out');\n    } else {\n      this.setDirection('in');\n    }\n    return this;\n  };\n\n  return {\n    create: function create(data) {\n      return new Predicate(data);\n    }\n  };\n});\n'use strict';\n\n(function () {\n  'use strict';\n\n  controller.$inject = [\"$scope\", \"$stateParams\", \"nodeService\"];\n  angular.module('neograph.node.controller', []).controller('NodeCtrl', controller);\n\n  function controller($scope, $stateParams, nodeService) {\n    var vm = this;\n    vm.selection = {\n      selectedNode: null,\n      selectedEdge: null,\n      hoverNode: null\n    };\n    vm.tabs = ['Properties', 'Relationships', 'Images'];\n    vm.selectedTab = 'Properties';\n    vm.selectTab = function (tab) {\n      vm.selectedTab = tab;\n    };\n    activate();\n    function activate() {\n      if ($stateParams.node) {\n        nodeService.get($stateParams.node, true).then(function (node) {\n          vm.selection.selectedNode = node;\n        });\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  controller.$inject = [\"$scope\", \"$stateParams\", \"nodeService\"];\n  angular.module('neograph.node', ['neograph.node.wikipedia', 'neograph.node.multiple', 'neograph.node.images', 'neograph.node.properties', 'neograph.node.relationships', 'neograph.node.search', 'neograph.node.service', 'neograph.node.routes', 'neograph.node.controller', 'ui.router']).controller('NodeCtrl', controller);\n\n  function controller($scope, $stateParams, nodeService) {\n    var vm = this;\n    vm.selection = {\n      selectedNode: null,\n      selectedEdge: null,\n      hoverNode: null\n    };\n    vm.tabs = ['Properties', 'Relationships', 'Images'];\n    vm.selectedTab = 'Properties';\n    vm.selectTab = function (tab) {\n      vm.selectedTab = tab;\n    };\n    activate();\n    function activate() {\n      if ($stateParams.node) {\n        nodeService.get($stateParams.node, true).then(function (node) {\n          vm.selection.selectedNode = node;\n        });\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('neograph.node.routes', []).config([\"$stateProvider\", function ($stateProvider) {\n    $stateProvider.state('admin.node', {\n      url: '/node/:node',\n      views: {\n        'panel@admin': {\n          controller: 'NodeCtrl as vm',\n          templateUrl: 'app/node/node.html'\n        },\n        'properties@admin.node': {\n          templateUrl: 'app/node/properties/node.properties.html',\n          controller: [\"$scope\", \"$stateParams\", \"nodeService\", function controller($scope, $stateParams, nodeService) {\n            if ($stateParams.node) {\n              nodeService.get($stateParams.node, true).then(function (node) {\n                $scope.node = node;\n              });\n            }\n          }]\n        },\n        'relationships@admin.node': {\n          templateUrl: 'app/node/relationships/node.relationships.html',\n          controller: [\"$scope\", \"$stateParams\", \"nodeService\", function controller($scope, $stateParams, nodeService) {\n            if ($stateParams.node) {\n              nodeService.get($stateParams.node, true).then(function (node) {\n                $scope.node = node;\n                console.log(node);\n              });\n            }\n          }]\n        },\n        'images@admin.node': {\n          controller: 'NodeImagesCtrl',\n          templateUrl: 'app/node/images/node.images.html'\n        }\n      }\n    }).state('admin.node.edit', {\n      url: '/edit',\n      views: {\n        'properties@admin.node': {\n          templateUrl: 'app/node/properties/node.properties.edit.html',\n          controller: 'EditPropertiesCtrl'\n        },\n        'relationships@admin.node': {\n          templateUrl: 'app/node/relationships/node.relationships.edit.html',\n          controller: 'EditRelationshipsCtrl'\n        }\n      }\n    });\n  }]);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  service.$inject = [\"neoClient\", \"utils\", \"$q\", \"nodeFactory\"];\n  angular.module('neograph.node.service', []).factory('nodeService', service);\n\n  function service(neoClient, utils, $q, nodeFactory) {\n\n    var lastLoadedNode = {};\n\n    var api = {\n      setPropsAndTabsFromLabels: function setPropsAndTabsFromLabels(node) {\n        return neoClient.node.setPropsAndTabs({ node: node }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      get: function get(label, addrelprops) {\n\n        if (addrelprops) {\n\n          if (lastLoadedNode && (label === lastLoadedNode.Label || label === lastLoadedNode.id)) {\n            return $q.when(lastLoadedNode);\n          } else {\n\n            return neoClient.node.getWithRels({ id: label }).$promise.then(function (node) {\n\n              lastLoadedNode = nodeFactory.create(node.toJSON());\n              console.log(lastLoadedNode);\n              return lastLoadedNode;\n            });\n          }\n        } else {\n          return neoClient.node.get({ id: label }).$promise.then(function (node) {\n            return node.toJSON();\n          });\n        }\n      },\n      getList: function getList(q, limit) {\n        // q = match (n) & where only (without return)\n        return neoClient.node.getList({ q: q, limit: limit }).$promise; // returns array\n      },\n      saveWikipagename: function saveWikipagename(n) // short version for freebase prop saving\n      {\n        return neoClient.node.saveWikipagename({\n          id: n.id,\n          name: n.Wikipagename\n        }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      getImages: function getImages(node) {\n\n        return neoClient.node.getImages({\n          id: node.id,\n          isPicture: node.temp.isPicture,\n          isGroup: node.temp.isGroup\n        }).$promise; // returns array\n      },\n      saveProps: function saveProps(n) {\n        // short version for freebase prop saving\n        return neoClient.node.saveProps({ node: n, user: user }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      getProps: function getProps(labels) {\n        return neoClient.node.getProps({ labels: labels }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      save: function save(n, user) {\n        if (n.temp.trimmed) {\n          throw 'Node is trimmed - cannot save';\n        }\n        return neoClient.node.save({ node: n, user: user }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      saveRels: function saveRels(n) {\n        return neoClient.node.saveRels({ node: n }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      // deletes node and relationships forever\n      destroy: function destroy(node) {\n        return neoClient.node.destroy({ node: node }).$promise.then(function (data) {\n          return data.toJSON();\n        });\n      },\n      // only supports 1 node at the mo\n      delete: function _delete(node) {\n        var deferred = $q.deferred();\n        if (node && node.id) {\n          return neoClient.node.delete({ node: node }).$promise.then(function (data) {\n            deferred.resolve(data.toJSON());\n          });\n        } else {\n          deferred.resolve({});\n        }\n      },\n      // only supports 1 node at the mo\n      restore: function restore(node) {\n        var deferred = $q.deferred();\n        if (node && node.id) {\n          neoClient.node.restore({ node: node }).$promise.then(function (data) {\n            deferred.resolve(data.toJSON());\n          });\n        } else {\n          deferred.resolve({});\n        }\n        return deferred.promise;\n      },\n      search: function search(txt, restrict) {\n        // restrict = labels to restrict matches to\n        if (txt) {\n          return neoClient.node.search({ txt: txt, restrict: restrict }).$promise; // returns array\n        }\n      }\n    };\n    return api;\n  }\n})();\n'use strict';\n\nangular.module('neograph.neo.client', ['ngResource', 'neograph.settings']).factory('neoClient', ['$resource', 'settings', function ($resource, settings) {\n  // return $resource('http://localhost:1337/node/match', {txt:'@txt',restrict:'@restrict'}, {\n  //    matchNodes: {\n  //        method: 'POST',\n  //        isArray:true\n  //    }\n  // });\n\n  // return $resource(null,null, {\n  //    matchNodes: {\n  //        url: 'http://localhost:1337/node/match',\n  // //       params: {txt:'',restrict:''},\n  //        method: 'POST',\n  //        isArray: true\n  //    }\n  // });\n\n  var root = settings.apiRoot;\n\n  return {\n\n    node: $resource(null, null, {\n      search: {\n        url: root + '/search',\n\n        method: 'POST',\n        isArray: true\n      },\n\n      get: {\n        url: root + '/node/get/:id',\n        method: 'GET'\n      },\n\n      getWithRels: {\n        url: root + '/node/getWithRels/:id',\n        method: 'GET'\n      },\n\n      getRelationships: {\n        url: root + '/node/relationships/:id',\n        method: 'GET'\n      },\n\n      getOne: {\n        url: root + '/node/single',\n        method: 'POST'\n      },\n\n      getList: {\n        url: root + '/node/list',\n        method: 'POST',\n        isArray: true\n      },\n\n      save: {\n        url: root + '/node/save',\n\n        method: 'POST'\n      },\n      saveProps: {\n        url: root + '/node/saveProps',\n\n        method: 'POST'\n      },\n      saveRels: {\n        url: root + '/node/saveRels',\n\n        method: 'POST'\n      },\n      saveWikipagename: {\n        url: root + '/node/saveWikipagename',\n\n        method: 'POST'\n      },\n\n      saveMultiple: {\n        url: root + '/node/saveMultiple',\n\n        method: 'POST'\n      },\n\n      del: {\n        url: root + '/node/delete',\n\n        method: 'POST'\n      },\n\n      destroy: {\n        url: root + '/node/destroy',\n\n        method: 'POST'\n      },\n      restore: {\n        url: root + '/node/restore',\n\n        method: 'POST'\n      },\n\n      getProps: {\n        url: root + '/node/getProps',\n\n        method: 'POST'\n\n      },\n\n      getImages: {\n        url: root + '/node/getImages',\n        isArray: true,\n        method: 'POST'\n\n      }\n\n    }),\n    edge: $resource(null, null, {\n      save: {\n        url: root + '/edge/save',\n        method: 'POST'\n      },\n\n      del: {\n        url: root + '/edge/delete',\n        method: 'POST'\n\n      },\n\n      getImageRelationships: {\n        url: root + '/edge/imagerelationships',\n        method: 'POST'\n      }\n    }),\n\n    user: $resource(null, null, {\n      saveFavourite: {\n        url: root + '/user/saveFavourite',\n\n        method: 'POST'\n\n      },\n      get: {\n        url: root + '/user/:user',\n        method: 'GET'\n      }\n    }),\n\n    graph: $resource(null, null, {\n      get: {\n        url: root + '/graph',\n\n        method: 'POST'\n      }\n    }),\n\n    type: $resource(null, null, {\n      getAll: {\n        url: root + '/types',\n        method: 'GET'\n      }\n    }),\n\n    predicate: $resource(null, null, {\n      getAll: {\n        url: root + '/predicates',\n        method: 'GET'\n      }\n    }),\n\n    utils: $resource(null, null, {\n      getDistinctLabels: {\n        url: root + '/utils/distinctLabels',\n        isArray: true,\n        method: 'POST'\n      }\n    })\n\n  };\n}]);\n'use strict';\n\nangular.module('neograph.neo', ['neograph.utils', 'neograph.neo.client']).factory('neo', ['neoClient', 'utils', function (neoClient, utils) {\n\n    var that = {\n\n        getGraph: function getGraph(q, returnArray) {\n\n            return neoClient.graph.get({ q: q, returnArray: returnArray }).$promise.then(function (data) {\n\n                var out = data.toJSON();\n                console.dir(out);\n                return out;\n            });\n        },\n\n        // returns all relationships between supplied nodes, which can be vis.Dataset or graph data object\n        getAllRelationships: function getAllRelationships(nodes) {\n            var nodeIds = '';\n\n            if (nodes.getIds) // if vis.DataSet\n                {\n                    nodeIds = nodes.getIds({ returnType: 'Array' }).join(',');\n                } else {\n                // otherwise data object\n\n                for (var key in nodes) {\n                    if (nodeIds.length) {\n                        nodeIds += ',';\n                    }\n                    nodeIds += key;\n                }\n            }\n\n            var q = 'MATCH a -[r]- b WHERE id(a) IN[' + nodeIds + '] and id(b) IN[' + nodeIds + '] and not (a-[:TYPE_OF]-b) return r';\n\n            return that.getGraph(q);\n        },\n\n        getRelationships: function getRelationships(id) {\n\n            return neoClient.node.getRelationships({ id: id }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        getImages: function getImages(label) {\n\n            return neoClient.node.getImages({ label: label }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        saveMultiple: function saveMultiple(multiple) {\n\n            return neoClient.node.saveMultiple({ multiple: multiple }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        // saves edge to neo (update/create)\n        // TODO: according to certain rules labels will need to be maintained when relationships are created. (update not required as we always delete and recreate when changing start/end nodes)\n        // tag a with label b where:\n        // a=person and b=provenance (eg painter from france)\n        // a=person and n=group, period (eg painter part of les fauves / roccocco)\n        // a=picture and b=non-person (eg picture by corot / of tree) - although typically this will be managed through labels directly (which will then in turn has to keep relationships up to date)\n        saveEdge: function saveEdge(e) {\n            // startNode and endNode provide the full node objects for the edge\n\n            return neoClient.edge.save({ edge: e }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        saveFavourite: function saveFavourite(node, user) {\n\n            return neoClient.user.saveFavourite({ user: user, node: node }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        deleteEdge: function deleteEdge(edge) {\n\n            if (edge && edge.id) {\n\n                return neoClient.edge.delete({ edge: edge }).$promise.then(function (data) {\n                    return data.toJSON();\n                });\n            }\n        },\n\n        getUser: function getUser(userLookup) {\n\n            return neoClient.user.get({ user: userLookup }).$promise.then(function (data) {\n\n                return data.toJSON();\n            });\n        },\n\n        getOne: function getOne(q) {\n            // q must be a match return a single entity n\n\n            return neoClient.node.getOne({ q: q }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        getImageRelationships: function getImageRelationships(edge) {\n            // loks up id/label first then call get by label\n\n            return neoClient.edge.getImageRelationships({ edge: edge }).$promise.then(function (data) {\n                return data.toJSON();\n            });\n        },\n\n        // Alternatively i could query the actual labels and merge them into a distinct array\n        getDistinctLabels: function getDistinctLabels(labels) {\n\n            return neoClient.utils.getDistinctLabels({ labels: labels }).$promise; // returns array\n        },\n\n        getDistinctLabelsQuery: function getDistinctLabelsQuery(q) {\n\n            return neoClient.utils.getDistinctLabels({ q: q }).$promise; // returns array\n        }\n\n    };\n\n    return that;\n}]);\n'use strict';\n\nangular.module('neograph.session', ['neograph.neo']).factory('session', ['neo', '$q', function (neo, $q) {\n\n  var anonUser = {\n    Lookup: 'Anonymous',\n    roles: { 'Public': {} }\n  };\n\n  var session = {\n\n    init: function init() {\n\n      neo.getUser('Julian').then(function (user) {\n\n        session.user = user;\n        session.signedIn = true;\n      });\n\n      return session;\n    },\n\n    signingIn: false,\n\n    signedIn: false,\n\n    user: anonUser,\n\n    signIn: function signIn(username, password) {\n\n      return neo.authenticate(username, password).then(function (user) {\n\n        session.user = user;\n\n        console.log(session.user);\n        //   session.apps = service.getApps(session.user.roles);\n\n        localStorage.username = session.user.username;\n\n        session.signedIn = true;\n\n        if (user.roles.PreReg) {\n          $('body').addClass('prereg');\n        } else {\n          $('body').removeClass('prereg');\n        }\n      }, function (failMessage) {\n        console.log(failMessage);\n        return $q.reject(failMessage);\n      });\n    },\n\n    signOut: function signOut() {\n\n      session.user = anonUser;\n      localStorage.username = ''; // = JSON.stringify(session.user);\n      session.signedIn = false;\n      //  session.apps = service.getApps(session.user.roles);\n    }\n  };\n\n  if (localStorage.username) {\n    session.user = neo.getUser(localStorage.username);\n  }\n\n  if (session.user.name != 'Anonymous') {\n    session.signedIn = true;\n  }\n\n  //   session.apps = service.getApps(session.user.roles);\n\n  return session.init();\n}]);\n'use strict';\n\nangular.module('neograph.utils', ['neograph.neo.client', 'neograph.query.presets']).factory('utils', ['neoClient', 'queryPresets', function (neoClient, presets) {\n\n  Array.prototype.diff = function (a) {\n    return this.filter(function (i) {\n      return a.indexOf(i) < 0;\n    });\n  };\n\n  Array.prototype.ids = function () {\n    return this.map(function (e) {\n      return e.id;\n    });\n  };\n\n  Array.prototype.hasAny = function (a) {\n    return this.filter(function (i) {\n      return a.indexOf(i) > -1;\n    }).length > 0;\n  };\n\n  Array.prototype.unique = function () {\n    var a = [];\n    for (i = 0; i < this.length; i++) {\n      var current = this[i];\n      if (a.indexOf(current) < 0) a.push(current);\n    }\n    return a;\n  };\n\n  var utils = {\n\n    init: function init() {\n\n      utils.refreshTypes();\n      utils.refreshPredicates();\n      return utils;\n    },\n\n    types: {},\n\n    predicates: {},\n\n    isType: function isType(label) {\n      return utils.types[label] != undefined;\n    },\n\n    refreshTypes: function refreshTypes() {\n\n      return neoClient.type.getAll().$promise.then(function (types) {\n        utils.types = types;\n        return types;\n      });\n    },\n\n    refreshPredicates: function refreshPredicates() {\n      // consider creating lookup nodes for relationship types so that i can store properties for them\n\n      return neoClient.predicate.getAll().$promise.then(function (predicates) {\n        utils.predicates = predicates.toJSON();\n        // console.log(utils.predicates);\n        return utils.predicates;\n      });\n    },\n\n    isSystemInfo: function isSystemInfo(label) {\n\n      return label == 'Global' || label == 'Type' || label == 'Label' || label == 'SystemInfo';\n    },\n    getLabelClass: function getLabelClass(node, label) {\n\n      if (node && label === node.Type) {\n        return 'label-warning';\n      }\n\n      if (utils.isSystemInfo(label)) {\n        return 'label-system';\n      }\n\n      if (utils.isType(label)) {\n        return 'label-inverse pointer';\n      }\n\n      return 'label-info';\n    },\n\n    personTypes: ['Painter', 'Illustrator', 'Philosopher', 'Poet', 'FilmMaker', 'Sculptor', 'Writer', 'Patron', 'Leader', 'Explorer', 'Composer', 'Scientist', 'Caricaturist', 'Mathematician'],\n\n    pictureTypes: ['Painting', 'Illustration', 'Drawing', 'Print'],\n\n    isPerson: function isPerson(type) {\n\n      return type == 'Painter' || type == 'Illustrator' || type == 'Philosopher' || type == 'Poet' || type == 'FilmMaker' || type == 'Sculptor' || type == 'Writer' || type == 'Patron' || type == 'Leader' || type == 'Explorer' || type == 'Composer' || type == 'Scientist' || type == 'Caricaturist' || type == 'Mathematician';\n    }\n\n    // mopve to 'state' object\n\n    , tabSettings: {},\n\n    selectedTab: 'Properties'\n\n  };\n  return utils.init();\n}]);\n'use strict';\n\nangular.module('neograph.query.graph', ['ui.router', 'neograph.models.node']).factory('graphService', [\"nodeFactory\", function (nodeFactory) {\n  var graphNodeFromNeoNode = function graphNodeFromNeoNode(neoNode) {\n    neoNode = nodeFactory.create(neoNode);\n    var type = neoNode.class;\n    var yf = parseInt(neoNode.yearFrom, 10);\n    var yt = parseInt(neoNode.yearTo, 10);\n    var y = yt;\n    if (yf && yt) {\n      y = yt - (yt - yf) / 2;\n    }\n    var level = 0;\n    var startYear = 1400;\n    var endYear = 2000;\n    var step = 5;\n    var cnt = 1;\n    for (var i = startYear; i < endYear; i += step) {\n      if (y >= i && y < i + step) {\n        level = cnt;\n      }\n      cnt += 1;\n    }\n    if (y > endYear) {\n      level = cnt;\n    }\n    var node = {\n      id: neoNode.id,\n      label: neoNode.label || neoNode.lookup,\n      size: neoNode.status / 10,\n      group: neoNode.class,\n      mass: type === 'Group' ? 0.5 : 1,\n      radius: neoNode.isPerson() ? neoNode.status : 1,\n      // for hiearchichal layout,\n      level: level,\n      borderWidth: 0\n    };\n\n    var image = type === 'Painting' || type === 'Picture' ? neoNode.temp.thumbUrl : null;\n\n    if (image) {\n      node.image = image;\n      node.shape = 'image';\n    } else if (type === 'Provenance') {\n      node.fontSize = 50;\n      node.fontColor = 'lightgray';\n      node.color = 'transparent';\n    } else if (type === 'Iconography' || type === 'Place') {\n      node.shape = 'ellipse';\n    } else if (type === 'Quotation') {\n      node.shape = 'box';\n      node.color = 'transparent';\n      node.label = neoNode.text;\n    } else if (type === 'User') {\n      node.shape = 'star';\n      node.size = 20;\n    } else if (type === 'Link') {\n      node.label = neoNode.name;\n      node.shape = 'box';\n      node.color = 'transparent';\n    } else if (neoNode.isPerson()) {\n      node.shape = 'dot';\n    } else if (neoNode.isProperty()) {\n      node.shape = 'circle';\n    } else {\n      node.shape = 'box';\n    }\n\n    node.color = { background: node.color || '#97C2FC', border: 'transparent' };\n    if (neoNode.isProperty()) {\n      node.color.background = 'lightgreen';\n    }\n    return node;\n  };\n\n  var graphEdgeFromNeoEdge = function graphEdgeFromNeoEdge(neoEdge) {\n    var type = neoEdge.type;\n    var symmetrical = type === 'ASSOCIATED_WITH';\n    var hideEdgeLabel = type === 'BY' || type === 'INFLUENCES' || type === 'INSPIRES' || type === 'DEALS_WITH' || type === 'PART_OF' || type === 'MEMBER_OF' || type === 'ASSOCIATED_WITH' || type === 'ACTIVE_DURING' || type === 'FROM' || type === 'DEVELOPS' || type === 'LEADS' || type === 'FOUNDS' || type === 'DEPICTS' || type === 'WORKS_IN' || type === 'STUDIES' || type === 'STUDIES_AT' || type === 'TEACHES' || type === 'TEACHES_AT';\n\n    var colour = void 0;\n    switch (type) {\n      case 'FROM':\n        colour = '#EEE';\n        break;\n      case 'INFLUENCES':\n        colour = 'pink';\n        break;\n      case 'TEACHES':\n      case 'TEACHES_AT':\n      case 'PROPERTY':\n        colour = 'green';\n        break;\n      default:\n        colour = 'blue';\n    }\n\n    var hideEdge = type === 'FROM';\n    var edge = {\n      id: neoEdge.id,\n      from: neoEdge.startNode,\n      to: neoEdge.endNode,\n      label: type !== 'EXTENDS' && type !== 'PROPERTY' && type !== 'INFLUENCES' && type !== 'ASSOCIATED_WITH' ? type.toLowerCase() : null,\n      fontColor: 'blue',\n      color: colour,\n      opacity: hideEdge ? 0 : 1, // type === \"INFLUENCES\" ? 1 : 0.7,\n      style: symmetrical ? 'dash-line' : 'arrow', // arrow-center' ,\n      type: ['curved'],\n      labelAlignment: 'line-center'\n    };\n    return edge;\n  };\n\n  return {\n    defaultEdgeType: function defaultEdgeType(fromType, toType) {\n      if (toType === 'Provenance') {\n        return 'FROM';\n      } else if (toType === 'Painter') {\n        return 'INFLUENCES';\n      }\n      return 'ASSOCIATED_WITH';\n    },\n    options: {\n      edges: { widthSelectionMultiplier: 4 },\n      hierarchicalLayout: {\n        enabled: false,\n        levelSeparation: 10, // make this inversely proportional to number of nodes\n        nodeSpacing: 200,\n        direction: 'UD' },\n      //LR\n      //    layout: \"hubsize\"\n      dataManipulation: {\n        enabled: true,\n        initiallyVisible: true\n      },\n      // stabilize: true,\n      // stabilizationIterations: 1000,\n      physics: {\n        barnesHut: {\n          enabled: true,\n          gravitationalvarant: -6000,\n          centralGravity: 1,\n          springLength: 20,\n          springvarant: 0.04,\n          damping: 0.09\n        },\n        repulsion: {\n          centralGravity: 0.1,\n          springLength: 0.5,\n          springvarant: 0.05,\n          nodeDistance: 100,\n          damping: 0.09\n        },\n        hierarchicalRepulsion: {\n          enabled: false,\n          centralGravity: 0,\n          springLength: 270,\n          springvarant: 0.01,\n          nodeDistance: 300,\n          damping: 0.09\n        }\n      },\n      onDelete: function onDelete(data, callback) {}\n    },\n    // Transforms neo graph data object into object\n    // containing array of nodes and array of edges renderable by vis network\n    toGraphData: function toGraphData(g) {\n      return {\n        nodes: Object.keys(g.nodes).map(function (key) {\n          return graphNodeFromNeoNode(g.nodes[key]);\n        }),\n        edges: Object.keys(g.edges).map(function (key) {\n          return graphEdgeFromNeoEdge(g.edges[key]);\n        })\n      };\n    }\n  };\n}]).directive('graph', [\"graphService\", \"$state\", function (graphService, $state) {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/query/graph.html',\n    scope: {\n      data: '=',\n      active: '=',\n      network: '='\n    },\n    link: function link($scope, $element) {\n      var graph = {\n        nodes: new vis.DataSet(),\n        edges: new vis.DataSet()\n      };\n      var graphWidth = 1300;\n      var graphHeight = $(window).height() - 80;\n      var topBarHeight = 150;\n      var options = graphService.options;\n      options.onConnect = function (data, callback) {\n        var newEdge = {\n          start: $scope.data.nodes[data.from],\n          type: graphService.defaultEdgeType($scope.data.nodes[data.from].Type, $scope.data.nodes[data.to].Type),\n          end: $scope.data.nodes[data.to],\n          properties: { Weight: 3 }\n        };\n        $scope.publish('newEdge', newEdge);\n      };\n      var network = new vis.Network($element.find('.graphContainer')[0], graph, options);\n      var getSelectedNodeId = function getSelectedNodeId() {\n        var selectedNodes = network.getSelectedNodes();\n        if (selectedNodes.length === 1) {\n          return selectedNodes[0];\n        }\n        return undefined;\n      };\n\n      $scope.data = {\n        nodes: {},\n        edges: {}\n      };\n      $scope.$on('$stateChangeSuccess', function () {\n        if ($state.params.node) {\n          Object.keys($scope.data.nodes).forEach(function (key) {\n            if ($scope.data.nodes[key].label === $state.params.node) {\n              if ($scope.data.nodes[key].id !== getSelectedNodeId()) {\n                network.selectNodes([key]);\n                network.focusOnNode(key, {\n                  scale: 1.5,\n                  animation: {\n                    duration: 1000,\n                    easingFunction: 'easeOutCubic'\n                  }\n                });\n              }\n            }\n          });\n        }\n      });\n\n      // Set size to window size\n      $scope.$watch('window', function () {\n        network.setSize(graphWidth + 'px', graphHeight + 'px');\n      });\n\n      // Fit to screen on resize\n      network.on('resize', function () {\n        if (getSelectedNodeId()) {\n          network.focusOnNode(getSelectedNodeId(), {\n            scale: 1,\n            animation: {\n              duration: 1000,\n              easingFunction: 'easeOutCubic'\n            }\n          });\n        } else {\n          network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\n        }\n      });\n\n      graph.nodes.on('*', function () {\n        if (graph.nodes.length) {\n          $('.network-manipulationUI.connect').css('display', 'inline-block');\n        } else {\n          $('.network-manipulationUI.connect').hide();\n        }\n      });\n\n      // Add event listeners\n      network.on('select', function (params) {\n        if (params.nodes.length === 1) {\n          var label = $scope.data.nodes[params.nodes[0]].label;\n          if (label) {\n            $state.go('admin.main.node.view', { node: label });\n          }\n        } else if (params.edges.length === 1) {\n          var id = params.edges[0];\n          var startNode = $scope.data.nodes[$scope.data.edges[id].startNode];\n          var endNode = $scope.data.nodes[$scope.data.edges[id].endNode];\n          var edge = {\n            id: id,\n            start: { lookup: startNode.lookup },\n            end: { lookup: endNode.lookup },\n            type: $scope.data.edges[id].type,\n            properties: $scope.data.edges[id].properties\n          };\n          $state.go('admin.main.edge.view', { edge: JSON.stringify(edge) });\n        }\n      });\n\n      $scope.subscribe('deleted', function (params) {\n        if (params.selection.nodes && params.selection.nodes.length) {\n          var nodeids = params.selection.nodes.map(function (n) {\n            return n.id;\n          });\n          graph.nodes.remove(nodeids);\n        }\n        if (params.selection.edges && params.selection.edges.length) {\n          var edgeids = params.selection.edges.map(function (n) {\n            return n.id;\n          });\n          graph.edges.remove(edgeids);\n        }\n      });\n\n      $scope.subscribe('focus', function (nodeid) {\n        network.focusOnNode(nodeid, {\n          scale: 1,\n          animation: {\n            duration: 1000,\n            easingFunction: 'easeOutCubic'\n          } });\n      });\n\n      $('.network-manipulationUI.connect').hide();\n\n      $scope.hoverNode = undefined;\n      $('.graphContainer').on('mousemove', function (event) {\n        var n = network._getNodeAt({\n          x: event.pageX,\n          y: event.pageY - topBarHeight - 55\n        });\n        $scope.$apply(function () {\n          if (n) {\n            var dataNode = $scope.data.nodes[n.id];\n            $scope.hoverNode = dataNode;\n            $scope.publish('hover', dataNode);\n          } else {\n            $scope.publish('hover', undefined);\n            $scope.hoverNode = undefined;\n          }\n        });\n      });\n\n      // Freeze simulation if not active\n      $scope.$watch('active', function (active) {\n        if (active !== undefined) {\n          network.freezeSimulation(!active);\n        }\n      });\n\n      $scope.$watch('data', function () {\n        if ($scope.active) {\n          graph.nodes.clear();\n          graph.edges.clear();\n          var gArr = graphService.toGraphData($scope.data);\n          graph.nodes.add(gArr.nodes);\n          graph.edges.add(gArr.edges);\n        }\n      });\n\n      // Update existing data (not replace)\n      $scope.subscribe('dataUpdate', function (g) {\n        if ($scope.active && $scope.data) {\n          Object.assign($scope.data.edges, g.edges);\n          Object.assign($scope.data.nodes, g.nodes);\n          var gArr = graphService.toGraphData(g);\n          graph.edges.update(gArr.edges);\n          graph.nodes.update(gArr.nodes);\n        }\n      });\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.query', ['neograph.query.presets', 'neograph.queryInput', 'neograph.query.graph']).factory('queryFactory', [\"queryPresets\", function (queryPresets) {\n  function Query(key, render) {\n    this.key = key;\n    this.name = key;\n    this.render = render;\n    this.data = {\n      nodes: {},\n      edges: {}\n    };\n    this.body = { q: '', connectAll: false };\n    this.presets = queryPresets;\n    this.generators = {};\n\n    if (render === 'Graph') {\n      this.generators.nodeGraph = {\n        type: 'nodeGraph',\n        options: {}\n      };\n    }\n\n    if (render === 'Grid') {\n      this.generators.nodeFilter = {\n        type: 'nodeFilter',\n        options: {}\n      };\n      this.generators.favouritesFilter = {\n        type: 'favouritesFilter',\n        options: {}\n      };\n    }\n  }\n  return {\n    create: function create(key, type) {\n      return new Query(key, type);\n    }\n  };\n}]).factory('queryService', [\"queryFactory\", function (queryFactory) {\n  var active = queryFactory.create('Query', 'Graph');\n  var queries = {};\n  queries[active.key] = active;\n\n  var listeners = [];\n  var publishChange = function publishChange() {\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](active);\n    }\n  };\n  return {\n    queries: queries,\n    active: active,\n    update: function update(key) {\n      active = queries[key];\n      publishChange();\n    },\n    subscribe: function subscribe(callback) {\n      return listeners.push(callback);\n    }\n  };\n}]).controller('QueryCtrl', [\"$scope\", \"queryService\", function ($scope, queryService) {\n  queryService.subscribe(function (active) {\n    $scope.active = active;\n  });\n  $scope.queries = queryService.queries;\n  $scope.active = queryService.active;\n  $scope.selectedTab = $scope.active.key;\n  $scope.$watch('selectedTab', function (key) {\n    return queryService.update(key);\n  });\n}]);\n'use strict';\n\nangular.module('neograph.query.presets', []).factory('queryPresets', function () {\n  return {\n    Schema: {\n      q: 'match (n:Schema) optional match (n)-[r]-(m:Schema) return n,r,m'\n    },\n    AddedRecently: {\n      q: '\\n      match (n:Global) where n.created is not null \\n      return n order by n.created desc limit 100\\n      '\n    },\n    AddedRecentlyPictures: {\n      q: '\\n      MATCH  (p:Label) -- (i:Picture) where p.created is not null \\n      return p.created,collect(i)[0..5],count(*) as count  \\n      order by p.created desc limit 500\\n      '\n    },\n    Overview: {\n      q: '\\n      match (n) - [r] - (m) where (n:Global and m:Global) \\n      and (n.Status is null or n.Status > 6) \\n      and (m.Status is null or m.Status > 6) \\n      and not (n-[:INSTANCE_OF]-m) RETURN r\\n      '\n    },\n    OverViewDense: {\n      q: '\\n      match (n) - [r] - (m) where (n:Global and m:Global) \\n      and (n.Status is null or n.Status > 3) \\n      and (m.Status is null or m.Status > 3) \\n      and not (n-[:INSTANCE_OF]-m) RETURN r\\n      '\n    },\n    BritishInfluence: {\n      q: '\\n      MATCH (c:Global)-[r]-(d:Global) where (c:English or c:Scottish) \\n      and not (c-[:INSTANCE_OF]-d) and not d.Lookup=\\'English\\' \\n      and not c.Lookup=\\'English\\'  return c,d,r\\n      '\n    },\n    BritishOnly: {\n      q: '\\n      MATCH (c:Global)-[r]-(d:Global) where (c:English or c:Scottish) and  \\n      (d:English or d:Scottish) and not (c-[:INSTANCE_OF]-d) \\n      and not d.Lookup=\\'English\\' and not c.Lookup=\\'English\\'  return c,d,r\\n      ',\n      connectAll: true\n    },\n    FrenchOnly: {\n      q: '\\n      MATCH (c:Global:French)-[r]-(d:Global:French) where  not (c-[:INSTANCE_OF]-d) \\n      and not d.Lookup=\\'French\\' and not c.Lookup=\\'French\\'  return c,d,r\\n      ',\n      connectAll: true\n    },\n    FrenchPainterInfluence: {\n      q: '\\n      MATCH (c:Global:French:Painter)-[r]-(d:Painter) \\n      where not (c-[:INSTANCE_OF]-d) \\n      and not d.Lookup=\\'French\\' and not c.Lookup=\\'French\\'  \\n      return c,d,r\\n      ',\n      connectAll: true\n    },\n    Cezanne3gen: {\n      q: '\\n      MATCH (c {Lookup:\\'Cezanne\\'})-[r]-(d:Painter)  \\n      -[s]-(e:Painter)  -[t]-(f:Painter) return c,d,e,f,r,s,t\\n      ',\n      connectAll: true\n    },\n    Cezanne3genOutbound: {\n      q: '\\n      MATCH (c {Lookup:\\'Cezanne\\'})\\n      -[r]->(d:Painter)  -[s]->(e:Painter)  -[t]->(f:Painter) \\n      return c,d,e,f,r,s,t\\n      ',\n      connectAll: true\n    },\n    Cezanne3genInbound: {\n      q: '\\n      MATCH (c {Lookup:\\'Cezanne\\'})\\n      <-[r]-(d:Painter)  <-[s]-(e:Painter)  <-[t]-(f:Painter) \\n      return c,d,e,f,r,s,t\\n      ',\n      connectAll: true\n    },\n    FrenchEnglishPainters: {\n      q: '\\n      MATCH (c:Global:French:Painter)-[r]-(d:Global:English:Painter) \\n      where  not (c-[:INSTANCE_OF]-d) and \\n      not d.Lookup=\\'French\\' and not c.Lookup=\\'French\\'  return c,d,r\\n      ',\n      connectAll: true\n    },\n    German: {\n      q: '\\n      MATCH (c:Global:German)-[r]-(d:Global) \\n      where not (c-[:INSTANCE_OF]-d) and not \\n      d.Lookup=\\'German\\' and not c.Lookup=\\'German\\'  return c,d,r\\n      '\n    },\n    NorthernEurope: {\n      q: '\\n       MATCH (c:Global)-[r]-(d:Global) where \\n        (c:NorthernEurope or c:German or c:Dutch or c:English or c:Scottish) \\n        and  \\n        (d:NorthernEurope or d:German or d:Dutch or d:English or d:Scottish) \\n        and not c:Provenance and not d:Provenance and not (c-[:INSTANCE_OF]-d) return c,d,r'\n    },\n    Italian: {\n      q: '\\n      MATCH (c:Global:Italian)-[r]-(d:Global) where not (c-[:INSTANCE_OF]-d) \\n      and not d.Lookup=\\'Italian\\' and not c.Lookup=\\'Italian\\'  return c,d,r\\n      '\n    },\n    Spanish: {\n      q: '\\n      MATCH (c:Global:Spanish)-[r]-(d:Global) \\n      where  not (c-[:INSTANCE_OF]-d) and not d.Lookup=\\'Spanish\\' \\n      and not c.Lookup=\\'Spanish\\'  return c,d,r\\n      '\n    },\n    American: {\n      q: '\\n      MATCH (c:Global:American)-[r]-(d:Global) where  not (c-[:INSTANCE_OF]-d) \\n      and not d.Lookup=\\'American\\' and not c.Lookup=\\'American\\'  return c,d,r\\n      '\n    },\n    Pop: {\n      q: '\\n      match (n {Lookup:\\'Pop\\'}) -[r]-(m:Global) -[s]-(p:Global) \\n      where not (n-[:INSTANCE_OF]-m) and not (m-[:INSTANCE_OF]-p) \\n      and (m:Painter or m:Group) and (p:Painter or p:Group) \\n      and not m:Provenance and not p:Provenance return n,r,m,s,p'\n    },\n    Impressionism: {\n      q: '\\n      match (n {Lookup:\\'Impressionist\\'}) -[r]-(m:Global) -[s]-(p:Global) \\n      where not (n-[:INSTANCE_OF]-m) and not (m-[:INSTANCE_OF]-p) \\n      and (m:Painter or m:Group) and (p:Painter or p:Group) \\n      and not m:Provenance and not p:Provenance return n,r,m,s,p\\n      ',\n      connectAll: true\n    },\n    Landscape: {\n      q: '\\n      MATCH (c:Global:Landscape)-[r]-(d:Global)  where not (c-[:INSTANCE_OF]-d) \\n      and not d.Lookup=\\'Landscape\\' and \\n      (d:Landscape or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r'\n    },\n    Modern: {\n      q: '\\n      MATCH (c:Global)-[r]-(d:Global) where  not (c-[:INSTANCE_OF]-d) \\n      and c.YearTo > 1870  and d.YearTo > 1870 return c,d,r\\n      '\n    },\n    Rennaissance: {\n      q: '\\n      MATCH (c:Global)-[r]-(d:Global) where  not (c-[:INSTANCE_OF]-d) \\n      and c.YearTo > 1400 and c.YearTo<1700 and d.YearTo > 1400 \\n      and d.YearTo<1700 return c,d,r\\n      '\n    }\n  };\n});\n'use strict';\n\nangular.module('neograph.queryInput', ['neograph.neo', 'neograph.query.presets', 'neograph.query.generator']).directive('queryinput', [\"neo\", \"queryPresets\", function (neo, queryPresets) {\n  return {\n    replace: true,\n    restrict: 'E',\n    templateUrl: 'app/query/queryInput.html',\n    scope: {\n      query: '=',\n      editable: '=?',\n      defaultpreset: '=?'\n    },\n    link: function link($scope) {\n      $scope.$watch('preset', function (preset) {\n        if (preset) {\n          $scope.query.body = preset;\n        }\n      });\n\n      if ($scope.defaultpreset) {\n        $scope.preset = queryPresets[$scope.defaultpreset];\n      }\n\n      $scope.$watch('query.body', function (body) {\n        if (body && body.q) {\n          $scope.getData();\n        }\n      });\n\n      $scope.generated = { q: '' };\n      $scope.$watch('generated', function (generated) {\n        if (generated) {\n          $scope.query.body = generated;\n        }\n      });\n\n      $scope.nodeChanged = function (node) {\n        if (node) {\n          $scope.query.name = node.Label || node.Lookup;\n        }\n      };\n\n      $scope.connectAll = function () {\n        return neo.getAllRelationships($scope.query.data.nodes).then(function (g) {\n          // Add to cached data\n          Object.assign($scope.query.data.edges, g.edges);\n          $scope.publish('dataUpdate', g);\n        });\n      };\n\n      $scope.getData = function () {\n        var body = $scope.query.body;\n        if (body && body.q) {\n          // If grid query then return results as array to preserve sort order\n          var returnArray = $scope.query.type === 'Grid';\n          neo.getGraph(body.q, returnArray).then(function (g) {\n            if (body.connectAll) {\n              neo.getAllRelationships(g.nodes).then(function (g2) {\n                return Object.assign(g.edges, g2.edges);\n              });\n            } else {\n              $scope.query.data = g;\n            }\n          });\n        }\n      };\n    }\n  };\n}]);\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('neograph.node.multiple', ['neograph.neo', 'neograph.utils']).directive('multiple', ['neo', 'utils', function (neo, utils) {\n    return {\n      restrict: 'E',\n      templateUrl: 'app/node/multiple/node.multiple.html',\n      scope: {\n        nodes: '='\n      },\n      link: function link($scope) {\n\n        $scope.$watch('nodes', function (nodes) {\n\n          if (nodes) {\n            var allLabels = nodes.map(function (node) {\n              return node.labels;\n            });\n\n            $scope.labels = allLabels.shift().filter(function (v) {\n              return allLabels.every(function (a) {\n                return a.indexOf(v) !== -1;\n              });\n            });\n\n            $scope.originalLabels = angular.copy($scope.labels); // store for saving so we know what to change\n          }\n        });\n\n        $scope.addLabel = function (item) {\n\n          if ($scope.labels.indexOf(item.Label) === -1) {\n            $scope.labels.push(item.Label);\n          }\n        };\n        $scope.removeLabel = function (label) {\n\n          var ind = $scope.labels.indexOf(label);\n          if (ind > -1) {\n            $scope.labels.splice(ind, 1);\n          }\n        };\n\n        $scope.save = function () {\n          neo.saveMultiple({\n            nodes: $scope.nodes,\n            labels: $scope.labels,\n            originalLabels: $scope.originalLabels\n          });\n        };\n\n        $scope.restore = function () {\n          var restored = [];\n          angular.forEach($scope.nodes, function (node) {\n            neo.restoreNode(node).then(function () {\n              restored.push(node);\n              if (restored.length === $scope.nodes.length) {\n                $scope.publish('restored', { selection: { nodes: restored } });\n                $scope.selection.multiple = undefined;\n                $scope.tabs = [];\n              }\n            });\n          });\n        };\n\n        $scope.delete = function () {\n          var deleted = [];\n          angular.forEach($scope.nodes, function (node) {\n            neo.deleteNode(node).then(function () {\n              deleted.push(node);\n              if (deleted.length === $scope.nodes.length) {\n                $scope.publish('deleted', { selection: { nodes: deleted } });\n                $scope.selection.multiple = undefined;\n                $scope.tabs = [];\n              }\n            });\n          });\n        };\n\n        $scope.destroy = function () {\n          var deleted = [];\n          angular.forEach($scope.nodes, function (node) {\n            neo.destroyNode(node).then(function () {\n              deleted.push(node);\n              if (deleted.length === $scope.nodes.length) {\n                $scope.publish('deleted', { selection: { nodes: deleted } });\n                $scope.selection.multiple = undefined;\n                $scope.tabs = [];\n              }\n            });\n          });\n        };\n\n        // $scope.selection.multiple = new (function (nodes, labels) {\n        //    var self = this;\n        //    this.nodes = nodes;\n        //    this.labels = labels;\n\n        // })(params.selection.nodes, labels);\n      }\n    };\n  }]);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  controller.$inject = [\"$scope\", \"$stateParams\", \"neo\", \"nodeService\"];\n  angular.module('neograph.node.images', ['neograph.neo', 'ui.router']).controller('NodeImagesCtrl', controller);\n\n  function controller($scope, $stateParams, neo, nodeService) {\n    var vm = this;\n    vm.images = [];\n    if ($stateParams.node) {\n      neo.getImages($stateParams.node).then(function (images) {\n        vm.images = images;\n        loaded = true;\n      });\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  controller.$inject = [\"nodeService\", \"session\", \"utils\", \"$scope\", \"$stateParams\"];\n  angular.module('neograph.node.properties', ['neograph.node.service', 'neograph.session', 'neograph.utils', 'ui.router']).controller('EditPropertiesCtrl', controller);\n\n  function controller(nodeService, session, utils, $scope, $stateParams) {\n    if ($stateParams.node) {\n      nodeService.get($stateParams.node, true).then(function (node) {\n        $scope.node = node;\n      });\n    }\n\n    $scope.deleteNode = function (n) {\n      nodeService.delete(n).then(function (deleted) {\n        $scope.selection.selectedNode = deleted;\n        // this assumes that the current view is not of deleted items, otherwise this would be inconsistent\n        // let view handle its own data ?\n        delete $scope.activeView.data.nodes[n.id];\n        $scope.publish('deleted', { selection: { nodes: [n] } });\n      });\n    };\n\n    $scope.destroyNode = function (n) {\n      nodeService.destroy(n).then(function (deleted) {\n        $scope.selection.selectedNode = undefined;\n        // this assumes that the current view is not of deleted items, otherwise this would be inconsistent\n        // let view handle its own data ?\n        delete $scope.activeView.data.nodes[n.id];\n        $scope.publish('deleted', { selection: { nodes: [n] } });\n      });\n    };\n\n    $scope.saveNode = function (n) {\n      nodeService.save(n, session.user).then(function (node) {\n        $scope.node = node;\n        var newData = {};\n        newData[node.id] = node;\n        $scope.publish('dataUpdate', newData);\n        // if type, refresh types\n        if (node.class == 'Type') {\n          utils.refreshTypes();\n        }\n        $(node.temp.links).each(function (i, e) {\n          e.editing = undefined;\n        });\n      });\n    };\n\n    $scope.restoreNode = function (n) {\n      nodeService.restore(n).then(function (node) {\n        $scope.node = node;\n        var newData = {};\n        newData[node.id] = node;\n        $scope.publish('dataUpdate', newData);\n      });\n    };\n\n    // tie label value to lookup if empty or the same already\n    $scope.$watch('node.lookup', function (lookup, beforechange) {\n      if (lookup) {\n        if ($scope.node.label != undefined && $scope.node.label.trim() == '' || $scope.node.label == beforechange) {\n          $scope.node.label = lookup;\n        }\n      }\n    });\n\n    $scope.nodeTypes = [];\n    $scope.$watchCollection('node.labels', function (labels) {\n      if (labels) {\n        (function () {\n          var selectedTypes = [];\n          angular.forEach($scope.node.labels, function (l) {\n            if (utils.types[l]) {\n              selectedTypes.push({ lookup: l, class: 'Type' });\n            }\n          });\n          $scope.nodeTypes = selectedTypes;\n          if (!$scope.node.class && $scope.nodeTypes.length === 1) {\n            $scope.node.class = $scope.nodeTypes[0].lookup; // for types the lookup will always be the label\n          }\n        })();\n      }\n    });\n\n    // Can be called from clicking label,\n    // in which case item is text value,\n    // or from the typeahead in which case it is an object with Lookup property\n    $scope.setType = function (item) {\n      if (utils.isType(item.label)) {\n        $scope.node.class = item.label;\n      }\n    };\n\n    $scope.$watch('newPredicate', function (v) {\n      if (v) {\n        $scope.addRelationship({ lookup: v.toUpperCase().replace(/ /g, '_') });\n      }\n    });\n\n    $scope.addRelationship = function (item) {\n      var p = predicateFactory.create({ lookup: item.lookup, direction: 'out' }); // currently no way to select 'in' relationships\n      $scope.node.relationships = $scope.node.relationships || {};\n      if (!$scope.node.relationships[p.toString()]) {\n        $scope.node.relationships[p.toString()] = { predicate: p, items: [] };\n      }\n    };\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('neograph.node.relationships', ['neograph.node.service', 'neograph.session', 'neograph.utils', 'neograph.models.predicate', 'ui.router']).controller('EditRelationshipsCtrl', [\"nodeService\", \"session\", \"utils\", \"$scope\", \"$stateParams\", \"predicateFactory\", function (nodeService, session, utils, $scope, $stateParams, predicateFactory) {\n    if ($stateParams.node) {\n      nodeService.get($stateParams.node, true).then(function (node) {\n        $scope.node = node;\n      });\n    }\n\n    $scope.$watch('node', function (node) {\n      if (node) {\n        node.labelled = node.labelled || [];\n        $('.labelEdit input').val('');\n        $scope.deleted = node.labels.indexOf('Deleted') > -1;\n      }\n    });\n\n    $scope.nodeTypes = [];\n\n    $scope.$watch('newPredicate', function (v) {\n      if (v) {\n        $scope.addRelationship({ lookup: v.toUpperCase().replace(/ /g, '_') });\n      }\n    });\n\n    $scope.addRelationship = function (item) {\n      var p = predicateFactory.create({ lookup: item.lookup, direction: 'out' }); // currently no way to select 'in' relationships\n      $scope.node.relationships = $scope.node.relationships || {};\n      if (!$scope.node.relationships[p.toString()]) {\n        $scope.node.relationships[p.toString()] = { predicate: p, items: [] };\n      }\n    };\n  }]);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  var _this = this;\n\n  angular.module('neograph.node.wikipedia', ['neograph.neo']).factory('wikiservice', function () {\n    var wikiTabs = function wikiTabs(data, page) {\n      var tabs = [];\n      if (data.parse) {\n        var $wikiDOM = $('<document>' + data.parse.text['*'] + '</document>');\n        // Handle redirects\n        if ($wikiDOM.find('ul.redirectText').length > 0) {\n          tabs = { redirect: $wikiDOM.find('ul.redirectText li a').attr('title') };\n        } else {\n          var images = $('<div></div>');\n          $wikiDOM.find('.image').each(function (i, e) {\n            $(e).attr('href', $(e).attr('href').replace('/wiki/', 'https://en.wikipedia.org/wiki/' + page.replace(' ', '_') + '#/media/')).attr('target', '_blank').css({ 'padding-right': '5px', 'padding-bottom': '5px' });\n          });\n          $wikiDOM.find('.image').appendTo(images);\n          $wikiDOM.find('p').css({ 'margin-bottom': '4px', 'clear': 'left' });\n          $wikiDOM.find('p,.thumb,.thumbinner').css({ 'width': '100%' });\n          $wikiDOM.find('h2,h3,h4').css({ 'margin-top': '4px', 'margin-bottom': '2px', 'float': 'left', 'clear': 'left', 'width': '100%', 'overflow': 'hidden' });\n          $wikiDOM.find('#toc').remove();\n          $wikiDOM.find('.editsection').remove();\n          $wikiDOM.find('.magnify').remove();\n          $wikiDOM.find('.reflist').remove();\n          $wikiDOM.find('img').css({ 'display': 'block', 'float': 'left', 'margin-right': '3px', 'margin-bottom': '3px' });\n          $wikiDOM.find('.thumb,.thumbinner').css({ 'float': 'left', 'margin-right': '3px', 'margin-bottom': '3px' });\n          $wikiDOM.find('.thumbcaption').css({ 'font-size': '11px' });\n          $wikiDOM.find('.plainlinks').remove();\n          $wikiDOM.find('#navbox').remove();\n          $wikiDOM.find('.rellink').remove();\n          $wikiDOM.find('.references').remove();\n          $wikiDOM.find('.IPA').remove();\n          $wikiDOM.find('sup').remove();\n          $wikiDOM.find('dd,blockquote').css({ 'margin': '0px', 'width': '', 'font-size': '11px', 'margin-bottom': '10px', 'margin-top': '7px' });\n          $wikiDOM.find('blockquote p').css({ 'font-size': '11px' });\n          // NB this has interesting stuff in it\n          $wikiDOM.find('.navbox, .vertical-navbox').remove();\n          $wikiDOM.find('#persondata').remove();\n          $wikiDOM.find('#Footnotes').parent().remove();\n          $wikiDOM.find('#References').parent().remove();\n          $wikiDOM.find('#Bibliography').parent().remove();\n          $wikiDOM.find('.refbegin').remove();\n          $wikiDOM.find('.dablink').remove();\n          // A bit too radical?\n          $wikiDOM.find('small').remove();\n          $wikiDOM.find(\"img[alt='Wikisource-logo.svg'], img[alt='About this sound'], img[alt='Listen']\").remove();\n          $wikiDOM.find('.mediaContainer').remove();\n          // Remove links - (leave external links ?)\n          $wikiDOM.find('a').each(function () {\n            $(_this).replaceWith($(_this).html());\n          });\n          $wikiDOM.find('.gallery').find('p').css({ 'width': '', 'font-size': '11px', 'float': 'left', 'clear': 'left' });\n          $wikiDOM.find('.gallery').find('.thumb').css({ 'width': '' });\n          $wikiDOM.find('.gallerybox').css('height', '220px');\n          $wikiDOM.find('.gallerybox').css('float', 'left');\n          $wikiDOM.find('table').css({ 'background': 'none', 'width': '', 'max-width': '', 'color': '' });\n          $wikiDOM.find('.gallery').remove();\n          $wikiDOM.find('#gallery').parent().remove();\n          $wikiDOM.find('#notes').parent().remove();\n          $wikiDOM.find('#sources').parent().remove();\n          // Radical - remove all tables\n          $wikiDOM.find('table').remove();\n          $wikiDOM.find('h1,h2,h3,h4').next().css({ 'clear': 'left' });\n          $wikiDOM.find('dl').remove();\n          $wikiDOM.find('.thumb').remove();\n          $wikiDOM.find('ul,.cquote').css({ 'float': 'left', 'clear': 'left' });\n          $wikiDOM.find('.infobox, .vcard').remove();\n          $wikiDOM.find('.thumbimage').css({ 'max-width': '150px', 'height': 'auto' });\n          $wikiDOM.find('.mw-editsection').remove();\n          $wikiDOM.html($wikiDOM.html().replace('()', ''));\n          $wikiDOM.html($wikiDOM.html().replace('(; ', '('));\n          $wikiDOM.find('h2').css({ 'cursor': 'pointer', 'color': 'rgba(0,85,128,1)', 'font-size': '20px' });\n          $wikiDOM.find('h3').css({ 'font-size': '18px' });\n          $wikiDOM.find('#Gallery').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#See_also').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#Notes').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#External_links').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#Selected_works').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#Sources').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#Other_reading').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#Further_reading').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#Resources').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#Further_reading_and_sources').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#List_of_paintings').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#Self-portraits').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#Selected_paintings').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#References_and_sources').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#Partial_list_of_works').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('#Notes_and_references').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('[id^=Selected_works]').parent().nextUntil('h2').andSelf().remove();\n          $wikiDOM.find('[id^=Books]').parent().nextUntil('h2').andSelf().remove();\n\n          var $introTab = $('<div></div>');\n          $wikiDOM.find('p:first').nextUntil('h2').andSelf().appendTo($introTab);\n          if ($introTab.text().indexOf('Redirect') === -1 && $introTab.text().indexOf('may refer to') === -1) {\n            $introTab.find('ul').remove();\n          }\n          if ($introTab.html()) {\n            tabs.push({\n              header: 'Summary',\n              content: $introTab.html().replace('/; /g', '')\n            });\n          }\n\n          $wikiDOM.find('h2').each(function (i, e) {\n            var $tab = $('<div></div>');\n            $(e).nextUntil('h2').appendTo($tab);\n            if ($tab.html()) {\n              tabs.push({\n                header: $(e).text(),\n                content: $tab.html()\n              });\n            }\n          });\n\n          if (images.html()) {\n            images.find('img').css({ 'width': '250px', 'marginBottom': '5px' });\n            tabs.push({\n              header: 'Images',\n              content: images.html()\n            });\n          }\n        }\n      }\n      return tabs;\n    };\n\n    var getWiki = function getWiki(page, callback) {\n      $.getJSON('http://en.wikipedia.org/w/api.php?action=parse&format=json&callback=?', {\n        page: page,\n        prop: 'text',\n        uselang: 'en'\n      }, function (data) {\n        var tabs = wikiTabs(data, page);\n        if (tabs.redirect) {\n          getWiki(tabs.redirect, callback);\n        } else {\n          callback(tabs);\n        }\n      });\n    };\n\n    return {\n      getPage: function getPage(page, callback) {\n        return getWiki(page, callback);\n      }\n    };\n  }).directive('wikipedia', [\"wikiservice\", \"neo\", function (wikiservice, neo) {\n    return {\n      restrict: 'E',\n      templateUrl: 'app/node/wikipedia/node.wikipedia.html',\n      scope: {\n        node: '=',\n        window: '=',\n        active: '='\n      },\n      link: function link($scope, $element) {\n        $scope.tabs = [];\n\n        $scope.setActiveTab = function (tab) {\n          $scope.activeTab = tab;\n        };\n\n        var loaded = false;\n        $scope.$watch('node', function (node) {\n          if (node) {\n            loaded = false;\n            $scope.page = node.Wikipagename || node.Name || node.Title;\n          }\n        });\n\n        $scope.savePage = function () {\n          $scope.node.Wikipagename = $scope.page;\n          neo.saveWikipagename($scope.node).then(function (node) {\n            return $scope.page = node.Wikipagename;\n          });\n        };\n\n        var getPage = function getPage() {\n          wikiservice.getPage($scope.page, function (tabs) {\n            $scope.tabs = tabs;\n            $scope.activeTab = $scope.tabs[0];\n            $scope.$digest();\n            $($element).find('.wikidropdown').dropdown();\n            loaded = true;\n          });\n        };\n\n        $scope.$watch('page', function (page) {\n          if (page && $scope.active) {\n            getPage();\n          } else {\n            $scope.tabs = [];\n          }\n        });\n\n        $scope.$watch('active', function (active) {\n          if ($scope.page && active && !loaded) {\n            getPage();\n          }\n        });\n      }\n    };\n  }]);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  controller.$inject = [\"$scope\", \"$state\", \"nodeService\"];\n  angular.module('neograph.node.search', ['neograph.node.service', 'ui.router']).controller('SearchCtrl', controller);\n\n  function controller($scope, $state, nodeService) {\n    var vm = this;\n    vm.node = undefined;\n    $scope.$watch('vm.node', function (n) {\n      if (n && n.label) {\n        $state.go('admin.node', { node: n.label });\n      }\n    });\n\n    vm.newNode = newNode;\n    vm.addNodeToGraph = addNodeToGraph;\n\n    function addNodeToGraph(node) {\n\n      if (!$scope.views.Graph.data.nodes[node.id]) {\n        neo.getRelationships(node.id).then(function (g) {\n\n          var newData = {\n            edges: g.edges,\n            nodes: {}\n          };\n          newData.nodes[node.id] = node;\n\n          $scope.publish('dataUpdate', newData);\n\n          if (node.id === $scope.selection.selectedNode.id) {\n            $scope.publish('selected', { selection: { nodes: [node.id] } });\n            $scope.publish('focus', node.id);\n          }\n        });\n        $scope.activeView = graphView;\n      }\n    };\n\n    function newNode() {\n\n      var newNode = {\n        id: -1,\n        labels: [],\n        Type: '',\n        temp: {\n          tabs: ['Properties']\n        }\n      };\n\n      if (vm.nodeLookupText && (!vm.selection.selectedNode || vm.nodeLookupText != vm.selection.selectedNode.Lookup)) {\n        newNode.lookup = vm.nodeLookupText;\n      }\n      vm.selection.selectedNode = newNode;\n      vm.tabs = $scope.selection.selectedNode.temp.tabs;\n      vm.selectedTab = 'Properties';\n    }\n  }\n})();\n'use strict';\n\nangular.module('neograph.query.generator.favouritesFilter', ['neograph.neo']).directive('favouritesFilter', [\"neo\", function (neo) {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/query/generator/favouritesFilter.html',\n    scope: {\n      options: '=',\n      generated: '='\n    },\n    link: function link($scope, $element, $attrs) {\n      $scope.filters = [];\n      $scope.node = {};\n      var labels = [];\n      $scope.$watch('options', function (options) {\n        if (options) {\n          $scope.node = options.user;\n        }\n      });\n\n      $scope.$watch('node', function (user) {\n        load();\n      });\n\n      var load = function load() {\n        if ($scope.node) {\n          labels = [$scope.node.Lookup, 'Favourite'];\n          getFilters();\n          $scope.enabledFilters = [];\n          $scope.process();\n        }\n      };\n\n      var getFilters = function getFilters() {\n        if (labels && labels.length) {\n          var labelQuery = 'match (a:' + labels.join(':') + ') - [] -> (b) return distinct(LABELS(b))';\n          neo.getDistinctLabelsQuery(labelQuery).then(function (l) {\n            // remove filter for this node as it is duplicating\n            angular.forEach(labels, function (lab) {\n              l.splice($.inArray(lab, l), 1);\n            });\n            $scope.filters = l;\n          });\n        }\n      };\n\n      $scope.process = function (labs) {\n        if ($scope.node) {\n          labs = labs || [];\n          var b = 'b';\n          if (labs.length) {\n            b += ':' + labs.join(':');\n          }\n          var q = 'match (a:' + labels.join(':') + ') - [] -> (' + b + ')';\n          $scope.generated = q + ' return b';\n          if (labs.length) {\n            neo.getDistinctLabelsQuery(q + '  return distinct(LABELS(b))').then(function (l) {\n              $scope.enabledFilters = l;\n            });\n          } else {\n            $scope.enabledFilters = [];\n          }\n        }\n      };\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.query.generator.nodeFilter', ['neograph.neo']).directive('nodeFilter', [\"neo\", function (neo) {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/query/generator/nodeFilter.html',\n    scope: {\n      options: '=',\n      generated: '=',\n      nodechanged: '&?'\n    },\n    link: function link($scope) {\n      $scope.filters = [];\n      $scope.node = {};\n      var labels = [];\n\n      var getFilters = function getFilters() {\n        if (labels && labels.length) {\n          neo.getDistinctLabels(labels).then(function (l) {\n            // Remove filter for this node as it is duplicating\n            labels.forEach(function (lab) {\n              l.splice(lab.indexOf(l), 1);\n            });\n            $scope.filters = l;\n          });\n        }\n      };\n\n      var load = function load() {\n        if ($scope.node) {\n          labels = [$scope.node.label, 'Picture'];\n          getFilters();\n          $scope.enabledFilters = [];\n          $scope.process();\n        }\n      };\n\n      $scope.$watch('options', function (options) {\n        $scope.node = options.node;\n      });\n\n      $scope.$watch('node', function (node) {\n        if ($scope.nodechanged) {\n          $scope.nodechanged({ node: node });\n        }\n        load();\n      });\n\n      $scope.openNode = function () {\n        if ($scope.node) {\n          $scope.publish('selected', { selection: { nodes: [$scope.node] } });\n        }\n      };\n\n      $scope.process = function (labs) {\n        if ($scope.node) {\n          if (!labs || !labs.length) {\n            labs = labels;\n          } else {\n            labs = labs.concat(labels);\n          }\n          $scope.generated = '\\n              match (a:' + labs.join(':') + ') return a \\n              order by a.Status desc limit 500\\n              ';\n          if (labs != labels) {\n            neo.getDistinctLabels(labs).then(function (l) {\n              $scope.enabledFilters = l;\n            });\n          } else {\n            $scope.enabledFilters = [];\n          }\n        }\n      };\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.query.generator.nodeGraph', ['neograph.neo']).directive('nodeGraph', [\"neo\", function (neo) {\n  return {\n    restrict: 'E',\n    templateUrl: 'app/query/generator/nodeGraph.html',\n    scope: {\n      options: '=',\n      generated: '=',\n      nodechanged: '&?'\n    },\n    link: function link($scope) {\n      $scope.querys = [];\n      $scope.selected = '';\n      $scope.node = {};\n      $scope.$watch('options', function (options) {\n        $scope.node = options.node;\n      });\n\n      $scope.$watch('selected', function (sel) {\n        if (sel && sel.q) {\n          $scope.generated = sel.q;\n        }\n      });\n\n      $scope.$watch('node', function (node) {\n        if (node && node.id) {\n          if ($scope.nodechanged) {\n            $scope.nodechanged({ node: node });\n          }\n          neo.getNode(node.id, false).then(function (loaded) {\n            getQuerys(loaded);\n          });\n        }\n      });\n\n      $scope.openNode = function () {\n        if ($scope.node) {\n          $scope.publish('selected', { selection: { nodes: [$scope.node] } });\n        }\n      };\n\n      function getQuerys(node) {\n        if (node) {\n          (function () {\n            var querys = [];\n            var Lookup = node.Lookup;\n\n            querys.push({\n              name: 'All immediate relationships',\n              q: 'MATCH (c)-[r]-(d:Global) where ID(c) = ' + node.id + ' return c,d,r'\n            });\n\n            querys.push({\n              name: 'Self',\n              q: 'MATCH (c:' + node.Label + ')-[r]-(d:' + node.Label + ') return c,d,r'\n            });\n\n            if (node.labels.indexOf('Provenance') > -1) {\n              querys.push({\n                name: 'Provenance',\n                q: '\\n                  MATCH (c:Global:' + Lookup + ')-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) \\n                  and not d.Lookup=\\'' + Lookup + '\\' \\n                  and not c.Lookup=\\'' + Lookup + '\\'  return c,d,r\\n                  '\n              });\n            }\n\n            if (node.labels.indexOf('Period') > -1) {\n              querys.push({\n                name: 'Period',\n                q: '\\n                  MATCH (c:Global:' + Lookup + ')-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) \\n                  and not d.Lookup=\\'' + Lookup + '\\' and not c.Lookup=\\'' + Lookup + '\\'  return c,d,r\\n                  '\n              });\n            }\n\n            if (node.labels.indexOf('Theme') > -1) {\n              querys.push({\n                name: 'Theme',\n                q: '\\n                  MATCH (c:Global:' + Lookup + ')-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) \\n                  and not d.Lookup=\\'' + Lookup + '\\' and not c.Lookup=\\'' + Lookup + '\\'  return c,d,r\\n                  '\n              });\n            }\n\n            if (node.labels.indexOf('Person') > -1) {\n              querys.push({\n                name: 'Outbound Influence',\n                q: '\\n                  MATCH (c {Lookup:\\'' + Lookup + '\\'})-[r]->(d:Painter) \\n                  with c,d,r optional  match(d) -[s]->(e:Painter) return c,d,r,s,e ',\n                connectAll: true\n              });\n              querys.push({\n                name: 'Inbound Influence',\n                q: '\\n                  MATCH (c {Lookup:\\'' + Lookup + '\\'})<-[r]-(d:Painter) \\n                  with c,d,r optional  match(d) <-[s]-(e:Painter) return c,d,r,s,e \\n                  ',\n                connectAll: true\n              });\n            }\n\n            if (node.labels.indexOf('Group') > -1) {\n              querys.push({\n                name: 'Group',\n                q: '\\n                match (n {Lookup:\\'' + Lookup + '\\'}) -[r]-(m:Global) -[s]-(p:Global) \\n                where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) \\n                and (m:Painter or m:Group) and (p:Painter or p:Group) \\n                and not m:Provenance and not p:Provenance return n,r,m,s,p\\n                ',\n                connectAll: true\n              });\n            }\n\n            if (node.labels.indexOf('Iconography') > -1) {\n              querys.push({\n                name: 'Iconography',\n                q: '\\n                MATCH (c:Global:' + Lookup + ')-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  \\n                and not d.Lookup=\\'' + Lookup + '\\' and (d:' + Lookup + ' or d:Provenance or d:Group \\n                or d:Iconography or d:Place) return c,d,r\\n                ',\n                connectAll: true\n              });\n            }\n\n            if (node.YearFrom && node.YearTo) {\n              querys.push({\n                name: 'YearFromYearTo',\n                q: '\\n                MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and \\n                (\\n                  (c.YearTo >= ' + node.YearFrom + ' and c.YearTo<= ' + node.YearTo + ') \\n                  or (c.YearFrom >= ' + node.YearFrom + ' and c.YearFrom<= ' + node.YearTo + ')\\n                )\\n                and \\n                (\\n                  (d.YearTo >= ' + node.YearFrom + ' and d.YearTo<= ' + node.YearTo + ') \\n                  or (d.YearFrom >= ' + node.YearFrom + ' and d.YearFrom<= ' + node.YearTo + ')\\n                )\\n                return c,d,r\\n               ',\n                connectAll: true\n              });\n            }\n\n            var prevselection = $scope.selected.name;\n\n            $scope.querys = querys;\n            $scope.querys.forEach(function (e) {\n              if (e.name === prevselection) {\n                $scope.selected = e;\n              }\n            });\n          })();\n        }\n      }\n    }\n  };\n}]);\n'use strict';\n\nangular.module('neograph.query.generator', ['neograph.query.generator.favouritesFilter', 'neograph.query.generator.nodeFilter', 'neograph.query.generator.nodeGraph']);","(function() {\r\n  'use strict';\r\n\r\n  angular.module('neograph.node', [\r\n    'neograph.node.wikipedia',\r\n    'neograph.node.multiple',\r\n    'neograph.node.images',\r\n    'neograph.node.properties',\r\n    'neograph.node.relationships',\r\n    'neograph.node.search',\r\n    'neograph.node.service',\r\n    'neograph.node.routes',\r\n    'neograph.node.controller',\r\n    'ui.router'\r\n  ])\r\n  .controller('NodeCtrl', controller);\r\n\r\n  function controller($scope, $stateParams, nodeService) {\r\n    var vm = this;\r\n    vm.selection = {\r\n      selectedNode: null,\r\n      selectedEdge: null,\r\n      hoverNode: null\r\n    };\r\n    vm.tabs = ['Properties', 'Relationships', 'Images'];\r\n    vm.selectedTab = 'Properties';\r\n    vm.selectTab = function (tab) {\r\n      vm.selectedTab = tab;\r\n    };\r\n    activate();\r\n    function activate() {\r\n      if ($stateParams.node) {\r\n        nodeService.get($stateParams.node, true).then(function (node) {\r\n          vm.selection.selectedNode = node;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n})();","(function() {\r\n  'use strict';\r\n  \r\n  angular.module('neograph.node.routes',[])\r\n    .config(function ($stateProvider) {\r\n      $stateProvider\r\n        .state('admin.node', {\r\n          url:'/node/:node',\r\n          views: {\r\n            'panel@admin': {\r\n              controller:'NodeCtrl as vm',\r\n              templateUrl:'app/node/node.html'\r\n            },\r\n            'properties@admin.node': {\r\n              templateUrl:'app/node/properties/node.properties.html',\r\n              controller:function ($scope, $stateParams, nodeService) {\r\n                if ($stateParams.node) {\r\n                  nodeService.get($stateParams.node, true).then(function (node) {\r\n                    $scope.node = node;\r\n                  });\r\n                }\r\n              } \r\n            },\r\n            'relationships@admin.node':{\r\n              templateUrl:'app/node/relationships/node.relationships.html',\r\n              controller:function ($scope, $stateParams, nodeService) {\r\n                if ($stateParams.node) {\r\n                  nodeService.get($stateParams.node, true).then(function (node) {\r\n                    $scope.node = node;\r\n                    console.log(node);\r\n                  });\r\n                }\r\n              }\r\n            },\r\n            'images@admin.node': {\r\n              controller:'NodeImagesCtrl',\r\n              templateUrl:'app/node/images/node.images.html'\r\n            }\r\n          }\r\n        })\r\n        .state('admin.node.edit', {\r\n          url:'/edit',\r\n          views:{\r\n            'properties@admin.node':{\r\n              templateUrl:'app/node/properties/node.properties.edit.html',\r\n              controller:'EditPropertiesCtrl'\r\n            },\r\n            'relationships@admin.node':{\r\n              templateUrl:'app/node/relationships/node.relationships.edit.html',\r\n              controller:'EditRelationshipsCtrl'\r\n            }\r\n          }\r\n        });\r\n    });\r\n})();\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular.module('neograph.node.service',[])\r\n    .factory('nodeService', service);\r\n\r\n  function service(neoClient, utils, $q, nodeFactory) {\r\n\r\n    var lastLoadedNode = {};\r\n\r\n    var api = {\r\n      setPropsAndTabsFromLabels: function (node) {\r\n        return neoClient.node.setPropsAndTabs({ node:node }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      get: function (label, addrelprops) {\r\n\r\n        if (addrelprops) {\r\n\r\n          if (lastLoadedNode && (label === lastLoadedNode.Label || label === lastLoadedNode.id)) {\r\n            return $q.when(lastLoadedNode);\r\n          }\r\n          else {\r\n\r\n            return neoClient.node.getWithRels({ id: label }).$promise.then(function (node) {\r\n\r\n\r\n              lastLoadedNode = nodeFactory.create(node.toJSON());\r\n              console.log(lastLoadedNode);\r\n              return lastLoadedNode;\r\n            });\r\n          }\r\n\r\n\r\n        }\r\n        else {\r\n          return neoClient.node.get({ id: label }).$promise.then(function (node) {\r\n            return node.toJSON();\r\n          });\r\n        }\r\n\r\n      },\r\n      getList: function (q, limit) { // q = match (n) & where only (without return)\r\n        return neoClient.node.getList({ q: q, limit: limit }).$promise;// returns array\r\n      },\r\n      saveWikipagename: function (n)// short version for freebase prop saving\r\n          {\r\n        return neoClient.node.saveWikipagename({\r\n          id: n.id,\r\n          name: n.Wikipagename\r\n        }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      getImages:function (node) {\r\n\r\n        return neoClient.node.getImages({\r\n          id: node.id,\r\n          isPicture: node.temp.isPicture,\r\n          isGroup: node.temp.isGroup\r\n        }).$promise;// returns array\r\n      },\r\n      saveProps: function (n) {// short version for freebase prop saving\r\n        return neoClient.node.saveProps({ node: n, user: user }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      getProps: function (labels) {\r\n        return neoClient.node.getProps({ labels: labels }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      save: function (n, user) {\r\n        if (n.temp.trimmed) {\r\n          throw ('Node is trimmed - cannot save');\r\n        }\r\n        return neoClient.node.save({ node: n, user: user }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      saveRels: function (n) {\r\n        return neoClient.node.saveRels({ node: n }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      // deletes node and relationships forever\r\n      destroy: function (node) {\r\n        return neoClient.node.destroy({ node: node }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n      },\r\n      // only supports 1 node at the mo\r\n      delete: function (node) {\r\n        var deferred = $q.deferred();\r\n        if (node && node.id) {\r\n          return neoClient.node.delete({ node: node }).$promise.then(function (data) {\r\n            deferred.resolve(data.toJSON());\r\n          });\r\n        } else {\r\n          deferred.resolve({});\r\n        }\r\n      },\r\n      // only supports 1 node at the mo\r\n      restore: function (node) {\r\n        var deferred = $q.deferred();\r\n        if (node && node.id) {\r\n          neoClient.node.restore({ node: node }).$promise.then(function (data) {\r\n            deferred.resolve(data.toJSON());\r\n          });\r\n        } else {\r\n          deferred.resolve({});\r\n        }\r\n        return deferred.promise;\r\n      },\r\n      search: function (txt, restrict) { // restrict = labels to restrict matches to\r\n        if (txt) {\r\n          return neoClient.node.search({ txt: txt, restrict: restrict }).$promise;// returns array\r\n        }\r\n      }\r\n    };\r\n    return api;\r\n\r\n  }\r\n})();","angular.module('neograph.neo.client', ['ngResource', 'neograph.settings'])\r\n.factory('neoClient', ['$resource', 'settings', function ($resource, settings) {\r\n    // return $resource('http://localhost:1337/node/match', {txt:'@txt',restrict:'@restrict'}, {\r\n    //    matchNodes: {\r\n    //        method: 'POST',\r\n    //        isArray:true\r\n    //    }\r\n    // });\r\n\r\n    // return $resource(null,null, {\r\n    //    matchNodes: {\r\n    //        url: 'http://localhost:1337/node/match',\r\n    // //       params: {txt:'',restrict:''},\r\n    //        method: 'POST',\r\n    //        isArray: true\r\n    //    }\r\n    // });\r\n\r\n  var root = settings.apiRoot;\r\n\r\n  return {\r\n\r\n    node:$resource(null, null, {\r\n      search: {\r\n        url: root + '/search',\r\n\r\n        method: 'POST',\r\n        isArray: true\r\n      }\r\n            ,\r\n      get: {\r\n        url: root + '/node/get/:id',\r\n        method: 'GET',\r\n      }\r\n            ,\r\n      getWithRels: {\r\n        url: root + '/node/getWithRels/:id',\r\n        method: 'GET',\r\n      }\r\n                   ,\r\n      getRelationships: {\r\n        url: root + '/node/relationships/:id',\r\n        method: 'GET',\r\n      }\r\n            ,\r\n      getOne: {\r\n        url: root + '/node/single',\r\n        method: 'POST',\r\n      }\r\n            ,\r\n      getList: {\r\n        url: root + '/node/list',\r\n        method: 'POST',\r\n        isArray:true\r\n      }\r\n            ,\r\n      save: {\r\n        url: root + '/node/save',\r\n\r\n        method: 'POST'\r\n      },\r\n      saveProps: {\r\n        url: root + '/node/saveProps',\r\n\r\n        method: 'POST'\r\n      },\r\n      saveRels: {\r\n        url: root + '/node/saveRels',\r\n\r\n        method: 'POST'\r\n      },\r\n      saveWikipagename: {\r\n        url: root + '/node/saveWikipagename',\r\n\r\n        method:'POST'\r\n      }\r\n            ,\r\n      saveMultiple: {\r\n        url: root + '/node/saveMultiple',\r\n\r\n        method: 'POST'\r\n      }\r\n            ,\r\n      del: {\r\n        url: root + '/node/delete',\r\n\r\n        method: 'POST'\r\n      }\r\n            ,\r\n      destroy: {\r\n        url: root + '/node/destroy',\r\n\r\n        method: 'POST'\r\n      },\r\n      restore: {\r\n        url: root + '/node/restore',\r\n\r\n        method: 'POST'\r\n      }\r\n            ,\r\n      getProps: {\r\n        url: root + '/node/getProps',\r\n\r\n        method: 'POST'\r\n\r\n      }\r\n               ,\r\n      getImages: {\r\n        url: root + '/node/getImages',\r\n        isArray:true,\r\n        method: 'POST'\r\n\r\n      }\r\n\r\n\r\n\r\n    }),\r\n    edge: $resource(null, null, {\r\n      save: {\r\n        url: root + '/edge/save',\r\n        method: 'POST'\r\n      }\r\n            ,\r\n      del: {\r\n        url: root + '/edge/delete',\r\n        method: 'POST'\r\n\r\n      }\r\n            ,\r\n      getImageRelationships: {\r\n        url: root + '/edge/imagerelationships',\r\n        method: 'POST'\r\n      }\r\n    })\r\n        ,\r\n    user:$resource(null, null, {\r\n      saveFavourite: {\r\n        url: root + '/user/saveFavourite',\r\n\r\n        method: 'POST'\r\n\r\n      },\r\n      get: {\r\n        url: root + '/user/:user',\r\n        method: 'GET'\r\n      }\r\n    })\r\n        ,\r\n    graph: $resource(null, null, {\r\n      get: {\r\n        url: root + '/graph',\r\n\r\n        method: 'POST'\r\n      }\r\n    })\r\n            ,\r\n    type: $resource(null, null, {\r\n      getAll: {\r\n        url: root + '/types',\r\n        method: 'GET'\r\n      }\r\n    })\r\n        ,\r\n    predicate: $resource(null, null, {\r\n      getAll: {\r\n        url: root + '/predicates',\r\n        method: 'GET'\r\n      }\r\n    })\r\n        ,\r\n    utils:$resource(null, null, {\r\n      getDistinctLabels: {\r\n        url: root + '/utils/distinctLabels',\r\n        isArray:true,\r\n        method: 'POST'\r\n      }\r\n    })\r\n\r\n  };\r\n\r\n}]);\r\n","angular.module('neograph.neo', ['neograph.utils', 'neograph.neo.client'])\r\n.factory('neo', ['neoClient', 'utils', function (neoClient, utils) {\r\n\r\n\r\n  var that = {\r\n\r\n    getGraph: function (q, returnArray) {\r\n\r\n      return neoClient.graph.get({ q: q, returnArray: returnArray }).$promise.then(function (data) {\r\n\r\n        var out = data.toJSON();\r\n        console.dir(out);\r\n        return out;\r\n\r\n      });\r\n    }\r\n       ,\r\n        // returns all relationships between supplied nodes, which can be vis.Dataset or graph data object\r\n    getAllRelationships: function (nodes) {\r\n      var nodeIds = '';\r\n\r\n      if (nodes.getIds) // if vis.DataSet\r\n            {\r\n        nodeIds = nodes.getIds({ returnType: 'Array' }).join(',');\r\n      }\r\n      else { // otherwise data object\r\n\r\n        for (var key in nodes) {\r\n          if (nodeIds.length) {\r\n            nodeIds += ',';\r\n          }\r\n          nodeIds += key;\r\n        }\r\n      }\r\n\r\n      var q = 'MATCH a -[r]- b WHERE id(a) IN[' + nodeIds + '] and id(b) IN[' + nodeIds + '] and not (a-[:TYPE_OF]-b) return r';\r\n\r\n      return that.getGraph(q);\r\n\r\n    }\r\n\r\n             ,\r\n    getRelationships: function (id) {\r\n\r\n      return neoClient.node.getRelationships({ id: id }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n\r\n\r\n    }\r\n         ,\r\n    getImages: function (label) {\r\n\r\n      return neoClient.node.getImages({ label: label }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n\r\n\r\n    }\r\n\r\n        ,\r\n    saveMultiple: function (multiple) {\r\n\r\n\r\n      return neoClient.node.saveMultiple({ multiple: multiple }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n\r\n\r\n    }\r\n           ,\r\n        // saves edge to neo (update/create)\r\n        // TODO: according to certain rules labels will need to be maintained when relationships are created. (update not required as we always delete and recreate when changing start/end nodes)\r\n        // tag a with label b where:\r\n        // a=person and b=provenance (eg painter from france)\r\n        // a=person and n=group, period (eg painter part of les fauves / roccocco)\r\n        // a=picture and b=non-person (eg picture by corot / of tree) - although typically this will be managed through labels directly (which will then in turn has to keep relationships up to date)\r\n    saveEdge: function (e) { // startNode and endNode provide the full node objects for the edge\r\n\r\n      return neoClient.edge.save({ edge: e }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n    }\r\n        ,\r\n    saveFavourite: function (node, user) {\r\n\r\n\r\n      return neoClient.user.saveFavourite({ user: user, node: node }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n\r\n\r\n    }\r\n\r\n        ,\r\n    deleteEdge: function (edge) {\r\n\r\n      if (edge && edge.id) {\r\n\r\n        return neoClient.edge.delete({ edge: edge }).$promise.then(function (data) {\r\n          return data.toJSON();\r\n        });\r\n\r\n\r\n      }\r\n\r\n    }\r\n        ,\r\n    getUser: function (userLookup) {\r\n\r\n      return neoClient.user.get({ user: userLookup }).$promise.then(function (data) {\r\n\r\n        return data.toJSON();\r\n      });\r\n\r\n    }\r\n        ,\r\n\r\n    getOne: function (q) { // q must be a match return a single entity n\r\n\r\n\r\n\r\n      return neoClient.node.getOne({ q: q }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n\r\n    }\r\n\r\n     ,\r\n    getImageRelationships: function (edge) { // loks up id/label first then call get by label\r\n\r\n      return neoClient.edge.getImageRelationships({ edge: edge }).$promise.then(function (data) {\r\n        return data.toJSON();\r\n      });\r\n\r\n    }\r\n\r\n        ,\r\n        // Alternatively i could query the actual labels and merge them into a distinct array\r\n    getDistinctLabels: function (labels) {\r\n\r\n\r\n      return neoClient.utils.getDistinctLabels({ labels: labels }).$promise;// returns array\r\n\r\n\r\n\r\n    }\r\n        ,\r\n    getDistinctLabelsQuery: function (q) {\r\n\r\n      return neoClient.utils.getDistinctLabels({ q: q }).$promise;// returns array\r\n\r\n    }\r\n\r\n  };\r\n\r\n  return that;\r\n\r\n}]);\r\n","angular.module('neograph.session', ['neograph.neo'])\r\n    .factory('session', ['neo', '$q', function (neo, $q) {\r\n\r\n      var anonUser = {\r\n        Lookup: 'Anonymous',\r\n        roles: { 'Public': {} }\r\n      };\r\n\r\n\r\n      var session = {\r\n\r\n        init: function () {\r\n\r\n          neo.getUser('Julian').then(function (user) {\r\n\r\n            session.user = user;\r\n            session.signedIn = true;\r\n          });\r\n\r\n          return session;\r\n\r\n        }\r\n        ,\r\n        signingIn: false\r\n        ,\r\n        signedIn: false\r\n        ,\r\n        user: anonUser\r\n        ,\r\n        signIn: function (username, password) {\r\n\r\n          return neo.authenticate(username, password).then(function (user) {\r\n\r\n            session.user = user;\r\n\r\n\r\n            console.log(session.user);\r\n             //   session.apps = service.getApps(session.user.roles);\r\n\r\n\r\n            localStorage.username = session.user.username;\r\n\r\n\r\n            session.signedIn = true;\r\n\r\n            if (user.roles.PreReg) {\r\n              $('body').addClass('prereg');\r\n            }\r\n            else {\r\n              $('body').removeClass('prereg');\r\n            }\r\n\r\n\r\n\r\n          }, function (failMessage) {\r\n            console.log(failMessage);\r\n            return $q.reject(failMessage);\r\n          });\r\n\r\n        }\r\n        ,\r\n        signOut: function () {\r\n\r\n          session.user = anonUser;\r\n          localStorage.username = '';// = JSON.stringify(session.user);\r\n          session.signedIn = false;\r\n          //  session.apps = service.getApps(session.user.roles);\r\n\r\n        }\r\n      };\r\n\r\n\r\n\r\n      if (localStorage.username) {\r\n        session.user = neo.getUser(localStorage.username);\r\n      }\r\n\r\n      if (session.user.name != 'Anonymous') {\r\n        session.signedIn = true;\r\n      }\r\n\r\n //   session.apps = service.getApps(session.user.roles);\r\n\r\n      return session.init();\r\n\r\n\r\n    }]);\n","angular.module('neograph.utils', ['neograph.neo.client', 'neograph.query.presets'])\r\n    .factory('utils', ['neoClient', 'queryPresets', function (neoClient, presets) {\r\n\r\n\r\n      Array.prototype.diff = function (a) {\r\n        return this.filter(function (i) { return a.indexOf(i) < 0; });\r\n      };\r\n\r\n      Array.prototype.ids = function () {\r\n        return this.map(function (e) { return e.id; });\r\n      };\r\n\r\n      Array.prototype.hasAny = function (a) {\r\n        return this.filter(function (i) { return a.indexOf(i) > -1; }).length > 0;\r\n      };\r\n\r\n      Array.prototype.unique = function () {\r\n        var a = [];\r\n        for (i = 0; i < this.length; i++) {\r\n          var current = this[i];\r\n          if (a.indexOf(current) < 0) a.push(current);\r\n        }\r\n        return a;\r\n      };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      var utils = {\r\n\r\n        init: function () {\r\n\r\n          utils.refreshTypes();\r\n          utils.refreshPredicates();\r\n          return utils;\r\n\r\n\r\n        }\r\n        ,\r\n        types: {}\r\n\r\n        ,\r\n        predicates: {}\r\n        ,\r\n        isType: function (label) {\r\n          return utils.types[label] != undefined;\r\n        }\r\n        ,\r\n        refreshTypes: function () {\r\n\r\n          return neoClient.type.getAll().$promise.then(function (types) {\r\n            utils.types = types;\r\n            return types;\r\n          });\r\n        }\r\n    ,\r\n        refreshPredicates: function () { // consider creating lookup nodes for relationship types so that i can store properties for them\r\n\r\n          return neoClient.predicate.getAll().$promise.then(function (predicates) {\r\n            utils.predicates = predicates.toJSON();\r\n               // console.log(utils.predicates);\r\n            return utils.predicates;\r\n          });\r\n\r\n\r\n\r\n\r\n        }\r\n     ,\r\n        isSystemInfo: function (label) {\r\n\r\n          return label == 'Global' || label == 'Type' || label == 'Label' || label == 'SystemInfo';\r\n\r\n        },\r\n        getLabelClass: function (node, label) {\r\n\r\n\r\n\r\n\r\n\r\n          if (node && label === node.Type) {\r\n            return 'label-warning';\r\n          }\r\n\r\n          if (utils.isSystemInfo(label)) {\r\n            return 'label-system';\r\n          }\r\n\r\n          if (utils.isType(label)) {\r\n            return 'label-inverse pointer';\r\n          }\r\n\r\n\r\n          return 'label-info';\r\n\r\n        }\r\n\r\n        ,\r\n        personTypes: ['Painter',\r\n                'Illustrator',\r\n                'Philosopher',\r\n                'Poet',\r\n                'FilmMaker',\r\n               'Sculptor',\r\n                'Writer',\r\n               'Patron',\r\n                 'Leader',\r\n                 'Explorer',\r\n                 'Composer',\r\n                'Scientist',\r\n                'Caricaturist',\r\n                 'Mathematician']\r\n        ,\r\n        pictureTypes: ['Painting', 'Illustration', 'Drawing', 'Print']\r\n        ,\r\n        isPerson: function (type) {\r\n\r\n          return type == 'Painter' ||\r\n                type == 'Illustrator' ||\r\n                type == 'Philosopher' ||\r\n                type == 'Poet' ||\r\n                type == 'FilmMaker' ||\r\n                type == 'Sculptor' ||\r\n                type == 'Writer' ||\r\n                type == 'Patron' ||\r\n                type == 'Leader' ||\r\n                type == 'Explorer' ||\r\n                type == 'Composer' ||\r\n                type == 'Scientist' ||\r\n                type == 'Caricaturist' ||\r\n                type == 'Mathematician';\r\n\r\n        }\r\n\r\n\r\n            // mopve to 'state' object\r\n            ,\r\n        tabSettings: {}\r\n            ,\r\n        selectedTab:'Properties'\r\n\r\n\r\n\r\n\r\n      };\r\n      return utils.init();\r\n\r\n    }]);\r\n","angular.module('neograph.query.graph', ['ui.router', 'neograph.models.node'])\r\n .factory('graphService', function(nodeFactory) {\r\n   var graphNodeFromNeoNode = neoNode => {\r\n     neoNode = nodeFactory.create(neoNode);\r\n     var type = neoNode.class;\r\n     var yf = parseInt(neoNode.yearFrom, 10);\r\n     var yt = parseInt(neoNode.yearTo, 10);\r\n     let y = yt;\r\n     if (yf && yt) {\r\n       y = yt - ((yt - yf) / 2);\r\n     }\r\n     let level = 0;\r\n     var startYear = 1400;\r\n     var endYear = 2000;\r\n     var step = 5;\r\n     let cnt = 1;\r\n     for (let i = startYear; i < endYear; i += step) {\r\n       if (y >= i && y < i + step) {\r\n         level = cnt;\r\n       }\r\n       cnt += 1;\r\n     }\r\n     if (y > endYear) {\r\n       level = cnt;\r\n     }\r\n     var node = {\r\n       id: neoNode.id,\r\n       label: neoNode.label || neoNode.lookup,\r\n       size: neoNode.status / 10,\r\n       group: neoNode.class,\r\n       mass: type === 'Group' ? 0.5 : 1,\r\n       radius: neoNode.isPerson() ? neoNode.status : 1,\r\n       // for hiearchichal layout,\r\n       level,\r\n       borderWidth: 0\r\n     };\r\n\r\n     var image = (type === 'Painting' || type === 'Picture') ?\r\n      neoNode.temp.thumbUrl : null;\r\n\r\n     if (image) {\r\n       node.image = image;\r\n       node.shape = 'image';\r\n     } else if (type === 'Provenance') {\r\n       node.fontSize = 50;\r\n       node.fontColor = 'lightgray';\r\n       node.color = 'transparent';\r\n     } else if (type === 'Iconography' || type === 'Place') {\r\n       node.shape = 'ellipse';\r\n     } else if (type === 'Quotation') {\r\n       node.shape = 'box';\r\n       node.color = 'transparent';\r\n       node.label = neoNode.text;\r\n     } else if (type === 'User') {\r\n       node.shape = 'star';\r\n       node.size = 20;\r\n     } else if (type === 'Link') {\r\n       node.label = neoNode.name;\r\n       node.shape = 'box';\r\n       node.color = 'transparent';\r\n     } else if (neoNode.isPerson()) {\r\n       node.shape = 'dot';\r\n     } else if (neoNode.isProperty()) {\r\n       node.shape = 'circle';\r\n     } else {\r\n       node.shape = 'box';\r\n     }\r\n\r\n     node.color = { background: node.color || '#97C2FC', border: 'transparent' };\r\n     if (neoNode.isProperty()) {\r\n       node.color.background = 'lightgreen';\r\n     }\r\n     return node;\r\n   };\r\n\r\n   var graphEdgeFromNeoEdge = neoEdge => {\r\n     var type = neoEdge.type;\r\n     var symmetrical = type === 'ASSOCIATED_WITH';\r\n     var hideEdgeLabel =\r\n            type === 'BY' ||\r\n            type === 'INFLUENCES' ||\r\n            type === 'INSPIRES' ||\r\n            type === 'DEALS_WITH' ||\r\n            type === 'PART_OF' ||\r\n            type === 'MEMBER_OF' ||\r\n            type === 'ASSOCIATED_WITH' ||\r\n            type === 'ACTIVE_DURING' ||\r\n            type === 'FROM' ||\r\n            type === 'DEVELOPS' ||\r\n            type === 'LEADS' ||\r\n            type === 'FOUNDS' ||\r\n            type === 'DEPICTS' ||\r\n            type === 'WORKS_IN' ||\r\n            type === 'STUDIES' ||\r\n            type === 'STUDIES_AT' ||\r\n            type === 'TEACHES' ||\r\n            type === 'TEACHES_AT';\r\n\r\n     let colour;\r\n     switch (type) {\r\n       case 'FROM':\r\n         colour = '#EEE';\r\n         break;\r\n       case 'INFLUENCES':\r\n         colour = 'pink';\r\n         break;\r\n       case 'TEACHES':\r\n       case 'TEACHES_AT':\r\n       case 'PROPERTY':\r\n         colour = 'green';\r\n         break;\r\n       default:\r\n         colour = 'blue';\r\n     }\r\n\r\n     var hideEdge = type === 'FROM';\r\n     var edge = {\r\n       id: neoEdge.id,\r\n       from: neoEdge.startNode,\r\n       to: neoEdge.endNode,\r\n       label: (\r\n         type !== 'EXTENDS' &&\r\n         type !== 'PROPERTY' &&\r\n         type !== 'INFLUENCES' &&\r\n         type !== 'ASSOCIATED_WITH'\r\n         ) ? type.toLowerCase() : null,\r\n       fontColor: 'blue',\r\n       color: colour,\r\n       opacity: hideEdge ? 0 : 1, // type === \"INFLUENCES\" ? 1 : 0.7,\r\n       style: symmetrical ? 'dash-line' : 'arrow', // arrow-center' ,\r\n       type: ['curved'],\r\n       labelAlignment: 'line-center'\r\n     };\r\n     return edge;\r\n   };\r\n\r\n\r\n   return {\r\n     defaultEdgeType: (fromType, toType) => {\r\n       if (toType === 'Provenance') {\r\n         return 'FROM';\r\n       } else if (toType === 'Painter') {\r\n         return 'INFLUENCES';\r\n       }\r\n       return 'ASSOCIATED_WITH';\r\n     },\r\n     options: {\r\n       edges: { widthSelectionMultiplier: 4 },\r\n       hierarchicalLayout: {\r\n         enabled: false,\r\n         levelSeparation: 10, // make this inversely proportional to number of nodes\r\n         nodeSpacing: 200,\r\n         direction: 'UD', //LR\r\n                //    layout: \"hubsize\"\r\n       },\r\n       dataManipulation: {\r\n         enabled: true,\r\n         initiallyVisible: true\r\n       },\r\n            // stabilize: true,\r\n            // stabilizationIterations: 1000,\r\n       physics: {\r\n         barnesHut: {\r\n           enabled: true,\r\n           gravitationalvarant: -6000,\r\n           centralGravity: 1,\r\n           springLength: 20,\r\n           springvarant: 0.04,\r\n           damping: 0.09\r\n         },\r\n         repulsion: {\r\n           centralGravity: 0.1,\r\n           springLength: 0.5,\r\n           springvarant: 0.05,\r\n           nodeDistance: 100,\r\n           damping: 0.09\r\n         },\r\n         hierarchicalRepulsion: {\r\n           enabled: false,\r\n           centralGravity: 0,\r\n           springLength: 270,\r\n           springvarant: 0.01,\r\n           nodeDistance: 300,\r\n           damping: 0.09\r\n         }\r\n       },\r\n       onDelete: (data, callback) => {\r\n       }\r\n     },\r\n     // Transforms neo graph data object into object\r\n     // containing array of nodes and array of edges renderable by vis network\r\n     toGraphData: g => ({\r\n       nodes: Object.keys(g.nodes).map(key => graphNodeFromNeoNode(g.nodes[key])),\r\n       edges: Object.keys(g.edges).map(key => graphEdgeFromNeoEdge(g.edges[key]))\r\n     })\r\n   };\r\n }).\r\n directive('graph', (graphService, $state) => ({\r\n   restrict: 'E',\r\n   templateUrl: 'app/query/graph.html',\r\n   scope: {\r\n     data: '=',\r\n     active: '=',\r\n     network: '='\r\n   },\r\n   link: ($scope, $element) => {\r\n     var graph = {\r\n       nodes: new vis.DataSet(),\r\n       edges: new vis.DataSet()\r\n     };\r\n     var graphWidth = 1300;\r\n     var graphHeight = $(window).height() - 80;\r\n     var topBarHeight = 150;\r\n     var options = graphService.options;\r\n     options.onConnect = (data, callback) => {\r\n       var newEdge = {\r\n         start: $scope.data.nodes[data.from],\r\n         type: graphService.defaultEdgeType(\r\n                $scope.data.nodes[data.from].Type,\r\n                $scope.data.nodes[data.to].Type),\r\n         end: $scope.data.nodes[data.to],\r\n         properties: { Weight: 3 }\r\n       };\r\n       $scope.publish('newEdge', newEdge);\r\n     };\r\n     var network = new vis.Network($element.find('.graphContainer')[0], graph, options);\r\n     var getSelectedNodeId = () => {\r\n       var selectedNodes = network.getSelectedNodes();\r\n       if (selectedNodes.length === 1) {\r\n         return selectedNodes[0];\r\n       }\r\n       return undefined;\r\n     };\r\n\r\n     $scope.data = {\r\n       nodes: {},\r\n       edges: {}\r\n     };\r\n     $scope.$on('$stateChangeSuccess', () => {\r\n       if ($state.params.node) {\r\n         Object.keys($scope.data.nodes).forEach(key => {\r\n           if ($scope.data.nodes[key].label === $state.params.node) {\r\n             if ($scope.data.nodes[key].id !== getSelectedNodeId()) {\r\n               network.selectNodes([key]);\r\n               network.focusOnNode(key, {\r\n                 scale: 1.5,\r\n                 animation: {\r\n                   duration: 1000,\r\n                   easingFunction: 'easeOutCubic'\r\n                 }\r\n               });\r\n             }\r\n           }\r\n         });\r\n       }\r\n     });\r\n\r\n     // Set size to window size\r\n     $scope.$watch('window', () => { network.setSize(`${graphWidth}px`, `${graphHeight}px`); });\r\n\r\n     // Fit to screen on resize\r\n     network.on('resize', () => {\r\n       if (getSelectedNodeId()) {\r\n         network.focusOnNode(getSelectedNodeId(), {\r\n           scale: 1,\r\n           animation: {\r\n             duration: 1000,\r\n             easingFunction: 'easeOutCubic'\r\n           }\r\n         });\r\n       } else {\r\n         network.zoomExtent({ duration: 1000, easingFunction: 'easeOutCubic' });\r\n       }\r\n     });\r\n\r\n     graph.nodes.on('*', () => {\r\n       if (graph.nodes.length) {\r\n         $('.network-manipulationUI.connect').css('display', 'inline-block');\r\n       } else {\r\n         $('.network-manipulationUI.connect').hide();\r\n       }\r\n     });\r\n\r\n     // Add event listeners\r\n     network.on('select', (params) => {\r\n       if (params.nodes.length === 1) {\r\n         var label = $scope.data.nodes[params.nodes[0]].label;\r\n         if (label) {\r\n           $state.go('admin.main.node.view', { node: label });\r\n         }\r\n       } else if (params.edges.length === 1) {\r\n         var id = params.edges[0];\r\n         var startNode = $scope.data.nodes[$scope.data.edges[id].startNode];\r\n         var endNode = $scope.data.nodes[$scope.data.edges[id].endNode];\r\n         var edge = {\r\n           id,\r\n           start: { lookup: startNode.lookup },\r\n           end: { lookup: endNode.lookup },\r\n           type: $scope.data.edges[id].type,\r\n           properties: $scope.data.edges[id].properties\r\n         };\r\n         $state.go('admin.main.edge.view', { edge: JSON.stringify(edge) });\r\n       }\r\n     });\r\n\r\n     $scope.subscribe('deleted', (params) => {\r\n       if (params.selection.nodes && params.selection.nodes.length) {\r\n         var nodeids = params.selection.nodes.map(n => n.id);\r\n         graph.nodes.remove(nodeids);\r\n       }\r\n       if (params.selection.edges && params.selection.edges.length) {\r\n         var edgeids = params.selection.edges.map(n => n.id);\r\n         graph.edges.remove(edgeids);\r\n       }\r\n     });\r\n\r\n     $scope.subscribe('focus', (nodeid) => {\r\n       network.focusOnNode(nodeid, {\r\n         scale: 1,\r\n         animation: {\r\n           duration: 1000,\r\n           easingFunction: 'easeOutCubic'\r\n         } });\r\n     });\r\n\r\n     $('.network-manipulationUI.connect').hide();\r\n\r\n     $scope.hoverNode = undefined;\r\n     $('.graphContainer').on('mousemove', event => {\r\n       var n = network._getNodeAt({\r\n         x: event.pageX,\r\n         y: event.pageY - topBarHeight - 55\r\n       });\r\n       $scope.$apply(() => {\r\n         if (n) {\r\n           var dataNode = $scope.data.nodes[n.id];\r\n           $scope.hoverNode = dataNode;\r\n           $scope.publish('hover', dataNode);\r\n         } else {\r\n           $scope.publish('hover', undefined);\r\n           $scope.hoverNode = undefined;\r\n         }\r\n       });\r\n     });\r\n\r\n     // Freeze simulation if not active\r\n     $scope.$watch('active', active => {\r\n       if (active !== undefined) {\r\n         network.freezeSimulation(!active);\r\n       }\r\n     });\r\n\r\n     $scope.$watch('data', () => {\r\n       if ($scope.active) {\r\n         graph.nodes.clear();\r\n         graph.edges.clear();\r\n         var gArr = graphService.toGraphData($scope.data);\r\n         graph.nodes.add(gArr.nodes);\r\n         graph.edges.add(gArr.edges);\r\n       }\r\n     });\r\n\r\n     // Update existing data (not replace)\r\n     $scope.subscribe('dataUpdate', g => {\r\n       if ($scope.active && $scope.data) {\r\n         Object.assign($scope.data.edges, g.edges);\r\n         Object.assign($scope.data.nodes, g.nodes);\r\n         var gArr = graphService.toGraphData(g);\r\n         graph.edges.update(gArr.edges);\r\n         graph.nodes.update(gArr.nodes);\r\n       }\r\n     });\r\n   }\r\n })\r\n);\r\n","angular.module('neograph.query',\r\n['neograph.query.presets', 'neograph.queryInput', 'neograph.query.graph'])\r\n.factory('queryFactory', queryPresets => {\r\n  function Query(key, render) {\r\n    this.key = key;\r\n    this.name = key;\r\n    this.render = render;\r\n    this.data = {\r\n      nodes: {},\r\n      edges: {}\r\n    };\r\n    this.body = { q: '', connectAll: false };\r\n    this.presets = queryPresets;\r\n    this.generators = {};\r\n\r\n    if (render === 'Graph') {\r\n      this.generators.nodeGraph = {\r\n        type: 'nodeGraph',\r\n        options: {}\r\n      };\r\n    }\r\n\r\n    if (render === 'Grid') {\r\n      this.generators.nodeFilter = {\r\n        type: 'nodeFilter',\r\n        options: {}\r\n      };\r\n      this.generators.favouritesFilter = {\r\n        type: 'favouritesFilter',\r\n        options: {}\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    create: (key, type) => new Query(key, type)\r\n  };\r\n}).\r\nfactory('queryService', queryFactory => {\r\n  let active = queryFactory.create('Query', 'Graph');\r\n  const queries = {};\r\n  queries[active.key] = active;\r\n\r\n  const listeners = [];\r\n  const publishChange = () => {\r\n    for (let i = 0; i < listeners.length; i ++) {\r\n      listeners[i](active);\r\n    }\r\n  };\r\n  return {\r\n    queries,\r\n    active,\r\n    update: key => {\r\n      active = queries[key];\r\n      publishChange();\r\n    },\r\n    subscribe: callback => listeners.push(callback)\r\n  };\r\n}).\r\ncontroller('QueryCtrl', ($scope, queryService) => {\r\n  queryService.subscribe(active => { $scope.active = active; });\r\n  $scope.queries = queryService.queries;\r\n  $scope.active = queryService.active;\r\n  $scope.selectedTab = $scope.active.key;\r\n  $scope.$watch('selectedTab', key => queryService.update(key));\r\n});\r\n","angular.module('neograph.query.presets', [])\r\n.factory('queryPresets', () =>\r\n   ({\r\n     Schema: {\r\n       q: 'match (n:Schema) optional match (n)-[r]-(m:Schema) return n,r,m'\r\n     },\r\n     AddedRecently: {\r\n       q: `\r\n      match (n:Global) where n.created is not null \r\n      return n order by n.created desc limit 100\r\n      `\r\n     },\r\n     AddedRecentlyPictures: {\r\n       q: `\r\n      MATCH  (p:Label) -- (i:Picture) where p.created is not null \r\n      return p.created,collect(i)[0..5],count(*) as count  \r\n      order by p.created desc limit 500\r\n      `\r\n     },\r\n     Overview: {\r\n       q: `\r\n      match (n) - [r] - (m) where (n:Global and m:Global) \r\n      and (n.Status is null or n.Status > 6) \r\n      and (m.Status is null or m.Status > 6) \r\n      and not (n-[:INSTANCE_OF]-m) RETURN r\r\n      `\r\n     },\r\n     OverViewDense: {\r\n       q: `\r\n      match (n) - [r] - (m) where (n:Global and m:Global) \r\n      and (n.Status is null or n.Status > 3) \r\n      and (m.Status is null or m.Status > 3) \r\n      and not (n-[:INSTANCE_OF]-m) RETURN r\r\n      `\r\n     },\r\n     BritishInfluence: {\r\n       q: `\r\n      MATCH (c:Global)-[r]-(d:Global) where (c:English or c:Scottish) \r\n      and not (c-[:INSTANCE_OF]-d) and not d.Lookup='English' \r\n      and not c.Lookup='English'  return c,d,r\r\n      `\r\n     },\r\n     BritishOnly: {\r\n       q: `\r\n      MATCH (c:Global)-[r]-(d:Global) where (c:English or c:Scottish) and  \r\n      (d:English or d:Scottish) and not (c-[:INSTANCE_OF]-d) \r\n      and not d.Lookup='English' and not c.Lookup='English'  return c,d,r\r\n      `,\r\n       connectAll: true\r\n     },\r\n     FrenchOnly: {\r\n       q: `\r\n      MATCH (c:Global:French)-[r]-(d:Global:French) where  not (c-[:INSTANCE_OF]-d) \r\n      and not d.Lookup='French' and not c.Lookup='French'  return c,d,r\r\n      `,\r\n       connectAll: true\r\n     },\r\n     FrenchPainterInfluence: {\r\n       q: `\r\n      MATCH (c:Global:French:Painter)-[r]-(d:Painter) \r\n      where not (c-[:INSTANCE_OF]-d) \r\n      and not d.Lookup='French' and not c.Lookup='French'  \r\n      return c,d,r\r\n      `,\r\n       connectAll: true\r\n     },\r\n     Cezanne3gen: {\r\n       q: `\r\n      MATCH (c {Lookup:'Cezanne'})-[r]-(d:Painter)  \r\n      -[s]-(e:Painter)  -[t]-(f:Painter) return c,d,e,f,r,s,t\r\n      `,\r\n       connectAll: true\r\n     },\r\n     Cezanne3genOutbound: {\r\n       q: `\r\n      MATCH (c {Lookup:'Cezanne'})\r\n      -[r]->(d:Painter)  -[s]->(e:Painter)  -[t]->(f:Painter) \r\n      return c,d,e,f,r,s,t\r\n      `,\r\n       connectAll: true\r\n     },\r\n     Cezanne3genInbound: {\r\n       q: `\r\n      MATCH (c {Lookup:'Cezanne'})\r\n      <-[r]-(d:Painter)  <-[s]-(e:Painter)  <-[t]-(f:Painter) \r\n      return c,d,e,f,r,s,t\r\n      `,\r\n       connectAll: true\r\n     },\r\n     FrenchEnglishPainters: {\r\n       q: `\r\n      MATCH (c:Global:French:Painter)-[r]-(d:Global:English:Painter) \r\n      where  not (c-[:INSTANCE_OF]-d) and \r\n      not d.Lookup='French' and not c.Lookup='French'  return c,d,r\r\n      `,\r\n       connectAll: true\r\n     },\r\n     German: {\r\n       q: `\r\n      MATCH (c:Global:German)-[r]-(d:Global) \r\n      where not (c-[:INSTANCE_OF]-d) and not \r\n      d.Lookup='German' and not c.Lookup='German'  return c,d,r\r\n      `\r\n     },\r\n     NorthernEurope: {\r\n       q: `\r\n       MATCH (c:Global)-[r]-(d:Global) where \r\n        (c:NorthernEurope or c:German or c:Dutch or c:English or c:Scottish) \r\n        and  \r\n        (d:NorthernEurope or d:German or d:Dutch or d:English or d:Scottish) \r\n        and not c:Provenance and not d:Provenance and not (c-[:INSTANCE_OF]-d) return c,d,r`\r\n     },\r\n     Italian: {\r\n       q: `\r\n      MATCH (c:Global:Italian)-[r]-(d:Global) where not (c-[:INSTANCE_OF]-d) \r\n      and not d.Lookup='Italian' and not c.Lookup='Italian'  return c,d,r\r\n      `\r\n     },\r\n     Spanish: {\r\n       q: `\r\n      MATCH (c:Global:Spanish)-[r]-(d:Global) \r\n      where  not (c-[:INSTANCE_OF]-d) and not d.Lookup='Spanish' \r\n      and not c.Lookup='Spanish'  return c,d,r\r\n      `\r\n     },\r\n     American: {\r\n       q: `\r\n      MATCH (c:Global:American)-[r]-(d:Global) where  not (c-[:INSTANCE_OF]-d) \r\n      and not d.Lookup='American' and not c.Lookup='American'  return c,d,r\r\n      `\r\n     },\r\n     Pop: {\r\n       q: `\r\n      match (n {Lookup:'Pop'}) -[r]-(m:Global) -[s]-(p:Global) \r\n      where not (n-[:INSTANCE_OF]-m) and not (m-[:INSTANCE_OF]-p) \r\n      and (m:Painter or m:Group) and (p:Painter or p:Group) \r\n      and not m:Provenance and not p:Provenance return n,r,m,s,p`\r\n     },\r\n     Impressionism: {\r\n       q: `\r\n      match (n {Lookup:'Impressionist'}) -[r]-(m:Global) -[s]-(p:Global) \r\n      where not (n-[:INSTANCE_OF]-m) and not (m-[:INSTANCE_OF]-p) \r\n      and (m:Painter or m:Group) and (p:Painter or p:Group) \r\n      and not m:Provenance and not p:Provenance return n,r,m,s,p\r\n      `,\r\n       connectAll: true\r\n     },\r\n     Landscape: {\r\n       q: `\r\n      MATCH (c:Global:Landscape)-[r]-(d:Global)  where not (c-[:INSTANCE_OF]-d) \r\n      and not d.Lookup='Landscape' and \r\n      (d:Landscape or d:Provenance or d:Group or d:Iconography or d:Place) return c,d,r`\r\n     },\r\n     Modern: {\r\n       q: `\r\n      MATCH (c:Global)-[r]-(d:Global) where  not (c-[:INSTANCE_OF]-d) \r\n      and c.YearTo > 1870  and d.YearTo > 1870 return c,d,r\r\n      `\r\n     },\r\n     Rennaissance: {\r\n       q: `\r\n      MATCH (c:Global)-[r]-(d:Global) where  not (c-[:INSTANCE_OF]-d) \r\n      and c.YearTo > 1400 and c.YearTo<1700 and d.YearTo > 1400 \r\n      and d.YearTo<1700 return c,d,r\r\n      `\r\n     }\r\n   })\r\n);\r\n","angular.module('neograph.queryInput',\r\n['neograph.neo', 'neograph.query.presets', 'neograph.query.generator'])\r\n.directive('queryinput', (neo, queryPresets) =>\r\n  ({\r\n    replace: true,\r\n    restrict: 'E',\r\n    templateUrl: 'app/query/queryInput.html',\r\n    scope: {\r\n      query: '=',\r\n      editable: '=?',\r\n      defaultpreset: '=?'\r\n    },\r\n    link: $scope => {\r\n      $scope.$watch('preset', preset => {\r\n        if (preset) {\r\n          $scope.query.body = preset;\r\n        }\r\n      });\r\n\r\n      if ($scope.defaultpreset) {\r\n        $scope.preset = queryPresets[$scope.defaultpreset];\r\n      }\r\n\r\n      $scope.$watch('query.body', (body) => {\r\n        if (body && body.q) {\r\n          $scope.getData();\r\n        }\r\n      });\r\n\r\n      $scope.generated = { q: '' };\r\n      $scope.$watch('generated', (generated) => {\r\n        if (generated) {\r\n          $scope.query.body = generated;\r\n        }\r\n      });\r\n\r\n      $scope.nodeChanged = (node) => {\r\n        if (node) {\r\n          $scope.query.name = node.Label || node.Lookup;\r\n        }\r\n      };\r\n\r\n      $scope.connectAll = () => neo.getAllRelationships($scope.query.data.nodes)\r\n                    .then(g => {\r\n                      // Add to cached data\r\n                      Object.assign($scope.query.data.edges, g.edges);\r\n                      $scope.publish('dataUpdate', g);\r\n                    });\r\n\r\n\r\n      $scope.getData = () => {\r\n        const body = $scope.query.body;\r\n        if (body && body.q) {\r\n        // If grid query then return results as array to preserve sort order\r\n          const returnArray = $scope.query.type === 'Grid';\r\n          neo.getGraph(body.q, returnArray).\r\n            then(g => {\r\n              if (body.connectAll) {\r\n                neo.getAllRelationships(g.nodes).\r\n                  then(g2 => Object.assign(g.edges, g2.edges));\r\n              } else {\r\n                $scope.query.data = g;\r\n              }\r\n            });\r\n        }\r\n      };\r\n    }\r\n  })\r\n);\r\n","(function() {\r\n    'use strict';\r\n  angular.module('neograph.node.multiple', ['neograph.neo', 'neograph.utils'])\r\n      .directive('multiple', ['neo', 'utils', function (neo, utils) {\r\n        return {\r\n          restrict: 'E',\r\n          templateUrl: 'app/node/multiple/node.multiple.html',\r\n          scope: {\r\n            nodes: '='\r\n          },\r\n          link: function ($scope) {\r\n\r\n            $scope.$watch('nodes', function (nodes) {\r\n\r\n              if (nodes) {\r\n                var allLabels = nodes.map(function (node) {\r\n                  return node.labels;\r\n                });\r\n\r\n                $scope.labels = allLabels.shift().filter(function (v) {\r\n                  return allLabels.every(function (a) {\r\n                    return a.indexOf(v) !== -1;\r\n                  });\r\n                });\r\n\r\n                $scope.originalLabels = angular.copy($scope.labels);// store for saving so we know what to change\r\n\r\n              }\r\n\r\n            });\r\n\r\n            $scope.addLabel = function (item) {\r\n\r\n              if ($scope.labels.indexOf(item.Label) === -1) {\r\n                $scope.labels.push(item.Label);\r\n              }\r\n            };\r\n            $scope.removeLabel = function (label) {\r\n\r\n              var ind = $scope.labels.indexOf(label);\r\n              if (ind > -1) {\r\n                $scope.labels.splice(ind, 1);\r\n              }\r\n\r\n            };\r\n\r\n            $scope.save = function () {\r\n              neo.saveMultiple({\r\n                nodes: $scope.nodes,\r\n                labels: $scope.labels,\r\n                originalLabels: $scope.originalLabels\r\n              });\r\n            };\r\n\r\n            $scope.restore = function () {\r\n              var restored = [];\r\n              angular.forEach($scope.nodes, function (node) {\r\n                neo.restoreNode(node).then(function () {\r\n                  restored.push(node);\r\n                  if (restored.length === $scope.nodes.length) {\r\n                    $scope.publish('restored', { selection: { nodes: restored } });\r\n                    $scope.selection.multiple = undefined;\r\n                    $scope.tabs = [];\r\n                  }\r\n                });\r\n              });\r\n            };\r\n\r\n            $scope.delete = function () {\r\n              var deleted = [];\r\n              angular.forEach($scope.nodes, function (node) {\r\n                neo.deleteNode(node).then(function () {\r\n                  deleted.push(node);\r\n                  if (deleted.length === $scope.nodes.length) {\r\n                    $scope.publish('deleted', { selection: { nodes: deleted } });\r\n                    $scope.selection.multiple = undefined;\r\n                    $scope.tabs = [];\r\n                  }\r\n                });\r\n              });\r\n            };\r\n\r\n            $scope.destroy = function () {\r\n              var deleted = [];\r\n              angular.forEach($scope.nodes, function (node) {\r\n                neo.destroyNode(node).then(function () {\r\n                  deleted.push(node);\r\n                  if (deleted.length === $scope.nodes.length) {\r\n                    $scope.publish('deleted', { selection: { nodes: deleted } });\r\n                    $scope.selection.multiple = undefined;\r\n                    $scope.tabs = [];\r\n                  }\r\n                });\r\n              });\r\n            };\r\n\r\n\r\n              // $scope.selection.multiple = new (function (nodes, labels) {\r\n              //    var self = this;\r\n              //    this.nodes = nodes;\r\n              //    this.labels = labels;\r\n\r\n\r\n\r\n\r\n\r\n              // })(params.selection.nodes, labels);\r\n\r\n          }\r\n        };\r\n      }]);\r\n})();\r\n","(function() {\r\n  'use strict';\r\n\r\n  angular.module('neograph.node.images', ['neograph.neo', 'ui.router'])\r\n    .controller('NodeImagesCtrl', controller);\r\n\r\n  function controller($scope, $stateParams, neo, nodeService) {\r\n    var vm = this;\r\n    vm.images = [];\r\n    if ($stateParams.node) {\r\n      neo.getImages($stateParams.node).then(function (images) {\r\n        vm.images = images;\r\n        loaded = true;\r\n      });\r\n    }\r\n  }\r\n})();","(function() {\r\n  'use strict';\r\n\r\n  angular.module('neograph.node.properties', ['neograph.node.service', 'neograph.session', 'neograph.utils', 'ui.router'])\r\n      .controller('EditPropertiesCtrl', controller);\r\n\r\n  function controller(nodeService, session, utils, $scope, $stateParams) {\r\n    if ($stateParams.node) {\r\n      nodeService.get($stateParams.node, true).then(node => {\r\n        $scope.node = node;\r\n      });\r\n    }\r\n\r\n    $scope.deleteNode = n => {\r\n      nodeService.delete(n)\r\n        .then(deleted => {\r\n          $scope.selection.selectedNode = deleted;\r\n          // this assumes that the current view is not of deleted items, otherwise this would be inconsistent\r\n          // let view handle its own data ?\r\n          delete $scope.activeView.data.nodes[n.id];\r\n          $scope.publish('deleted', { selection: { nodes: [n] } });\r\n        });\r\n    };\r\n\r\n    $scope.destroyNode = n => {\r\n      nodeService.destroy(n)\r\n        .then(deleted => {\r\n          $scope.selection.selectedNode = undefined;\r\n          // this assumes that the current view is not of deleted items, otherwise this would be inconsistent\r\n          // let view handle its own data ?\r\n          delete $scope.activeView.data.nodes[n.id];\r\n          $scope.publish('deleted', { selection: { nodes: [n] } });\r\n        });\r\n\r\n    };\r\n\r\n    $scope.saveNode = n => {\r\n      nodeService.save(n, session.user)\r\n        .then(node => {\r\n          $scope.node = node;\r\n          var newData = {};\r\n          newData[node.id] = node;\r\n          $scope.publish('dataUpdate', newData);\r\n          // if type, refresh types\r\n          if (node.class == 'Type') {\r\n            utils.refreshTypes();\r\n          }\r\n          $(node.temp.links).each((i, e) => { e.editing = undefined; });\r\n        });\r\n    };\r\n\r\n    $scope.restoreNode = n => {\r\n      nodeService.restore(n)\r\n        .then(node => {\r\n          $scope.node = node;\r\n          var newData = {};\r\n          newData[node.id] = node;\r\n          $scope.publish('dataUpdate', newData);\r\n      });\r\n    };\r\n\r\n    // tie label value to lookup if empty or the same already\r\n    $scope.$watch('node.lookup', function (lookup, beforechange) {\r\n      if (lookup) {\r\n        if ($scope.node.label != undefined && $scope.node.label.trim() == '' || $scope.node.label == beforechange) {\r\n          $scope.node.label = lookup;\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n    $scope.nodeTypes = [];\r\n    $scope.$watchCollection('node.labels', labels => {\r\n      if (labels) {\r\n        const selectedTypes = [];\r\n        angular.forEach($scope.node.labels, function (l) {\r\n          if (utils.types[l]) {\r\n            selectedTypes.push({ lookup: l, class: 'Type' });\r\n          }\r\n        });\r\n        $scope.nodeTypes = selectedTypes;\r\n        if (!$scope.node.class && $scope.nodeTypes.length === 1) {\r\n          $scope.node.class = $scope.nodeTypes[0].lookup; // for types the lookup will always be the label\r\n        }\r\n      }\r\n    });\r\n\r\n    // Can be called from clicking label,\r\n    // in which case item is text value,\r\n    // or from the typeahead in which case it is an object with Lookup property\r\n    $scope.setType = item => {\r\n      if (utils.isType(item.label)) {\r\n        $scope.node.class = item.label;\r\n      }\r\n    };\r\n\r\n    $scope.$watch('newPredicate', v => {\r\n      if (v) {\r\n        $scope.addRelationship({ lookup: v.toUpperCase().replace(/ /g, '_') });\r\n      }\r\n    });\r\n\r\n    $scope.addRelationship = item => {\r\n      const p = predicateFactory.create({ lookup: item.lookup, direction: 'out' });// currently no way to select 'in' relationships\r\n      $scope.node.relationships = $scope.node.relationships || {};\r\n      if (!$scope.node.relationships[p.toString()]) {\r\n        $scope.node.relationships[p.toString()] = { predicate: p, items: [] };\r\n      }\r\n    };\r\n  }\r\n})();\r\n","(function() {\r\n  'use strict';\r\n    \r\n  angular.module('neograph.node.relationships', ['neograph.node.service', 'neograph.session', 'neograph.utils', 'neograph.models.predicate', 'ui.router'])\r\n      .controller('EditRelationshipsCtrl', (nodeService, session, utils, $scope, $stateParams, predicateFactory) => {\r\n        if ($stateParams.node) {\r\n          nodeService.get($stateParams.node, true).then(node => {\r\n            $scope.node = node;\r\n          });\r\n        }\r\n\r\n        $scope.$watch('node', node => {\r\n          if (node) {\r\n            node.labelled = node.labelled || [];\r\n            $('.labelEdit input').val('');\r\n            $scope.deleted = node.labels.indexOf('Deleted') > -1;\r\n          }\r\n        });\r\n\r\n        $scope.nodeTypes = [];\r\n\r\n        $scope.$watch('newPredicate', v => {\r\n          if (v) {\r\n            $scope.addRelationship({ lookup: v.toUpperCase().replace(/ /g, '_') });\r\n          }\r\n        });\r\n\r\n        $scope.addRelationship = item => {\r\n          const p = predicateFactory.create({ lookup:item.lookup, direction: 'out' });// currently no way to select 'in' relationships\r\n          $scope.node.relationships = $scope.node.relationships || {};\r\n          if (!$scope.node.relationships[p.toString()]) {\r\n            $scope.node.relationships[p.toString()] = { predicate: p, items: [] };\r\n          }\r\n        };\r\n      });\r\n\r\n})();\r\n","(function() {\r\n  'use strict';\r\n    \r\n  angular.module('neograph.node.wikipedia', ['neograph.neo'])\r\n      .factory('wikiservice', () => {\r\n        const wikiTabs = (data, page) => {\r\n          let tabs = [];\r\n          if (data.parse) {\r\n            const $wikiDOM = $(`<document>${data.parse.text['*']}</document>`);\r\n            // Handle redirects\r\n            if ($wikiDOM.find('ul.redirectText').length > 0) {\r\n              tabs = { redirect: $wikiDOM.find('ul.redirectText li a').attr('title') };\r\n            } else {\r\n              const images = $('<div></div>');\r\n              $wikiDOM.find('.image').each((i, e) => {\r\n                $(e).\r\n                  attr('href', $(e).attr('href').\r\n                    replace('/wiki/', `https://en.wikipedia.org/wiki/${page.replace(' ', '_')}#/media/`)).\r\n                  attr('target', '_blank').css({ 'padding-right': '5px', 'padding-bottom': '5px' });\r\n              });\r\n              $wikiDOM.find('.image').appendTo(images);\r\n              $wikiDOM.find('p').css({ 'margin-bottom': '4px', 'clear': 'left' });\r\n              $wikiDOM.find('p,.thumb,.thumbinner').css({ 'width': '100%' });\r\n              $wikiDOM.find('h2,h3,h4').css({ 'margin-top': '4px', 'margin-bottom': '2px', 'float': 'left', 'clear': 'left', 'width': '100%', 'overflow': 'hidden' });\r\n              $wikiDOM.find('#toc').remove();\r\n              $wikiDOM.find('.editsection').remove();\r\n              $wikiDOM.find('.magnify').remove();\r\n              $wikiDOM.find('.reflist').remove();\r\n              $wikiDOM.find('img').css({ 'display': 'block', 'float': 'left', 'margin-right': '3px', 'margin-bottom': '3px' });\r\n              $wikiDOM.find('.thumb,.thumbinner').css({ 'float': 'left', 'margin-right': '3px', 'margin-bottom': '3px' });\r\n              $wikiDOM.find('.thumbcaption').css({ 'font-size': '11px' });\r\n              $wikiDOM.find('.plainlinks').remove();\r\n              $wikiDOM.find('#navbox').remove();\r\n              $wikiDOM.find('.rellink').remove();\r\n              $wikiDOM.find('.references').remove();\r\n              $wikiDOM.find('.IPA').remove();\r\n              $wikiDOM.find('sup').remove();\r\n              $wikiDOM.find('dd,blockquote').css({ 'margin': '0px', 'width': '', 'font-size': '11px', 'margin-bottom': '10px', 'margin-top': '7px' });\r\n              $wikiDOM.find('blockquote p').css({ 'font-size': '11px' });\r\n              // NB this has interesting stuff in it\r\n              $wikiDOM.find('.navbox, .vertical-navbox').remove();\r\n              $wikiDOM.find('#persondata').remove();\r\n              $wikiDOM.find('#Footnotes').parent().remove();\r\n              $wikiDOM.find('#References').parent().remove();\r\n              $wikiDOM.find('#Bibliography').parent().remove();\r\n              $wikiDOM.find('.refbegin').remove();\r\n              $wikiDOM.find('.dablink').remove();\r\n              // A bit too radical?\r\n              $wikiDOM.find('small').remove();\r\n              $wikiDOM.find(\"img[alt='Wikisource-logo.svg'], img[alt='About this sound'], img[alt='Listen']\").remove();\r\n              $wikiDOM.find('.mediaContainer').remove();\r\n              // Remove links - (leave external links ?)\r\n              $wikiDOM.find('a').each(() => { $(this).replaceWith($(this).html()); });\r\n              $wikiDOM.find('.gallery').find('p').css({ 'width': '', 'font-size': '11px', 'float': 'left', 'clear': 'left' });\r\n              $wikiDOM.find('.gallery').find('.thumb').css({ 'width': '' });\r\n              $wikiDOM.find('.gallerybox').css('height', '220px');\r\n              $wikiDOM.find('.gallerybox').css('float', 'left');\r\n              $wikiDOM.find('table').css({ 'background': 'none', 'width': '', 'max-width': '', 'color': '' });\r\n              $wikiDOM.find('.gallery').remove();\r\n              $wikiDOM.find('#gallery').parent().remove();\r\n              $wikiDOM.find('#notes').parent().remove();\r\n              $wikiDOM.find('#sources').parent().remove();\r\n              // Radical - remove all tables\r\n              $wikiDOM.find('table').remove();\r\n              $wikiDOM.find('h1,h2,h3,h4').next().css({ 'clear': 'left' });\r\n              $wikiDOM.find('dl').remove();\r\n              $wikiDOM.find('.thumb').remove();\r\n              $wikiDOM.find('ul,.cquote').css({ 'float': 'left', 'clear': 'left' });\r\n              $wikiDOM.find('.infobox, .vcard').remove();\r\n              $wikiDOM.find('.thumbimage').css({ 'max-width': '150px', 'height': 'auto' });\r\n              $wikiDOM.find('.mw-editsection').remove();\r\n              $wikiDOM.html($wikiDOM.html().replace('()', ''));\r\n              $wikiDOM.html($wikiDOM.html().replace('(; ', '('));\r\n              $wikiDOM.find('h2').css({ 'cursor': 'pointer', 'color': 'rgba(0,85,128,1)', 'font-size': '20px' });\r\n              $wikiDOM.find('h3').css({ 'font-size': '18px' });\r\n              $wikiDOM.find('#Gallery').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#See_also').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#Notes').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#External_links').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#Selected_works').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#Sources').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#Other_reading').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#Further_reading').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#Resources').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#Further_reading_and_sources').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#List_of_paintings').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#Self-portraits').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#Selected_paintings').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#References_and_sources').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#Partial_list_of_works').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('#Notes_and_references').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('[id^=Selected_works]').parent().nextUntil('h2').andSelf().remove();\r\n              $wikiDOM.find('[id^=Books]').parent().nextUntil('h2').andSelf().remove();\r\n\r\n              const $introTab = $('<div></div>');\r\n              $wikiDOM.find('p:first').nextUntil('h2').andSelf().appendTo($introTab);\r\n              if ($introTab.text().indexOf('Redirect') === -1 && $introTab.text().indexOf('may refer to') === -1) {\r\n                $introTab.find('ul').remove();\r\n              }\r\n              if ($introTab.html()) {\r\n                tabs.push({\r\n                  header: 'Summary',\r\n                  content: $introTab.html().replace('/; /g', '')\r\n                });\r\n              }\r\n\r\n              $wikiDOM.find('h2').each((i, e) => {\r\n                const $tab = $('<div></div>');\r\n                $(e).nextUntil('h2').appendTo($tab);\r\n                if ($tab.html()) {\r\n                  tabs.push({\r\n                    header: $(e).text(),\r\n                    content: $tab.html()\r\n                  });\r\n                }\r\n              });\r\n\r\n              if (images.html()) {\r\n                images.find('img').css({ 'width': '250px', 'marginBottom': '5px' });\r\n                tabs.push({\r\n                  header: 'Images',\r\n                  content: images.html()\r\n                });\r\n              }\r\n            }\r\n          }\r\n          return tabs;\r\n        };\r\n\r\n        const getWiki = (page, callback) => {\r\n          $.getJSON('http://en.wikipedia.org/w/api.php?action=parse&format=json&callback=?',\r\n            {\r\n              page,\r\n              prop: 'text',\r\n              uselang: 'en'\r\n            },\r\n              data => {\r\n                const tabs = wikiTabs(data, page);\r\n                if (tabs.redirect) {\r\n                  getWiki(tabs.redirect, callback);\r\n                } else {\r\n                  callback(tabs);\r\n                }\r\n              });\r\n        };\r\n\r\n        return {\r\n          getPage: (page, callback) => getWiki(page, callback)\r\n        };\r\n      })\r\n      .directive('wikipedia', (wikiservice, neo) => (\r\n        {\r\n          restrict: 'E',\r\n          templateUrl: 'app/node/wikipedia/node.wikipedia.html',\r\n          scope: {\r\n            node: '=',\r\n            window: '=',\r\n            active: '='\r\n          },\r\n          link: ($scope, $element) => {\r\n            $scope.tabs = [];\r\n\r\n            $scope.setActiveTab = tab => {\r\n              $scope.activeTab = tab;\r\n            };\r\n\r\n            let loaded = false;\r\n            $scope.$watch('node', node => {\r\n              if (node) {\r\n                loaded = false;\r\n                $scope.page = node.Wikipagename || node.Name || node.Title;\r\n              }\r\n            });\r\n\r\n            $scope.savePage = () => {\r\n              $scope.node.Wikipagename = $scope.page;\r\n              neo.saveWikipagename($scope.node).then(node => $scope.page = node.Wikipagename);\r\n            };\r\n\r\n            const getPage = () => {\r\n              wikiservice.getPage($scope.page, tabs => {\r\n                $scope.tabs = tabs;\r\n                $scope.activeTab = $scope.tabs[0];\r\n                $scope.$digest();\r\n                $($element).find('.wikidropdown').dropdown();\r\n                loaded = true;\r\n              }); };\r\n\r\n            $scope.$watch('page', page => {\r\n              if (page && $scope.active) {\r\n                getPage();\r\n              }\r\n              else {\r\n                $scope.tabs = [];\r\n              }\r\n            });\r\n\r\n            $scope.$watch('active', active => {\r\n              if ($scope.page && active && !loaded) {\r\n                getPage();\r\n              }\r\n            });\r\n          }\r\n        })\r\n  );\r\n})();\r\n","(function() {\r\n  'use strict';\r\n    \r\n  angular.module('neograph.node.search',['neograph.node.service', 'ui.router'])\r\n    .controller('SearchCtrl', controller);\r\n\r\n  function controller($scope, $state, nodeService) {\r\n      var vm = this;\r\n      vm.node = undefined;\r\n      $scope.$watch('vm.node', function (n) {\r\n        if (n && n.label) {\r\n          $state.go('admin.node', { node: n.label });\r\n        }\r\n      });\r\n\r\n      vm.newNode = newNode;\r\n      vm.addNodeToGraph = addNodeToGraph;\r\n\r\n      function addNodeToGraph(node) {\r\n      \r\n        if (!$scope.views.Graph.data.nodes[node.id]) {\r\n          neo.getRelationships(node.id).then(function (g) {\r\n\r\n            var newData = {\r\n              edges: g.edges,\r\n              nodes: {}\r\n            };\r\n            newData.nodes[node.id] = node;\r\n\r\n            $scope.publish('dataUpdate', newData);\r\n\r\n            if (node.id === $scope.selection.selectedNode.id) {\r\n              $scope.publish('selected', { selection: { nodes: [node.id] } });\r\n              $scope.publish('focus', node.id);\r\n            }\r\n\r\n          });\r\n          $scope.activeView = graphView;\r\n        }\r\n      };\r\n\r\n      function newNode() {\r\n\r\n        var newNode = {\r\n          id: -1,\r\n          labels: [],\r\n          Type: '',\r\n          temp: {\r\n            tabs: ['Properties']\r\n          }\r\n        };\r\n\r\n        if (vm.nodeLookupText && (!vm.selection.selectedNode || vm.nodeLookupText != vm.selection.selectedNode.Lookup)) {\r\n          newNode.lookup = vm.nodeLookupText;\r\n        }\r\n        vm.selection.selectedNode = newNode;\r\n        vm.tabs = $scope.selection.selectedNode.temp.tabs;\r\n        vm.selectedTab = 'Properties';\r\n      }\r\n    }\r\n \r\n})();","angular.module('neograph.query.generator.favouritesFilter', ['neograph.neo'])\r\n.directive('favouritesFilter', neo => ({\r\n  restrict: 'E',\r\n  templateUrl: 'app/query/generator/favouritesFilter.html',\r\n  scope: {\r\n    options: '=',\r\n    generated: '='\r\n  },\r\n  link: ($scope, $element, $attrs) => {\r\n    $scope.filters = [];\r\n    $scope.node = {};\r\n    let labels = [];\r\n    $scope.$watch('options', function (options) {\r\n      if (options) {\r\n        $scope.node = options.user;\r\n      }\r\n    });\r\n\r\n    $scope.$watch('node', function (user) {\r\n      load();\r\n    });\r\n\r\n    const load = function () {\r\n      if ($scope.node) {\r\n        labels = [$scope.node.Lookup, 'Favourite'];\r\n        getFilters();\r\n        $scope.enabledFilters = [];\r\n        $scope.process();\r\n      }\r\n\r\n    };\r\n\r\n    const getFilters = function () {\r\n      if (labels && labels.length) {\r\n        const labelQuery = `match (a:${labels.join(':')}) - [] -> (b) return distinct(LABELS(b))`;\r\n        neo.getDistinctLabelsQuery(labelQuery).\r\n            then(l => {\r\n                // remove filter for this node as it is duplicating\r\n              angular.forEach(labels, function (lab) {\r\n                l.splice($.inArray(lab, l), 1);\r\n              });\r\n              $scope.filters = l;\r\n            });\r\n      }\r\n    };\r\n\r\n    $scope.process = labs => {\r\n      if ($scope.node) {\r\n        labs = labs || [];\r\n        let b = 'b';\r\n        if (labs.length) {\r\n          b += `:${labs.join(':')}`;\r\n        }\r\n        const q = `match (a:${labels.join(':')}) - [] -> (${b})`;\r\n        $scope.generated = `${q} return b`;\r\n        if (labs.length) {\r\n          neo.getDistinctLabelsQuery(`${q}  return distinct(LABELS(b))`).\r\n              then(l => { $scope.enabledFilters = l; });\r\n        } else {\r\n          $scope.enabledFilters = [];\r\n        }\r\n      }\r\n    };\r\n  }\r\n})\r\n);\r\n","angular.module('neograph.query.generator.nodeFilter', ['neograph.neo'])\r\n    .directive('nodeFilter', neo => ({\r\n      restrict: 'E',\r\n      templateUrl: 'app/query/generator/nodeFilter.html',\r\n      scope: {\r\n        options: '=',\r\n        generated: '=',\r\n        nodechanged: '&?'\r\n      },\r\n      link: ($scope) => {\r\n        $scope.filters = [];\r\n        $scope.node = {};\r\n        let labels = [];\r\n\r\n        const getFilters = () => {\r\n          if (labels && labels.length) {\r\n            neo.getDistinctLabels(labels).\r\n                then(l => {\r\n                  // Remove filter for this node as it is duplicating\r\n                  labels.forEach(lab => { l.splice(lab.indexOf(l), 1); });\r\n                  $scope.filters = l;\r\n                });\r\n          }\r\n        };\r\n\r\n        const load = () => {\r\n          if ($scope.node) {\r\n            labels = [$scope.node.label, 'Picture'];\r\n            getFilters();\r\n            $scope.enabledFilters = [];\r\n            $scope.process();\r\n          }\r\n        };\r\n\r\n        $scope.$watch('options', options => {\r\n          $scope.node = options.node;\r\n        });\r\n\r\n        $scope.$watch('node', node => {\r\n          if ($scope.nodechanged) {\r\n            $scope.nodechanged({ node });\r\n          }\r\n          load();\r\n        });\r\n\r\n        $scope.openNode = () => {\r\n          if ($scope.node) {\r\n            $scope.publish('selected', { selection:{ nodes:[$scope.node] } });\r\n          }\r\n        };\r\n\r\n        $scope.process = labs => {\r\n          if ($scope.node) {\r\n            if (!labs || !labs.length) {\r\n              labs = labels;\r\n            } else {\r\n              labs = labs.concat(labels);\r\n            }\r\n            $scope.generated = `\r\n              match (a:${labs.join(':')}) return a \r\n              order by a.Status desc limit 500\r\n              `;\r\n            if (labs != labels) {\r\n              neo.getDistinctLabels(labs).\r\n                  then(l => { $scope.enabledFilters = l; });\r\n            } else {\r\n              $scope.enabledFilters = [];\r\n            }\r\n          }\r\n        };\r\n      }\r\n    })\r\n);\r\n","angular.module('neograph.query.generator.nodeGraph', ['neograph.neo'])\r\n    .directive('nodeGraph', neo => ({\r\n      restrict: 'E',\r\n      templateUrl: 'app/query/generator/nodeGraph.html',\r\n      scope: {\r\n        options: '=',\r\n        generated: '=',\r\n        nodechanged: '&?'\r\n      },\r\n      link: ($scope) => {\r\n        $scope.querys = [];\r\n        $scope.selected = '';\r\n        $scope.node = {};\r\n        $scope.$watch('options', options => {\r\n          $scope.node = options.node;\r\n        });\r\n\r\n        $scope.$watch('selected', sel => {\r\n          if (sel && sel.q) {\r\n            $scope.generated = sel.q;\r\n          }\r\n        });\r\n\r\n        $scope.$watch('node', node => {\r\n          if (node && node.id) {\r\n            if ($scope.nodechanged) {\r\n              $scope.nodechanged({ node });\r\n            }\r\n            neo.getNode(node.id, false).\r\n              then(loaded => {\r\n                getQuerys(loaded);\r\n              });\r\n          }\r\n        });\r\n\r\n        $scope.openNode = () => {\r\n          if ($scope.node) {\r\n            $scope.publish('selected', { selection: { nodes: [$scope.node] } });\r\n          }\r\n        };\r\n\r\n        function getQuerys(node) {\r\n          if (node) {\r\n            const querys = [];\r\n            const Lookup = node.Lookup;\r\n\r\n            querys.push({\r\n              name: 'All immediate relationships',\r\n              q: `MATCH (c)-[r]-(d:Global) where ID(c) = ${node.id} return c,d,r`\r\n            });\r\n\r\n            querys.push({\r\n              name: 'Self',\r\n              q: `MATCH (c:${node.Label})-[r]-(d:${node.Label}) return c,d,r`\r\n            });\r\n\r\n            if (node.labels.indexOf('Provenance') > -1) {\r\n              querys.push(\r\n                {\r\n                  name: 'Provenance',\r\n                  q: `\r\n                  MATCH (c:Global:${Lookup})-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) \r\n                  and not d.Lookup='${Lookup}' \r\n                  and not c.Lookup='${Lookup}'  return c,d,r\r\n                  `\r\n                });\r\n            }\r\n\r\n            if (node.labels.indexOf('Period') > -1) {\r\n              querys.push({\r\n                name: 'Period',\r\n                q: `\r\n                  MATCH (c:Global:${Lookup})-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) \r\n                  and not d.Lookup='${Lookup}' and not c.Lookup='${Lookup}'  return c,d,r\r\n                  `\r\n              });\r\n            }\r\n\r\n            if (node.labels.indexOf('Theme') > -1) {\r\n              querys.push({\r\n                name: 'Theme',\r\n                q: `\r\n                  MATCH (c:Global:${Lookup})-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) \r\n                  and not d.Lookup='${Lookup}' and not c.Lookup='${Lookup}'  return c,d,r\r\n                  `\r\n              });\r\n            }\r\n\r\n            if (node.labels.indexOf('Person') > -1) {\r\n              querys.push({\r\n                name: 'Outbound Influence',\r\n                q: `\r\n                  MATCH (c {Lookup:'${Lookup}'})-[r]->(d:Painter) \r\n                  with c,d,r optional  match(d) -[s]->(e:Painter) return c,d,r,s,e `,\r\n                connectAll: true\r\n              });\r\n              querys.push({\r\n                name: 'Inbound Influence',\r\n                q: `\r\n                  MATCH (c {Lookup:'${Lookup}'})<-[r]-(d:Painter) \r\n                  with c,d,r optional  match(d) <-[s]-(e:Painter) return c,d,r,s,e \r\n                  `,\r\n                connectAll: true\r\n              });\r\n            }\r\n\r\n            if (node.labels.indexOf('Group') > -1) {\r\n              querys.push({\r\n                name: 'Group',\r\n                q: `\r\n                match (n {Lookup:'${Lookup}'}) -[r]-(m:Global) -[s]-(p:Global) \r\n                where not (n-[:TYPE_OF]-m) and not (m-[:TYPE_OF]-p) \r\n                and (m:Painter or m:Group) and (p:Painter or p:Group) \r\n                and not m:Provenance and not p:Provenance return n,r,m,s,p\r\n                `,\r\n                connectAll: true\r\n              });\r\n            }\r\n\r\n            if (node.labels.indexOf('Iconography') > -1) {\r\n              querys.push({\r\n                name: 'Iconography',\r\n                q: `\r\n                MATCH (c:Global:${Lookup})-[r]-(d:Global)  where not (c-[:TYPE_OF]-d)  \r\n                and not d.Lookup='${Lookup}' and (d:${Lookup} or d:Provenance or d:Group \r\n                or d:Iconography or d:Place) return c,d,r\r\n                `,\r\n                connectAll: true\r\n              });\r\n            }\r\n\r\n            if (node.YearFrom && node.YearTo) {\r\n              querys.push({\r\n                name: 'YearFromYearTo',\r\n                q: `\r\n                MATCH (c:Global)-[r]-(d:Global) where  not (c-[:TYPE_OF]-d) and \r\n                (\r\n                  (c.YearTo >= ${node.YearFrom} and c.YearTo<= ${node.YearTo}) \r\n                  or (c.YearFrom >= ${node.YearFrom} and c.YearFrom<= ${node.YearTo})\r\n                )\r\n                and \r\n                (\r\n                  (d.YearTo >= ${node.YearFrom} and d.YearTo<= ${node.YearTo}) \r\n                  or (d.YearFrom >= ${node.YearFrom} and d.YearFrom<= ${node.YearTo})\r\n                )\r\n                return c,d,r\r\n               `,\r\n                connectAll: true\r\n              });\r\n            }\r\n\r\n            const prevselection = $scope.selected.name;\r\n\r\n            $scope.querys = querys;\r\n            $scope.querys.forEach(e => {\r\n              if (e.name === prevselection) {\r\n                $scope.selected = e;\r\n              }\r\n            });\r\n          }\r\n        }\r\n      }\r\n    })\r\n);\r\n","angular.module('neograph.query.generator', [\r\n  'neograph.query.generator.favouritesFilter',\r\n  'neograph.query.generator.nodeFilter',\r\n  'neograph.query.generator.nodeGraph',\r\n]);\n"],"sourceRoot":"/source/"}